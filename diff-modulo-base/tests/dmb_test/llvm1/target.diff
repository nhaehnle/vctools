diff --git a/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/amdgpu_isel.ll.expected b/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/amdgpu_isel.ll.expected
index 0cc5ede932a9..38c20409191d 100644
--- a/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/amdgpu_isel.ll.expected
+++ b/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/amdgpu_isel.ll.expected
@@ -1,65 +1,65 @@
 ; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
 ; RUN: llc -mtriple=amdgcn-amd-amdhsa -stop-after=finalize-isel -debug-only=isel -o /dev/null %s 2>&1 | FileCheck %s
 
 define i64 @i64_test(i64 %i) nounwind readnone {
 ; CHECK-LABEL: i64_test:
 ; CHECK:       SelectionDAG has 9 nodes:
-; CHECK-NEXT:    t0: ch = EntryToken
+; CHECK-NEXT:    t0: ch,glue = EntryToken
 ; CHECK-NEXT:    t11: ch,glue = CopyToReg t0, Register:i32 $vgpr0, IMPLICIT_DEF:i32
 ; CHECK-NEXT:    t17: i32 = V_MOV_B32_e32 TargetConstant:i32<0>
 ; CHECK-NEXT:    t13: ch,glue = CopyToReg t11, Register:i32 $vgpr1, t17, t11:1
 ; CHECK-NEXT:    t14: ch = SI_RETURN Register:i32 $vgpr0, Register:i32 $vgpr1, t13, t13:1
 ; CHECK-EMPTY:
   %loc = alloca i64
   %j = load i64, i64 * %loc
   %r = add i64 %i, %j
   ret i64 %r
 }
 
 define i64 @i32_test(i32 %i) nounwind readnone {
 ; CHECK-LABEL: i32_test:
 ; CHECK:       SelectionDAG has 8 nodes:
 ; CHECK-NEXT:    t5: i32 = V_MOV_B32_e32 TargetConstant:i32<0>
-; CHECK-NEXT:    t0: ch = EntryToken
+; CHECK-NEXT:    t0: ch,glue = EntryToken
 ; CHECK-NEXT:    t7: ch,glue = CopyToReg t0, Register:i32 $vgpr0, t5
 ; CHECK-NEXT:    t9: ch,glue = CopyToReg t7, Register:i32 $vgpr1, t5, t7:1
 ; CHECK-NEXT:    t10: ch = SI_RETURN Register:i32 $vgpr0, Register:i32 $vgpr1, t9, t9:1
 ; CHECK-EMPTY:
   %loc = alloca i32
   %j = load i32, i32 * %loc
   %r = add i32 %i, %j
   %ext = zext i32 %r to i64
   ret i64 %ext
 }
 
 define i64 @i16_test(i16 %i) nounwind readnone {
 ; CHECK-LABEL: i16_test:
 ; CHECK:       SelectionDAG has 8 nodes:
 ; CHECK-NEXT:    t5: i32 = V_MOV_B32_e32 TargetConstant:i32<0>
-; CHECK-NEXT:    t0: ch = EntryToken
+; CHECK-NEXT:    t0: ch,glue = EntryToken
 ; CHECK-NEXT:    t7: ch,glue = CopyToReg t0, Register:i32 $vgpr0, t5
 ; CHECK-NEXT:    t9: ch,glue = CopyToReg t7, Register:i32 $vgpr1, t5, t7:1
 ; CHECK-NEXT:    t10: ch = SI_RETURN Register:i32 $vgpr0, Register:i32 $vgpr1, t9, t9:1
 ; CHECK-EMPTY:
   %loc = alloca i16
   %j = load i16, i16 * %loc
   %r = add i16 %i, %j
   %ext = zext i16 %r to i64
   ret i64 %ext
 }
 
 define i64 @i8_test(i8 %i) nounwind readnone {
 ; CHECK-LABEL: i8_test:
 ; CHECK:       SelectionDAG has 8 nodes:
 ; CHECK-NEXT:    t5: i32 = V_MOV_B32_e32 TargetConstant:i32<0>
-; CHECK-NEXT:    t0: ch = EntryToken
+; CHECK-NEXT:    t0: ch,glue = EntryToken
 ; CHECK-NEXT:    t7: ch,glue = CopyToReg t0, Register:i32 $vgpr0, t5
 ; CHECK-NEXT:    t9: ch,glue = CopyToReg t7, Register:i32 $vgpr1, t5, t7:1
 ; CHECK-NEXT:    t10: ch = SI_RETURN Register:i32 $vgpr0, Register:i32 $vgpr1, t9, t9:1
 ; CHECK-EMPTY:
   %loc = alloca i8
   %j = load i8, i8 * %loc
   %r = add i8 %i, %j
   %ext = zext i8 %r to i64
   ret i64 %ext
 }
diff --git a/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/lanai_isel.ll.expected b/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/lanai_isel.ll.expected
index 62aa8da4b721..7d152d9d3ec8 100644
--- a/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/lanai_isel.ll.expected
+++ b/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/lanai_isel.ll.expected
@@ -1,17 +1,17 @@
 ; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
 ; RUN: llc -mtriple=lanai -stop-after=finalize-isel -debug-only=isel -o /dev/null %s 2>&1 | FileCheck %s
 
 define i64 @i64_test(i64 %i) nounwind readnone {
 ; CHECK-LABEL: i64_test:
 ; CHECK:       SelectionDAG has 22 nodes:
-; CHECK-NEXT:    t0: ch = EntryToken
+; CHECK-NEXT:    t0: ch,glue = EntryToken
 ; CHECK-NEXT:    t5: i32,ch = LDW_RI<Mem:(load (s32) from %fixed-stack.0)> TargetFrameIndex:i32<-2>, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t7: i32 = ADD_I_LO TargetFrameIndex:i32<0>, TargetConstant:i32<0>
 ; CHECK-NEXT:    t29: i32 = OR_I_LO t7, TargetConstant:i32<4>
 ; CHECK-NEXT:    t22: i32,ch = LDW_RI<Mem:(dereferenceable load (s32) from %ir.loc + 4, basealign 8)> t29, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t24: i32 = ADD_R t5, t22, TargetConstant:i32<0>
 ; CHECK-NEXT:    t3: i32,ch = LDW_RI<Mem:(load (s32) from %fixed-stack.1, align 8)> TargetFrameIndex:i32<-1>, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t19: i32,ch = LDW_RI<Mem:(dereferenceable load (s32) from %ir.loc, align 8)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t25: i32 = ADD_R t3, t19, TargetConstant:i32<0>
 ; CHECK-NEXT:    t30: i32,glue = SFSUB_F_RR t24, t5
 ; CHECK-NEXT:    t31: i32 = SCC TargetConstant:i32<4>, t30:1
@@ -22,40 +22,40 @@ define i64 @i64_test(i64 %i) nounwind readnone {
 ; CHECK-EMPTY:
   %loc = alloca i64
   %j = load i64, i64 * %loc
   %r = add i64 %i, %j
   ret i64 %r
 }
 
 define i64 @i32_test(i32 %i) nounwind readnone {
 ; CHECK-LABEL: i32_test:
 ; CHECK:       SelectionDAG has 14 nodes:
-; CHECK-NEXT:    t0: ch = EntryToken
+; CHECK-NEXT:    t0: ch,glue = EntryToken
 ; CHECK-NEXT:    t21: i32,ch = CopyFromReg t0, Register:i32 $r0
 ; CHECK-NEXT:    t13: ch,glue = CopyToReg t0, Register:i32 $rv, t21
 ; CHECK-NEXT:    t3: i32,ch = LDW_RI<Mem:(load (s32) from %fixed-stack.0, align 8)> TargetFrameIndex:i32<-1>, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t6: i32,ch = LDW_RI<Mem:(dereferenceable load (s32) from %ir.loc)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t7: i32 = ADD_R t3, t6, TargetConstant:i32<0>
 ; CHECK-NEXT:    t15: ch,glue = CopyToReg t13, Register:i32 $r9, t7, t13:1
 ; CHECK-NEXT:    t16: ch = RET Register:i32 $rv, Register:i32 $r9, t15, t15:1
 ; CHECK-EMPTY:
   %loc = alloca i32
   %j = load i32, i32 * %loc
   %r = add i32 %i, %j
   %ext = zext i32 %r to i64
   ret i64 %ext
 }
 
 define i64 @i16_test(i16 %i) nounwind readnone {
 ; CHECK-LABEL: i16_test:
 ; CHECK:       SelectionDAG has 19 nodes:
-; CHECK-NEXT:    t0: ch = EntryToken
+; CHECK-NEXT:    t0: ch,glue = EntryToken
 ; CHECK-NEXT:    t33: i32,ch = CopyFromReg t0, Register:i32 $r0
 ; CHECK-NEXT:    t14: ch,glue = CopyToReg t0, Register:i32 $rv, t33
 ; CHECK-NEXT:    t1: i32 = ADD_I_LO TargetFrameIndex:i32<-1>, TargetConstant:i32<0>
 ; CHECK-NEXT:    t21: i32 = OR_I_LO t1, TargetConstant:i32<2>
 ; CHECK-NEXT:    t23: i32,ch = LDHz_RI<Mem:(load (s16) from %fixed-stack.0 + 2)> t21, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t22: i32,ch = LDHz_RI<Mem:(dereferenceable load (s16) from %ir.loc)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t24: i32 = ADD_R t23, t22, TargetConstant:i32<0>
 ; CHECK-NEXT:    t27: i32 = AND_I_HI t24, TargetConstant:i32<0>
 ; CHECK-NEXT:    t16: ch,glue = CopyToReg t14, Register:i32 $r9, t27, t14:1
 ; CHECK-NEXT:    t28: i32 = TargetConstant<65535>
@@ -64,21 +64,21 @@ define i64 @i16_test(i16 %i) nounwind readnone {
   %loc = alloca i16
   %j = load i16, i16 * %loc
   %r = add i16 %i, %j
   %ext = zext i16 %r to i64
   ret i64 %ext
 }
 
 define i64 @i8_test(i8 %i) nounwind readnone {
 ; CHECK-LABEL: i8_test:
 ; CHECK:       SelectionDAG has 20 nodes:
-; CHECK-NEXT:    t0: ch = EntryToken
+; CHECK-NEXT:    t0: ch,glue = EntryToken
 ; CHECK-NEXT:    t33: i32,ch = CopyFromReg t0, Register:i32 $r0
 ; CHECK-NEXT:    t14: ch,glue = CopyToReg t0, Register:i32 $rv, t33
 ; CHECK-NEXT:    t1: i32 = ADD_I_LO TargetFrameIndex:i32<-1>, TargetConstant:i32<0>
 ; CHECK-NEXT:    t21: i32 = OR_I_LO t1, TargetConstant:i32<3>
 ; CHECK-NEXT:    t23: i32,ch = LDBz_RI<Mem:(load (s8) from %fixed-stack.0 + 3)> t21, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t22: i32,ch = LDBz_RI<Mem:(dereferenceable load (s8) from %ir.loc)> TargetFrameIndex:i32<0>, TargetConstant:i32<0>, TargetConstant:i32<0>, t0
 ; CHECK-NEXT:    t24: i32 = ADD_R t23, t22, TargetConstant:i32<0>
 ; CHECK-NEXT:    t26: i32 = SLI TargetConstant:i32<255>
 ; CHECK-NEXT:    t27: i32 = AND_R t24, t26, TargetConstant:i32<0>
 ; CHECK-NEXT:    t16: ch,glue = CopyToReg t14, Register:i32 $r9, t27, t14:1
diff --git a/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/x86_isel.ll.expected b/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/x86_isel.ll.expected
index 279c8ee2336e..0175556cd17e 100644
--- a/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/x86_isel.ll.expected
+++ b/llvm/test/tools/UpdateTestChecks/update_llc_test_checks/Inputs/x86_isel.ll.expected
@@ -1,111 +1,111 @@
 ; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
 ; RUN: llc -mtriple=x86_64 -stop-after=finalize-isel -debug-only=isel -o /dev/null %s 2>&1 | FileCheck %s --check-prefix=PIC
 ; RUN: llc -mtriple=x86_64-windows -stop-after=finalize-isel -debug-only=isel -o /dev/null %s 2>&1 | FileCheck %s --check-prefix=WIN
 
 define i64 @i64_test(i64 %i) nounwind readnone {
 ; PIC-LABEL: i64_test:
 ; PIC:       SelectionDAG has 12 nodes:
-; PIC-NEXT:    t0: ch = EntryToken
+; PIC-NEXT:    t0: ch,glue = EntryToken
 ; PIC-NEXT:    t2: i64,ch = CopyFromReg t0, Register:i64 %0
 ; PIC-NEXT:    t7: i64,i32,ch = ADD64rm<Mem:(dereferenceable load (s64) from %ir.loc)> t2, TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
 ; PIC-NEXT:    t10: ch,glue = CopyToReg t0, Register:i64 $rax, t7
 ; PIC-NEXT:    t11: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t10, t10:1
 ; PIC-EMPTY:
 ;
 ; WIN-LABEL: i64_test:
 ; WIN:       SelectionDAG has 12 nodes:
-; WIN-NEXT:    t0: ch = EntryToken
+; WIN-NEXT:    t0: ch,glue = EntryToken
 ; WIN-NEXT:    t2: i64,ch = CopyFromReg t0, Register:i64 %0
 ; WIN-NEXT:    t7: i64,i32,ch = ADD64rm<Mem:(dereferenceable load (s64) from %ir.loc)> t2, TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
 ; WIN-NEXT:    t10: ch,glue = CopyToReg t0, Register:i64 $rax, t7
 ; WIN-NEXT:    t11: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t10, t10:1
 ; WIN-EMPTY:
   %loc = alloca i64
   %j = load i64, i64 * %loc
   %r = add i64 %i, %j
   ret i64 %r
 }
 
 define i64 @i32_test(i32 %i) nounwind readnone {
 ; PIC-LABEL: i32_test:
 ; PIC:       SelectionDAG has 15 nodes:
-; PIC-NEXT:    t0: ch = EntryToken
+; PIC-NEXT:    t0: ch,glue = EntryToken
 ; PIC-NEXT:    t2: i32,ch = CopyFromReg t0, Register:i32 %0
 ; PIC-NEXT:    t7: i32,i32,ch = ADD32rm<Mem:(dereferenceable load (s32) from %ir.loc)> t2, TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
 ; PIC-NEXT:    t8: i64 = SUBREG_TO_REG TargetConstant:i64<0>, t7, TargetConstant:i32<6>
 ; PIC-NEXT:    t11: ch,glue = CopyToReg t0, Register:i64 $rax, t8
 ; PIC-NEXT:    t12: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t11, t11:1
 ; PIC-EMPTY:
 ;
 ; WIN-LABEL: i32_test:
 ; WIN:       SelectionDAG has 15 nodes:
-; WIN-NEXT:    t0: ch = EntryToken
+; WIN-NEXT:    t0: ch,glue = EntryToken
 ; WIN-NEXT:    t2: i32,ch = CopyFromReg t0, Register:i32 %0
 ; WIN-NEXT:    t7: i32,i32,ch = ADD32rm<Mem:(dereferenceable load (s32) from %ir.loc)> t2, TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
 ; WIN-NEXT:    t8: i64 = SUBREG_TO_REG TargetConstant:i64<0>, t7, TargetConstant:i32<6>
 ; WIN-NEXT:    t11: ch,glue = CopyToReg t0, Register:i64 $rax, t8
 ; WIN-NEXT:    t12: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t11, t11:1
 ; WIN-EMPTY:
   %loc = alloca i32
   %j = load i32, i32 * %loc
   %r = add i32 %i, %j
   %ext = zext i32 %r to i64
   ret i64 %ext
 }
 
 define i64 @i16_test(i16 %i) nounwind readnone {
 ; PIC-LABEL: i16_test:
 ; PIC:       SelectionDAG has 18 nodes:
-; PIC-NEXT:    t0: ch = EntryToken
+; PIC-NEXT:    t0: ch,glue = EntryToken
 ; PIC-NEXT:    t2: i32,ch = CopyFromReg t0, Register:i32 %0
 ; PIC-NEXT:    t3: i16 = EXTRACT_SUBREG t2, TargetConstant:i32<4>
 ; PIC-NEXT:    t8: i16,i32,ch = ADD16rm<Mem:(dereferenceable load (s16) from %ir.loc)> t3, TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
 ; PIC-NEXT:    t15: i32 = MOVZX32rr16 t8
 ; PIC-NEXT:    t9: i64 = SUBREG_TO_REG TargetConstant:i64<0>, t15, TargetConstant:i32<6>
 ; PIC-NEXT:    t12: ch,glue = CopyToReg t0, Register:i64 $rax, t9
 ; PIC-NEXT:    t13: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t12, t12:1
 ; PIC-EMPTY:
 ;
 ; WIN-LABEL: i16_test:
 ; WIN:       SelectionDAG has 16 nodes:
-; WIN-NEXT:    t0: ch = EntryToken
+; WIN-NEXT:    t0: ch,glue = EntryToken
 ; WIN-NEXT:    t2: i16,ch = CopyFromReg t0, Register:i16 %0
 ; WIN-NEXT:    t7: i16,i32,ch = ADD16rm<Mem:(dereferenceable load (s16) from %ir.loc)> t2, TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
 ; WIN-NEXT:    t14: i32 = MOVZX32rr16 t7
 ; WIN-NEXT:    t8: i64 = SUBREG_TO_REG TargetConstant:i64<0>, t14, TargetConstant:i32<6>
 ; WIN-NEXT:    t11: ch,glue = CopyToReg t0, Register:i64 $rax, t8
 ; WIN-NEXT:    t12: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t11, t11:1
 ; WIN-EMPTY:
   %loc = alloca i16
   %j = load i16, i16 * %loc
   %r = add i16 %i, %j
   %ext = zext i16 %r to i64
   ret i64 %ext
 }
 
 define i64 @i8_test(i8 %i) nounwind readnone {
 ; PIC-LABEL: i8_test:
 ; PIC:       SelectionDAG has 18 nodes:
-; PIC-NEXT:    t0: ch = EntryToken
+; PIC-NEXT:    t0: ch,glue = EntryToken
 ; PIC-NEXT:    t2: i32,ch = CopyFromReg t0, Register:i32 %0
 ; PIC-NEXT:    t3: i8 = EXTRACT_SUBREG t2, TargetConstant:i32<1>
 ; PIC-NEXT:    t8: i8,i32,ch = ADD8rm<Mem:(dereferenceable load (s8) from %ir.loc)> t3, TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
 ; PIC-NEXT:    t15: i32 = MOVZX32rr8 t8
 ; PIC-NEXT:    t9: i64 = SUBREG_TO_REG TargetConstant:i64<0>, t15, TargetConstant:i32<6>
 ; PIC-NEXT:    t12: ch,glue = CopyToReg t0, Register:i64 $rax, t9
 ; PIC-NEXT:    t13: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t12, t12:1
 ; PIC-EMPTY:
 ;
 ; WIN-LABEL: i8_test:
 ; WIN:       SelectionDAG has 16 nodes:
-; WIN-NEXT:    t0: ch = EntryToken
+; WIN-NEXT:    t0: ch,glue = EntryToken
 ; WIN-NEXT:    t2: i8,ch = CopyFromReg t0, Register:i8 %0
 ; WIN-NEXT:    t7: i8,i32,ch = ADD8rm<Mem:(dereferenceable load (s8) from %ir.loc)> t2, TargetFrameIndex:i64<0>, TargetConstant:i8<1>, Register:i64 $noreg, TargetConstant:i32<0>, Register:i16 $noreg, t0
 ; WIN-NEXT:    t14: i32 = MOVZX32rr8 t7
 ; WIN-NEXT:    t8: i64 = SUBREG_TO_REG TargetConstant:i64<0>, t14, TargetConstant:i32<6>
 ; WIN-NEXT:    t11: ch,glue = CopyToReg t0, Register:i64 $rax, t8
 ; WIN-NEXT:    t12: ch = RET TargetConstant:i32<0>, Register:i64 $rax, t11, t11:1
 ; WIN-EMPTY:
   %loc = alloca i8
   %j = load i8, i8 * %loc
   %r = add i8 %i, %j
diff --git a/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/Inputs/x86-MIFlags.mir b/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/Inputs/x86-MIFlags.mir
new file mode 100644
index 000000000000..162d8493037f
--- /dev/null
+++ b/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/Inputs/x86-MIFlags.mir
@@ -0,0 +1,79 @@
+# RUN: llc -mtriple=x86_64-unknown-unknown -run-pass=finalize-isel -verify-machineinstrs  %s -o - | FileCheck %s --check-prefixes=CHECK
+
+--- |
+
+
+  define float @check_MI_flags(float %f) {
+    %div = fdiv nsz float 1.000000e+00, %f
+    ret float %div
+  }
+
+...
+---
+name:            check_MI_flags
+alignment:       16
+exposesReturnsTwice: false
+legalized:       false
+regBankSelected: false
+selected:        false
+failedISel:      false
+tracksRegLiveness: true
+hasWinCFI:       false
+callsEHReturn:   false
+callsUnwindInit: false
+hasEHCatchret:   false
+hasEHScopes:     false
+hasEHFunclets:   false
+failsVerification: false
+tracksDebugUserValues: false
+registers:
+  - { id: 0, class: fr32, preferred-register: '' }
+  - { id: 1, class: fr32, preferred-register: '' }
+  - { id: 2, class: fr32, preferred-register: '' }
+liveins:
+  - { reg: '$xmm0', virtual-reg: '%0' }
+frameInfo:
+  isFrameAddressTaken: false
+  isReturnAddressTaken: false
+  hasStackMap:     false
+  hasPatchPoint:   false
+  stackSize:       0
+  offsetAdjustment: 0
+  maxAlignment:    1
+  adjustsStack:    false
+  hasCalls:        false
+  stackProtector:  ''
+  functionContext: ''
+  maxCallFrameSize: 4294967295
+  cvBytesOfCalleeSavedRegisters: 0
+  hasOpaqueSPAdjustment: false
+  hasVAStart:      false
+  hasMustTailInVarArgFunc: false
+  hasTailCall:     false
+  localFrameSize:  0
+  savePoint:       ''
+  restorePoint:    ''
+fixedStack:      []
+stack:           []
+callSites:       []
+debugValueSubstitutions: []
+constants:
+  - id:              0
+    value:           'float 1.000000e+00'
+    alignment:       4
+    isTargetSpecific: false
+machineFunctionInfo: {}
+body:             |
+  bb.0 (%ir-block.0):
+    liveins: $xmm0
+
+    %0:fr32 = COPY $xmm0
+    %1:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s32) from constant-pool)
+    %2:fr32 = nsz nofpexcept DIVSSrr %1, %0, implicit $mxcsr
+    $xmm0 = COPY %2
+    RET 0, $xmm0
+
+...
+
+
+
diff --git a/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/Inputs/x86-MIFlags.mir.expected b/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/Inputs/x86-MIFlags.mir.expected
new file mode 100644
index 000000000000..39560a1e1ab0
--- /dev/null
+++ b/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/Inputs/x86-MIFlags.mir.expected
@@ -0,0 +1,88 @@
+# NOTE: Assertions have been autogenerated by utils/update_mir_test_checks.py
+# RUN: llc -mtriple=x86_64-unknown-unknown -run-pass=finalize-isel -verify-machineinstrs  %s -o - | FileCheck %s --check-prefixes=CHECK
+
+--- |
+
+
+  define float @check_MI_flags(float %f) {
+    %div = fdiv nsz float 1.000000e+00, %f
+    ret float %div
+  }
+
+...
+---
+name:            check_MI_flags
+alignment:       16
+exposesReturnsTwice: false
+legalized:       false
+regBankSelected: false
+selected:        false
+failedISel:      false
+tracksRegLiveness: true
+hasWinCFI:       false
+callsEHReturn:   false
+callsUnwindInit: false
+hasEHCatchret:   false
+hasEHScopes:     false
+hasEHFunclets:   false
+failsVerification: false
+tracksDebugUserValues: false
+registers:
+  - { id: 0, class: fr32, preferred-register: '' }
+  - { id: 1, class: fr32, preferred-register: '' }
+  - { id: 2, class: fr32, preferred-register: '' }
+liveins:
+  - { reg: '$xmm0', virtual-reg: '%0' }
+frameInfo:
+  isFrameAddressTaken: false
+  isReturnAddressTaken: false
+  hasStackMap:     false
+  hasPatchPoint:   false
+  stackSize:       0
+  offsetAdjustment: 0
+  maxAlignment:    1
+  adjustsStack:    false
+  hasCalls:        false
+  stackProtector:  ''
+  functionContext: ''
+  maxCallFrameSize: 4294967295
+  cvBytesOfCalleeSavedRegisters: 0
+  hasOpaqueSPAdjustment: false
+  hasVAStart:      false
+  hasMustTailInVarArgFunc: false
+  hasTailCall:     false
+  localFrameSize:  0
+  savePoint:       ''
+  restorePoint:    ''
+fixedStack:      []
+stack:           []
+callSites:       []
+debugValueSubstitutions: []
+constants:
+  - id:              0
+    value:           'float 1.000000e+00'
+    alignment:       4
+    isTargetSpecific: false
+machineFunctionInfo: {}
+body:             |
+  bb.0 (%ir-block.0):
+    liveins: $xmm0
+
+    ; CHECK-LABEL: name: check_MI_flags
+    ; CHECK: liveins: $xmm0
+    ; CHECK-NEXT: {{  $}}
+    ; CHECK-NEXT: [[COPY:%[0-9]+]]:fr32 = COPY $xmm0
+    ; CHECK-NEXT: [[MOVSSrm_alt:%[0-9]+]]:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s32) from constant-pool)
+    ; CHECK-NEXT: [[DIVSSrr:%[0-9]+]]:fr32 = nsz nofpexcept DIVSSrr [[MOVSSrm_alt]], [[COPY]], implicit $mxcsr
+    ; CHECK-NEXT: $xmm0 = COPY [[DIVSSrr]]
+    ; CHECK-NEXT: RET 0, $xmm0
+    %0:fr32 = COPY $xmm0
+    %1:fr32 = MOVSSrm_alt $rip, 1, $noreg, %const.0, $noreg :: (load (s32) from constant-pool)
+    %2:fr32 = nsz nofpexcept DIVSSrr %1, %0, implicit $mxcsr
+    $xmm0 = COPY %2
+    RET 0, $xmm0
+
+...
+
+
+
diff --git a/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/x86-MIFlags.test b/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/x86-MIFlags.test
new file mode 100644
index 000000000000..f551f016eea0
--- /dev/null
+++ b/llvm/test/tools/UpdateTestChecks/update_mir_test_checks/x86-MIFlags.test
@@ -0,0 +1,5 @@
+# REQUIRES: x86-registered-target
+## Check that update_mir_test_checks uses CHECK-NEXT directories
+
+# RUN: cp -f %S/Inputs/x86-MIFlags.mir %t.mir && %update_mir_test_checks %t.mir
+# RUN: diff -u %S/Inputs/x86-MIFlags.mir.expected %t.mir
diff --git a/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll b/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll
index 84d255d8ec7e..7c4f11f969eb 100644
--- a/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll
+++ b/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll
@@ -1,8 +1,6 @@
-; Use grep as an easily available "custom tool". Strip out comment lines to get
-; identical output before and after update_test_checks has run.
-; RUN: grep -v ';' %s | FileCheck --check-prefixes=CHECK %s
+; RUN: llvm-extract -S --func=foo %s | FileCheck --check-prefixes=CHECK %s
 
 define i32 @foo(i32 %x) {
   %y = add i32 %x, 1
   ret i32 %y
 }
diff --git a/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll.expected b/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll.expected
index af99202eb349..6b7ac81bd6d8 100644
--- a/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll.expected
+++ b/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll.expected
@@ -1,13 +1,11 @@
-; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool grep
-; Use grep as an easily available "custom tool". Strip out comment lines to get
-; identical output before and after update_test_checks has run.
-; RUN: grep -v ';' %s | FileCheck --check-prefixes=CHECK %s
+; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool llvm-extract
+; RUN: llvm-extract -S --func=foo %s | FileCheck --check-prefixes=CHECK %s
 
 define i32 @foo(i32 %x) {
 ; CHECK-LABEL: @foo(
 ; CHECK-NEXT:    [[Y:%.*]] = add i32 [[X:%.*]], 1
 ; CHECK-NEXT:    ret i32 [[Y]]
 ;
   %y = add i32 %x, 1
   ret i32 %y
 }
diff --git a/llvm/test/tools/UpdateTestChecks/update_test_checks/custom-tool.test b/llvm/test/tools/UpdateTestChecks/update_test_checks/custom-tool.test
index 98a91dfdfa97..42ab44915889 100644
--- a/llvm/test/tools/UpdateTestChecks/update_test_checks/custom-tool.test
+++ b/llvm/test/tools/UpdateTestChecks/update_test_checks/custom-tool.test
@@ -1,9 +1,8 @@
-# Don't rely on 'grep' being available on Windows.
-# UNSUPPORTED: system-windows
+# NOTE: Use a '\' in 'llvm\-extract' to prevent substitution.
 
-# RUN: cp -f %S/Inputs/custom-tool.ll %t.ll && %update_test_checks %t.ll --tool=grep --tool-binary=grep
+# RUN: cp -f %S/Inputs/custom-tool.ll %t.ll && %update_test_checks %t.ll --tool=llvm\-extract --tool-binary=llvm-extract
 # RUN: diff -u %t.ll %S/Inputs/custom-tool.ll.expected
 
-## Check that running the script again does not change the result:
-# RUN: %update_test_checks %t.ll --tool=grep --tool-binary=grep
+## Check that running the script again does not change the result.
+# RUN: %update_test_checks %t.ll --tool=llvm\-extract --tool-binary=llvm-extract
 # RUN: diff -u %t.ll %S/Inputs/custom-tool.ll.expected
diff --git a/llvm/test/tools/dxil-dis/attribute-filter.ll b/llvm/test/tools/dxil-dis/attribute-filter.ll
index 3ce3b0e03c36..94a091c229e0 100644
--- a/llvm/test/tools/dxil-dis/attribute-filter.ll
+++ b/llvm/test/tools/dxil-dis/attribute-filter.ll
@@ -1,13 +1,13 @@
 ; RUN: llc %s --filetype=obj -o - | dxil-dis -o - | FileCheck %s
 
-; CHECK: target triple = "dxil-unknown-shadermodel6.7-library"
+; CHECK: target triple = "dxil-ms-dx"
 target triple = "dxil-unknown-shadermodel6.7-library"
 
 ; CHECK: Function Attrs: nounwind readnone
 ; Function Attrs: norecurse nounwind readnone willreturn
 define float @fma(float %0, float %1, float %2) #0 {
   %4 = fmul float %0, %1
   %5 = fadd float %4, %2
   ret float %5
 }
 
diff --git a/llvm/test/tools/dxil-dis/triple.ll b/llvm/test/tools/dxil-dis/triple.ll
new file mode 100644
index 000000000000..1c21d3fa6284
--- /dev/null
+++ b/llvm/test/tools/dxil-dis/triple.ll
@@ -0,0 +1,5 @@
+; RUN: llc --filetype=obj %s -o - | dxil-dis  -o - | FileCheck %s
+target triple = "dxil-unknown-shadermodel6.7-library"
+
+; Make sure triple updated to dxil.
+; CHECK:target triple = "dxil-ms-dx"
diff --git a/llvm/test/tools/llvm-config/booleans.test b/llvm/test/tools/llvm-config/booleans.test
index 6483db51da39..c186374a60c4 100644
--- a/llvm/test/tools/llvm-config/booleans.test
+++ b/llvm/test/tools/llvm-config/booleans.test
@@ -14,14 +14,14 @@ CHECK-YESNO-NOT: warning
 RUN: llvm-config --build-mode 2>&1 | FileCheck --check-prefix=CHECK-BUILD-MODE %s
 CHECK-BUILD-MODE: {{[Dd][Ee][Bb][Uu][Gg]|[Rr][Ee][Ll][Ee][Aa][Ss][Ee]|[Rr][Ee][Ll][Ww][Ii][Tt][Hh][Dd][Ee][Bb][Ii][Nn][Ff][Oo]|[Mm][Ii][Nn][Ss][Ii][Zz][Ee][Rr][Ee][Ll]}}
 CHECK-BUILD-MODE-NOT: error:
 CHECK-BUILD-MODE-NOT: warning
 
 RUN: llvm-config --build-system 2>&1 | FileCheck --check-prefix=CHECK-BUILD-SYSTEM %s
 CHECK-BUILD-SYSTEM: {{cmake|gn}}
 CHECK-BUILD-SYSTEM-NOT: error:
 CHECK-BUILD-SYSTEM-NOT: warning
 
-RUN: llvm-config --shared-mode 2>&1 | FileCheck --check-prefix=CHECK-SHARED-MODE %s
+RUN: llvm-config --shared-mode 2>&1 Support | FileCheck --check-prefix=CHECK-SHARED-MODE %s
 CHECK-SHARED-MODE: {{static|shared}}
 CHECK-SHARED-MODE-NOT: error:
 CHECK-SHARED-MODE-NOT: warning
diff --git a/llvm/test/tools/llvm-config/system-libs.test b/llvm/test/tools/llvm-config/system-libs.test
index 9105d242e049..708ce3ef99a4 100644
--- a/llvm/test/tools/llvm-config/system-libs.test
+++ b/llvm/test/tools/llvm-config/system-libs.test
@@ -1,6 +1,6 @@
-RUN: llvm-config --link-static --system-libs 2>&1 | FileCheck %s
+RUN: llvm-config --link-static --system-libs Support 2>&1 | FileCheck %s
 REQUIRES: static-libs
 UNSUPPORTED: system-windows
 CHECK: -l
 CHECK-NOT: error
 CHECK-NOT: warning
diff --git a/llvm/test/tools/llvm-config/system-libs.windows.test b/llvm/test/tools/llvm-config/system-libs.windows.test
index 09970cf68994..55d1fbea9788 100644
--- a/llvm/test/tools/llvm-config/system-libs.windows.test
+++ b/llvm/test/tools/llvm-config/system-libs.windows.test
@@ -1,7 +1,7 @@
-RUN: llvm-config --link-static --system-libs 2>&1 | FileCheck %s
+RUN: llvm-config --link-static --system-libs Support 2>&1 | FileCheck %s
 REQUIRES: static-libs
 REQUIRES: system-windows
 CHECK-NOT: -l
 CHECK: psapi.lib shell32.lib ole32.lib uuid.lib advapi32.lib
 CHECK-NOT: error
 CHECK-NOT: warning
diff --git a/llvm/test/tools/llvm-cov/branch-export-lcov.test b/llvm/test/tools/llvm-cov/branch-export-lcov.test
index 1714123ec7be..fe43dd66de8d 100644
--- a/llvm/test/tools/llvm-cov/branch-export-lcov.test
+++ b/llvm/test/tools/llvm-cov/branch-export-lcov.test
@@ -1,13 +1,14 @@
 
 // RUN: llvm-profdata merge %S/Inputs/branch-showBranchPercentage.proftext -o %t.profdata
 // RUN: llvm-cov export --format=lcov %S/Inputs/branch-showBranchPercentage.o32l -instr-profile %t.profdata | FileCheck %s
+// RUN: llvm-cov export --format=lcov --skip-branches %S/Inputs/branch-showBranchPercentage.o32l -instr-profile %t.profdata | FileCheck %s --check-prefix=NOBRANCH
 
 // CHECK-DAG: BRDA:14,0,0,1
 // CHECK-DAG: BRDA:14,0,1,5
 // CHECK-DAG: BRDA:27,0,0,1
 // CHECK-DAG: BRDA:27,0,1,4
 // CHECK-DAG: BRDA:27,1,2,0
 // CHECK-DAG: BRDA:27,1,3,1
 // CHECK-DAG: BRDA:27,2,4,0
 // CHECK-DAG: BRDA:27,2,5,5
 // CHECK-DAG: BRDA:27,3,6,2
@@ -32,20 +33,21 @@
 // CHECK-DAG: BRDA:47,0,1,2
 // CHECK-DAG: BRDA:53,0,0,50
 // CHECK-DAG: BRDA:53,0,1,5
 // CHECK-NOT: BRDA
 // CHECK: BRF:30
 // CHECK: BRH:26
 
 // Check recursive macro-expansions.
 // RUN: llvm-profdata merge %S/Inputs/branch-macros.proftext -o %t.profdata
 // RUN: llvm-cov export --format=lcov %S/Inputs/branch-macros.o32l -instr-profile %t.profdata | FileCheck %s -check-prefix=MACROS
+// RUN: llvm-cov export --format=lcov --skip-branches %S/Inputs/branch-macros.o32l -instr-profile %t.profdata | FileCheck %s -check-prefix=NOBRANCH
 
 // MACROS-COUNT-4: BRDA:17
 // MACROS-NOT: BRDA:17
 
 // MACROS-COUNT-4: BRDA:19
 // MACROS-NOT: BRDA:19
 
 // MACROS-COUNT-4: BRDA:21
 // MACROS-NOT: BRDA:21
 
@@ -64,10 +66,15 @@
 // MACROS: BRDA:27,3,6,-
 // MACROS: BRDA:27,3,7,-
 // MACROS: BRDA:27,4,8,-
 // MACROS: BRDA:27,4,9,-
 
 // MACROS-COUNT-10: BRDA:37
 // MACROS-NOT: BRDA:37
 // MACROS-NOT: BRDA
 // MACROS: BRF:40
 // MACROS: BRH:24
+
+// NOBRANCH-NOT: BRDA
+// NOBRANCH-NOT: BRF
+// NOBRANCH-NOT: BRH
+
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-compare-logical-elements.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-compare-logical-elements.test
new file mode 100644
index 000000000000..532d11054a8a
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-compare-logical-elements.test
@@ -0,0 +1,101 @@
+; Test case 1 - General options
+
+; test.cpp
+;  1  using INTPTR = const int *;
+;  2  int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {
+;  3    if (ParamBool) {
+;  4      typedef int INTEGER;
+;  5      const INTEGER CONSTANT = 7;
+;  6      return CONSTANT;
+;  7    }
+;  8    return ParamUnsigned;
+;  9  }
+
+; Compare mode - Logical view.
+; The output shows in view form the 'missing (-), added (+)' elements,
+; giving more context by swapping the reference and target object files.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --compare=types \
+; RUN:                         --report=view \
+; RUN:                         --print=symbols,types \
+; RUN:                         %p/Inputs/test-dwarf-clang.o \
+; RUN:                         %p/Inputs/test-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Reference: 'test-dwarf-clang.o'
+; ONE-NEXT: Target:    'test-dwarf-gcc.o'
+; ONE-EMPTY:
+; ONE-NEXT: Logical View:
+; ONE-NEXT:  [000]           {File} 'test-dwarf-clang.o'
+; ONE-EMPTY:
+; ONE-NEXT:  [001]             {CompileUnit} 'test.cpp'
+; ONE-NEXT:  [002]     1         {TypeAlias} 'INTPTR' -> '* const int'
+; ONE-NEXT:  [002]     2         {Function} extern not_inlined 'foo' -> 'int'
+; ONE-NEXT:  [003]                 {Block}
+; ONE-NEXT:  [004]     5             {Variable} 'CONSTANT' -> 'const INTEGER'
+; ONE-NEXT: +[004]     4             {TypeAlias} 'INTEGER' -> 'int'
+; ONE-NEXT:  [003]     2           {Parameter} 'ParamBool' -> 'bool'
+; ONE-NEXT:  [003]     2           {Parameter} 'ParamPtr' -> 'INTPTR'
+; ONE-NEXT:  [003]     2           {Parameter} 'ParamUnsigned' -> 'unsigned int'
+; ONE-NEXT: -[003]     4           {TypeAlias} 'INTEGER' -> 'int'
+
+; Compare mode - Logical elements.
+; The output shows in tabular form the 'missing (-), added (+)' elements,
+; giving more context by swapping the reference and target object files.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --compare=types \
+; RUN:                         --report=list \
+; RUN:                         --print=symbols,types,summary \
+; RUN:                         %p/Inputs/test-dwarf-clang.o \
+; RUN:                         %p/Inputs/test-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s
+
+; TWO:      Reference: 'test-dwarf-clang.o'
+; TWO-NEXT: Target:    'test-dwarf-gcc.o'
+; TWO-EMPTY:
+; TWO-NEXT: (1) Missing Types:
+; TWO-NEXT: -[003]     4     {TypeAlias} 'INTEGER' -> 'int'
+; TWO-EMPTY:
+; TWO-NEXT: (1) Added Types:
+; TWO-NEXT: +[004]     4     {TypeAlias} 'INTEGER' -> 'int'
+; TWO-EMPTY:
+; TWO-NEXT: ----------------------------------------
+; TWO-NEXT: Element   Expected    Missing      Added
+; TWO-NEXT: ----------------------------------------
+; TWO-NEXT: Scopes           4          0          0
+; TWO-NEXT: Symbols          0          0          0
+; TWO-NEXT: Types            2          1          1
+; TWO-NEXT: Lines            0          0          0
+; TWO-NEXT: ----------------------------------------
+; TWO-NEXT: Total            6          1          1
+
+; Changing the 'Reference' and 'Target' order:
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --compare=types \
+; RUN:                         --report=list \
+; RUN:                         --print=symbols,types,summary \
+; RUN:                         %p/Inputs/test-dwarf-gcc.o \
+; RUN:                         %p/Inputs/test-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=THR %s
+
+; THR:      Reference: 'test-dwarf-gcc.o'
+; THR-NEXT: Target:    'test-dwarf-clang.o'
+; THR-EMPTY:
+; THR-NEXT: (1) Missing Types:
+; THR-NEXT: -[004]     4     {TypeAlias} 'INTEGER' -> 'int'
+; THR-EMPTY:
+; THR-NEXT: (1) Added Types:
+; THR-NEXT: +[003]     4     {TypeAlias} 'INTEGER' -> 'int'
+; THR-EMPTY:
+; THR-NEXT: ----------------------------------------
+; THR-NEXT: Element   Expected    Missing      Added
+; THR-NEXT: ----------------------------------------
+; THR-NEXT: Scopes           4          0          0
+; THR-NEXT: Symbols          0          0          0
+; THR-NEXT: Types            2          1          1
+; THR-NEXT: Lines            0          0          0
+; THR-NEXT: ----------------------------------------
+; THR-NEXT: Total            6          1          1
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-print-basic-details.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-print-basic-details.test
new file mode 100644
index 000000000000..9b38a527e8a5
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-print-basic-details.test
@@ -0,0 +1,67 @@
+; Test case 1 - General options.
+
+; test.cpp
+;  1  using INTPTR = const int *;
+;  2  int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {
+;  3    if (ParamBool) {
+;  4      typedef int INTEGER;
+;  5      const INTEGER CONSTANT = 7;
+;  6      return CONSTANT;
+;  7    }
+;  8    return ParamUnsigned;
+;  9  }
+
+; Print basic details.
+; The following command prints basic details for all the logical elements
+; sorted by the debug information internal offset; it includes its lexical
+; level and debug info format.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format \
+; RUN:                         --output-sort=offset \
+; RUN:                         --print=scopes,symbols,types,lines,instructions \
+; RUN:                         %p/Inputs/test-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format \
+; RUN:                         --output-sort=offset \
+; RUN:                         --print=elements \
+; RUN:                         %p/Inputs/test-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [000]           {File} 'test-dwarf-clang.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'test.cpp'
+; ONE-NEXT: [002]     2         {Function} extern not_inlined 'foo' -> 'int'
+; ONE-NEXT: [003]     2           {Parameter} 'ParamPtr' -> 'INTPTR'
+; ONE-NEXT: [003]     2           {Parameter} 'ParamUnsigned' -> 'unsigned int'
+; ONE-NEXT: [003]     2           {Parameter} 'ParamBool' -> 'bool'
+; ONE-NEXT: [003]                 {Block}
+; ONE-NEXT: [004]     5             {Variable} 'CONSTANT' -> 'const INTEGER'
+; ONE-NEXT: [004]     5             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	$0x7, -0x1c(%rbp)'
+; ONE-NEXT: [004]     6             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	$0x7, -0x4(%rbp)'
+; ONE-NEXT: [004]                   {Code} 'jmp	0x6'
+; ONE-NEXT: [004]     8             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	-0x14(%rbp), %eax'
+; ONE-NEXT: [003]     4           {TypeAlias} 'INTEGER' -> 'int'
+; ONE-NEXT: [003]     2           {Line}
+; ONE-NEXT: [003]                 {Code} 'pushq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; ONE-NEXT: [003]                 {Code} 'movb	%dl, %al'
+; ONE-NEXT: [003]                 {Code} 'movq	%rdi, -0x10(%rbp)'
+; ONE-NEXT: [003]                 {Code} 'movl	%esi, -0x14(%rbp)'
+; ONE-NEXT: [003]                 {Code} 'andb	$0x1, %al'
+; ONE-NEXT: [003]                 {Code} 'movb	%al, -0x15(%rbp)'
+; ONE-NEXT: [003]     3           {Line}
+; ONE-NEXT: [003]                 {Code} 'testb	$0x1, -0x15(%rbp)'
+; ONE-NEXT: [003]                 {Code} 'je	0x13'
+; ONE-NEXT: [003]     8           {Line}
+; ONE-NEXT: [003]                 {Code} 'movl	%eax, -0x4(%rbp)'
+; ONE-NEXT: [003]     9           {Line}
+; ONE-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %eax'
+; ONE-NEXT: [003]                 {Code} 'popq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'retq'
+; ONE-NEXT: [003]     9           {Line}
+; ONE-NEXT: [002]     1         {TypeAlias} 'INTPTR' -> '* const int'
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-select-logical-elements.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-select-logical-elements.test
new file mode 100644
index 000000000000..55584b89fec4
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/01-dwarf-select-logical-elements.test
@@ -0,0 +1,71 @@
+; Test case 1 - General options
+
+; test.cpp
+;  1  using INTPTR = const int *;
+;  2  int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {
+;  3    if (ParamBool) {
+;  4      typedef int INTEGER;
+;  5      const INTEGER CONSTANT = 7;
+;  6      return CONSTANT;
+;  7    }
+;  8    return ParamUnsigned;
+;  9  }
+
+; Select logical elements.
+; The following prints all 'instructions', 'symbols' and 'types' that
+; contain 'inte' or 'movl' in their names or types, using a tab layout
+; and given the number of matches.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --select-nocase --select-regex \
+; RUN:                         --select=INTe --select=movl \
+; RUN:                         --report=list \
+; RUN:                         --print=symbols,types,instructions,summary \
+; RUN:                         %p/Inputs/test-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [000]           {File} 'test-dwarf-clang.o'
+; ONE-EMPTY:
+; ONE-NEXT: [001]           {CompileUnit} 'test.cpp'
+; ONE-NEXT: [004]           {Code} 'movl	$0x7, -0x1c(%rbp)'
+; ONE-NEXT: [004]           {Code} 'movl	$0x7, -0x4(%rbp)'
+; ONE-NEXT: [003]           {Code} 'movl	%eax, -0x4(%rbp)'
+; ONE-NEXT: [003]           {Code} 'movl	%esi, -0x14(%rbp)'
+; ONE-NEXT: [004]           {Code} 'movl	-0x14(%rbp), %eax'
+; ONE-NEXT: [003]           {Code} 'movl	-0x4(%rbp), %eax'
+; ONE-NEXT: [003]     4     {TypeAlias} 'INTEGER' -> 'int'
+; ONE-NEXT: [004]     5     {Variable} 'CONSTANT' -> 'const INTEGER'
+; ONE-EMPTY:
+; ONE-NEXT: -----------------------------
+; ONE-NEXT: Element      Total    Printed
+; ONE-NEXT: -----------------------------
+; ONE-NEXT: Scopes           3          0
+; ONE-NEXT: Symbols          4          1
+; ONE-NEXT: Types            2          1
+; ONE-NEXT: Lines           17          6
+; ONE-NEXT: -----------------------------
+; ONE-NEXT: Total           26          8
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --select-regex --select-nocase \
+; RUN:                         --select=INTe \
+; RUN:                         --report=list \
+; RUN:                         --print=symbols,types \
+; RUN:                         %p/Inputs/test-dwarf-clang.o \
+; RUN:                         %p/Inputs/test-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s
+
+; TWO:      Logical View:
+; TWO-NEXT: [000]           {File} 'test-dwarf-clang.o'
+; TWO-EMPTY:
+; TWO-NEXT: [001]           {CompileUnit} 'test.cpp'
+; TWO-NEXT: [003]     4     {TypeAlias} 'INTEGER' -> 'int'
+; TWO-NEXT: [004]     5     {Variable} 'CONSTANT' -> 'const INTEGER'
+; TWO-EMPTY:
+; TWO-NEXT: Logical View:
+; TWO-NEXT: [000]           {File} 'test-dwarf-gcc.o'
+; TWO-EMPTY:
+; TWO-NEXT: [001]           {CompileUnit} 'test.cpp'
+; TWO-NEXT: [004]     4     {TypeAlias} 'INTEGER' -> 'int'
+; TWO-NEXT: [004]     5     {Variable} 'CONSTANT' -> 'const INTEGER'
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/02-dwarf-logical-lines.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/02-dwarf-logical-lines.test
new file mode 100644
index 000000000000..e925ad7c4b07
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/02-dwarf-logical-lines.test
@@ -0,0 +1,63 @@
+; Test case 2 - Assembler instructions.
+
+; hello-world.cpp
+;  1  extern int printf(const char * format, ... );
+;  2
+;  3  int main()
+;  4  {
+;  5    printf("Hello, World\n");
+;  6    return 0;
+;  7  }
+
+; Logical lines.
+; The logical views shows the intermixed lines and assembler instructions,
+; allowing to compare the code generated by the different toolchains.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format,producer \
+; RUN:                         --print=lines,instructions \
+; RUN:                         %p/Inputs/hello-world-dwarf-clang.o \
+; RUN:                         %p/Inputs/hello-world-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [000]           {File} 'hello-world-dwarf-clang.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'hello-world.cpp'
+; ONE-NEXT: [002]               {Producer} 'clang version 15.0.0 {{.*}}'
+; ONE-NEXT: [002]     3         {Function} extern not_inlined 'main' -> 'int'
+; ONE-NEXT: [003]     4           {Line}
+; ONE-NEXT: [003]                 {Code} 'pushq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; ONE-NEXT: [003]                 {Code} 'subq	$0x10, %rsp'
+; ONE-NEXT: [003]                 {Code} 'movl	$0x0, -0x4(%rbp)'
+; ONE-NEXT: [003]     5           {Line}
+; ONE-NEXT: [003]                 {Code} 'leaq	(%rip), %rdi'
+; ONE-NEXT: [003]                 {Code} 'movb	$0x0, %al'
+; ONE-NEXT: [003]                 {Code} 'callq	0x0'
+; ONE-NEXT: [003]     6           {Line}
+; ONE-NEXT: [003]                 {Code} 'xorl	%eax, %eax'
+; ONE-NEXT: [003]                 {Code} 'addq	$0x10, %rsp'
+; ONE-NEXT: [003]                 {Code} 'popq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'retq'
+; ONE-NEXT: [003]     6           {Line}
+; ONE-EMPTY:
+; ONE-NEXT: Logical View:
+; ONE-NEXT: [000]           {File} 'hello-world-dwarf-gcc.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'hello-world.cpp'
+; ONE-NEXT: [002]               {Producer} 'GNU C++14 10.3.0 {{.*}}'
+; ONE-NEXT: [002]     3         {Function} extern not_inlined 'main' -> 'int'
+; ONE-NEXT: [003]     4           {Line}
+; ONE-NEXT: [003]                 {Code} 'endbr64'
+; ONE-NEXT: [003]                 {Code} 'pushq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; ONE-NEXT: [003]     5           {Line}
+; ONE-NEXT: [003]                 {Code} 'leaq	(%rip), %rdi'
+; ONE-NEXT: [003]                 {Code} 'movl	$0x0, %eax'
+; ONE-NEXT: [003]                 {Code} 'callq	0x0'
+; ONE-NEXT: [003]     6           {Line}
+; ONE-NEXT: [003]                 {Code} 'movl	$0x0, %eax'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'popq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'retq'
+; ONE-NEXT: [003]     7           {Line}
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/03-dwarf-incorrect-lexical-scope-typedef.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/03-dwarf-incorrect-lexical-scope-typedef.test
new file mode 100644
index 000000000000..0abacc0ccae2
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/03-dwarf-incorrect-lexical-scope-typedef.test
@@ -0,0 +1,124 @@
+; Test case 3 - Incorrect lexical scope for typedef.
+
+; pr-44884.cpp
+;  1  int bar(float Input) { return (int)Input; }
+;  2
+;  3  unsigned foo(char Param) {
+;  4    typedef int INT;                // ** Definition for INT **
+;  5    INT Value = Param;
+;  6    {
+;  7      typedef float FLOAT;          // ** Definition for FLOAT **
+;  8      {
+;  9        FLOAT Added = Value + Param;
+; 10        Value = bar(Added);
+; 11      }
+; 12    }
+; 13    return Value + Param;
+; 14  }
+
+; The lines 4 and 7 contains 2 typedefs, defined at different lexical
+; scopes.
+
+; The above test is used to illustrates a scope issue found in the
+; Clang compiler.
+; PR44884: https://bugs.llvm.org/show_bug.cgi?id=44884
+; PR44229: https://github.com/llvm/llvm-project/issues/44229
+
+; In the following logical views, we can see that the Clang compiler
+; emits both typedefs at the same lexical scope (3), which is wrong.
+; GCC emit correct lexical scope for both typedefs.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format,producer \
+; RUN:                         --output-sort=kind \
+; RUN:                         --print=symbols,types,lines \
+; RUN:                         %p/Inputs/pr-44884-dwarf-clang.o \
+; RUN:                         %p/Inputs/pr-44884-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [000]           {File} 'pr-44884-dwarf-clang.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'pr-44884.cpp'
+; ONE-NEXT: [002]               {Producer} 'clang version 15.0.0 {{.*}}'
+; ONE-NEXT: [002]     1         {Function} extern not_inlined 'bar' -> 'int'
+; ONE-NEXT: [003]     1           {Parameter} 'Input' -> 'float'
+; ONE-NEXT: [003]     1           {Line}
+; ONE-NEXT: [003]     1           {Line}
+; ONE-NEXT: [003]     1           {Line}
+; ONE-NEXT: [002]     3         {Function} extern not_inlined 'foo' -> 'unsigned int'
+; ONE-NEXT: [003]                 {Block}
+; ONE-NEXT: [004]     9             {Variable} 'Added' -> 'FLOAT'
+; ONE-NEXT: [004]     9             {Line}
+; ONE-NEXT: [004]     9             {Line}
+; ONE-NEXT: [004]     9             {Line}
+; ONE-NEXT: [004]     9             {Line}
+; ONE-NEXT: [004]     9             {Line}
+; ONE-NEXT: [004]    10             {Line}
+; ONE-NEXT: [004]    10             {Line}
+; ONE-NEXT: [004]    10             {Line}
+; ONE-NEXT: [004]    13             {Line}
+; ONE-NEXT: [003]     3           {Parameter} 'Param' -> 'char'
+; ONE-NEXT: [003]     7           {TypeAlias} 'FLOAT' -> 'float'
+; ONE-NEXT: [003]     4           {TypeAlias} 'INT' -> 'int'
+; ONE-NEXT: [003]     5           {Variable} 'Value' -> 'INT'
+; ONE-NEXT: [003]     3           {Line}
+; ONE-NEXT: [003]     5           {Line}
+; ONE-NEXT: [003]     5           {Line}
+; ONE-NEXT: [003]    13           {Line}
+; ONE-NEXT: [003]    13           {Line}
+; ONE-NEXT: [003]    13           {Line}
+; ONE-NEXT: [003]    13           {Line}
+; ONE-EMPTY:
+; ONE-NEXT: Logical View:
+; ONE-NEXT: [000]           {File} 'pr-44884-dwarf-gcc.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'pr-44884.cpp'
+; ONE-NEXT: [002]               {Producer} 'GNU C++14 10.3.0 {{.*}}'
+; ONE-NEXT: [002]     1         {Function} extern not_inlined 'bar' -> 'int'
+; ONE-NEXT: [003]     1           {Parameter} 'Input' -> 'float'
+; ONE-NEXT: [003]     1           {Line}
+; ONE-NEXT: [003]     1           {Line}
+; ONE-NEXT: [003]     1           {Line}
+; ONE-NEXT: [002]     3         {Function} extern not_inlined 'foo' -> 'unsigned int'
+; ONE-NEXT: [003]                 {Block}
+; ONE-NEXT: [004]                   {Block}
+; ONE-NEXT: [005]     9               {Variable} 'Added' -> 'FLOAT'
+; ONE-NEXT: [005]     9               {Line}
+; ONE-NEXT: [005]     9               {Line}
+; ONE-NEXT: [005]     9               {Line}
+; ONE-NEXT: [005]    10               {Line}
+; ONE-NEXT: [005]    13               {Line}
+; ONE-NEXT: [004]     7             {TypeAlias} 'FLOAT' -> 'float'
+; ONE-NEXT: [003]     3           {Parameter} 'Param' -> 'char'
+; ONE-NEXT: [003]     4           {TypeAlias} 'INT' -> 'int'
+; ONE-NEXT: [003]     5           {Variable} 'Value' -> 'INT'
+; ONE-NEXT: [003]     3           {Line}
+; ONE-NEXT: [003]     5           {Line}
+; ONE-NEXT: [003]    13           {Line}
+; ONE-NEXT: [003]    14           {Line}
+; ONE-NEXT: [003]    14           {Line}
+
+; Using the selection facilities, we can produce a simple tabular
+; output showing just the logical types that are 'Typedef'.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format \
+; RUN:                         --output-sort=name \
+; RUN:                         --select-types=Typedef \
+; RUN:                         --report=list \
+; RUN:                         --print=types \
+; RUN:                         %p/Inputs/pr-44884-*.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s
+
+; TWO:      Logical View:
+; TWO-NEXT: [000]           {File} 'pr-44884-dwarf-clang.o' -> elf64-x86-64
+; TWO-EMPTY:
+; TWO-NEXT: [001]           {CompileUnit} 'pr-44884.cpp'
+; TWO-NEXT: [003]     7     {TypeAlias} 'FLOAT' -> 'float'
+; TWO-NEXT: [003]     4     {TypeAlias} 'INT' -> 'int'
+; TWO-EMPTY:
+; TWO-NEXT: Logical View:
+; TWO-NEXT: [000]           {File} 'pr-44884-dwarf-gcc.o' -> elf64-x86-64
+; TWO-EMPTY:
+; TWO-NEXT: [001]           {CompileUnit} 'pr-44884.cpp'
+; TWO-NEXT: [004]     7     {TypeAlias} 'FLOAT' -> 'float'
+; TWO-NEXT: [003]     4     {TypeAlias} 'INT' -> 'int'
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/04-dwarf-missing-nested-enumerators.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/04-dwarf-missing-nested-enumerators.test
new file mode 100644
index 000000000000..e86035c9e771
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/04-dwarf-missing-nested-enumerators.test
@@ -0,0 +1,123 @@
+; Test case 4 - Missing nested enumerations.
+
+; pr-46466.cpp
+;   1  struct Struct {
+;   2    union Union {
+;   3      enum NestedEnum { RED, BLUE };
+;   4    };
+;   5    Union U;
+;   6  };
+;   7
+;   8  Struct S;
+;   9  int test() {
+;  10    return S.U.BLUE;
+;  11  }
+
+; The above test is used to illustrate a scope issue found in the Clang
+; compiler.
+; PR46466: https://bugs.llvm.org/show_bug.cgi?id=46466
+; PR45811: https://github.com/llvm/llvm-project/issues/45811
+
+; In the following logical views, we can see that the DWARF debug
+; information generated by the Clang compiler does not include any
+; references to the enumerators 'RED' and 'BLUE'. The DWARF generated
+; by GCC, does include such references.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format,producer \
+; RUN:                         --output-sort=name \
+; RUN:                         --print=symbols,types \
+; RUN:                         %p/Inputs/pr-46466-dwarf-clang.o \
+; RUN:                         %p/Inputs/pr-46466-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [000]           {File} 'pr-46466-dwarf-clang.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'pr-46466.cpp'
+; ONE-NEXT: [002]               {Producer} 'clang version 15.0.0 {{.*}}'
+; ONE-NEXT: [002]     8         {Variable} extern 'S' -> 'Struct'
+; ONE-NEXT: [002]     1         {Struct} 'Struct'
+; ONE-NEXT: [003]     5           {Member} public 'U' -> 'Union'
+; ONE-EMPTY:
+; ONE-NEXT: Logical View:
+; ONE-NEXT: [000]           {File} 'pr-46466-dwarf-gcc.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'pr-46466.cpp'
+; ONE-NEXT: [002]               {Producer} 'GNU C++14 10.3.0 {{.*}}'
+; ONE-NEXT: [002]     8         {Variable} extern 'S' -> 'Struct'
+; ONE-NEXT: [002]     1         {Struct} 'Struct'
+; ONE-NEXT: [003]     5           {Member} public 'U' -> 'Union'
+; ONE-NEXT: [003]     2           {Union} 'Union'
+; ONE-NEXT: [004]     3             {Enumeration} 'NestedEnum' -> 'unsigned int'
+; ONE-NEXT: [005]                     {Enumerator} 'BLUE' = '0x1'
+; ONE-NEXT: [005]                     {Enumerator} 'RED' = '0x0'
+
+; Using the selection facilities, we can produce a logical view
+; showing just the logical types that are 'Enumerator' and its
+; parents. The logical view is sorted by the types name.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format \
+; RUN:                         --output-sort=name \
+; RUN:                         --select-types=Enumerator \
+; RUN:                         --report=parents \
+; RUN:                         --print=types \
+; RUN:                         %p/Inputs/pr-46466-*.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s
+
+; TWO:      Logical View:
+; TWO-NEXT: [000]           {File} 'pr-46466-dwarf-clang.o' -> elf64-x86-64
+; TWO-EMPTY:
+; TWO-NEXT: [001]             {CompileUnit} 'pr-46466.cpp'
+; TWO-EMPTY:
+; TWO-NEXT: Logical View:
+; TWO-NEXT: [000]           {File} 'pr-46466-dwarf-gcc.o' -> elf64-x86-64
+; TWO-EMPTY:
+; TWO-NEXT: [001]             {CompileUnit} 'pr-46466.cpp'
+; TWO-NEXT: [002]     1         {Struct} 'Struct'
+; TWO-NEXT: [003]     2           {Union} 'Union'
+; TWO-NEXT: [004]     3             {Enumeration} 'NestedEnum' -> 'unsigned int'
+; TWO-NEXT: [005]                     {Enumerator} 'BLUE' = '0x1'
+; TWO-NEXT: [005]                     {Enumerator} 'RED' = '0x0'
+
+; Using the selection facilities, we can produce a simple tabular output
+; including a summary for the logical types that are 'Enumerator'. The
+; logical view is sorted by the types name.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format \
+; RUN:                         --output-sort=name \
+; RUN:                         --select-types=Enumerator \
+; RUN:                         --print=types,summary \
+; RUN:                         %p/Inputs/pr-46466-*.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=THR %s
+
+; THR:      Logical View:
+; THR-NEXT: [000]           {File} 'pr-46466-dwarf-clang.o' -> elf64-x86-64
+; THR-EMPTY:
+; THR-NEXT: [001]           {CompileUnit} 'pr-46466.cpp'
+; THR-EMPTY:
+; THR-NEXT: -----------------------------
+; THR-NEXT: Element      Total    Printed
+; THR-NEXT: -----------------------------
+; THR-NEXT: Scopes           4          0
+; THR-NEXT: Symbols          0          0
+; THR-NEXT: Types            0          0
+; THR-NEXT: Lines            0          0
+; THR-NEXT: -----------------------------
+; THR-NEXT: Total            4          0
+; THR-EMPTY:
+; THR-NEXT: Logical View:
+; THR-NEXT: [000]           {File} 'pr-46466-dwarf-gcc.o' -> elf64-x86-64
+; THR-EMPTY:
+; THR-NEXT: [001]           {CompileUnit} 'pr-46466.cpp'
+; THR-NEXT: [005]           {Enumerator} 'BLUE' = '0x1'
+; THR-NEXT: [005]           {Enumerator} 'RED' = '0x0'
+; THR-EMPTY:
+; THR-NEXT: -----------------------------
+; THR-NEXT: Element      Total    Printed
+; THR-NEXT: -----------------------------
+; THR-NEXT: Scopes           5          0
+; THR-NEXT: Symbols          0          0
+; THR-NEXT: Types            2          2
+; THR-NEXT: Lines            0          0
+; THR-NEXT: -----------------------------
+; THR-NEXT: Total            7          2
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/05-dwarf-incorrect-lexical-scope-variable.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/05-dwarf-incorrect-lexical-scope-variable.test
new file mode 100644
index 000000000000..372a8ac8de8b
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/05-dwarf-incorrect-lexical-scope-variable.test
@@ -0,0 +1,108 @@
+; Test case 5 - Incorrect lexical scope variable.
+
+; pr-43860.cpp
+;  1  #include "definitions.h"
+;  2  forceinline int InlineFunction(int Param) {
+;  3    int Var_1 = Param;
+;  4    {
+;  5      int Var_2 = Param + Var_1;
+;  6      Var_1 = Var_2;
+;  7    }
+;  8    return Var_1;
+;  9  }
+; 10
+; 11  int test(int Param_1, int Param_2) {
+; 12    int A = Param_1;
+; 13    A += InlineFunction(Param_2);
+; 14    return A;
+; 15  }
+
+; The above test is used to illustrate a variable issue found in the
+; Clang compiler.
+; PR43860: https://bugs.llvm.org/show_bug.cgi?id=43860
+; PR43205: https://github.com/llvm/llvm-project/issues/43205
+
+; In the following logical views, we can see that the DWARF debug
+; information generated by the Clang compiler shows the variables
+; 'Var_1' and 'Var_2' are at the same lexical scope (4) in the function
+; 'InlineFuction'.
+; The DWARF generated by GCC/Clang show those variables at the correct
+; lexical scope: '3' and '4' respectively.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format,producer \
+; RUN:                         --output-sort=name \
+; RUN:                         --print=symbols \
+; RUN:                         %p/Inputs/pr-43860-dwarf-clang.o \
+; RUN:                         %p/Inputs/pr-43860-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [000]           {File} 'pr-43860-dwarf-clang.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'pr-43860.cpp'
+; ONE-NEXT: [002]               {Producer} 'clang version 15.0.0 {{.*}}'
+; ONE-NEXT: [002]     2         {Function} extern not_inlined 'InlineFunction' -> 'int'
+; ONE-NEXT: [003]                 {Block}
+; ONE-NEXT: [004]     5             {Variable} 'Var_2' -> 'int'
+; ONE-NEXT: [003]     2           {Parameter} 'Param' -> 'int'
+; ONE-NEXT: [003]     3           {Variable} 'Var_1' -> 'int'
+; ONE-NEXT: [002]    11         {Function} extern not_inlined 'test' -> 'int'
+; ONE-NEXT: [003]    12           {Variable} 'A' -> 'int'
+; ONE-NEXT: [003]    14           {InlinedFunction} not_inlined 'InlineFunction' -> 'int'
+; ONE-NEXT: [004]                   {Block}
+; ONE-NEXT: [005]                     {Variable} 'Var_2' -> 'int'
+; ONE-NEXT: [004]                   {Parameter} 'Param' -> 'int'
+; ONE-NEXT: [004]                   {Variable} 'Var_1' -> 'int'
+; ONE-NEXT: [003]    11           {Parameter} 'Param_1' -> 'int'
+; ONE-NEXT: [003]    11           {Parameter} 'Param_2' -> 'int'
+; ONE-EMPTY:
+; ONE-NEXT: Logical View:
+; ONE-NEXT: [000]           {File} 'pr-43860-dwarf-gcc.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'pr-43860.cpp'
+; ONE-NEXT: [002]               {Producer} 'GNU C++14 10.3.0 {{.*}}'
+; ONE-NEXT: [002]     2         {Function} extern declared_inlined 'InlineFunction' -> 'int'
+; ONE-NEXT: [003]                 {Block}
+; ONE-NEXT: [004]     5             {Variable} 'Var_2' -> 'int'
+; ONE-NEXT: [003]     2           {Parameter} 'Param' -> 'int'
+; ONE-NEXT: [003]     3           {Variable} 'Var_1' -> 'int'
+; ONE-NEXT: [002]    11         {Function} extern not_inlined 'test' -> 'int'
+; ONE-NEXT: [003]    12           {Variable} 'A' -> 'int'
+; ONE-NEXT: [003]    13           {InlinedFunction} declared_inlined 'InlineFunction' -> 'int'
+; ONE-NEXT: [004]                   {Block}
+; ONE-NEXT: [005]                     {Variable} 'Var_2' -> 'int'
+; ONE-NEXT: [004]                   {Parameter} 'Param' -> 'int'
+; ONE-NEXT: [004]                   {Variable} 'Var_1' -> 'int'
+; ONE-NEXT: [003]    11           {Parameter} 'Param_1' -> 'int'
+; ONE-NEXT: [003]    11           {Parameter} 'Param_2' -> 'int'
+
+; Using the selection facilities, we can produce a simple tabular output
+; showing just the logical elements that have in their name the 'var'
+; pattern. The logical view is sorted by the variables name.
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format \
+; RUN:                         --output-sort=name \
+; RUN:                         --select-regex --select-nocase \
+; RUN:                         --select=Var \
+; RUN:                         --report=list \
+; RUN:                         --print=symbols \
+; RUN:                         %p/Inputs/pr-43860-*.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s
+
+; TWO:      Logical View:
+; TWO-NEXT: [000]           {File} 'pr-43860-dwarf-clang.o' -> elf64-x86-64
+; TWO-EMPTY:
+; TWO-NEXT: [001]           {CompileUnit} 'pr-43860.cpp'
+; TWO-NEXT: [004]           {Variable} 'Var_1' -> 'int'
+; TWO-NEXT: [003]     3     {Variable} 'Var_1' -> 'int'
+; TWO-NEXT: [005]           {Variable} 'Var_2' -> 'int'
+; TWO-NEXT: [004]     5     {Variable} 'Var_2' -> 'int'
+; TWO-EMPTY:
+; TWO-NEXT: Logical View:
+; TWO-NEXT: [000]           {File} 'pr-43860-dwarf-gcc.o' -> elf64-x86-64
+; TWO-EMPTY:
+; TWO-NEXT: [001]           {CompileUnit} 'pr-43860.cpp'
+; TWO-NEXT: [004]           {Variable} 'Var_1' -> 'int'
+; TWO-NEXT: [003]     3     {Variable} 'Var_1' -> 'int'
+; TWO-NEXT: [005]           {Variable} 'Var_2' -> 'int'
+; TWO-NEXT: [004]     5     {Variable} 'Var_2' -> 'int'
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/06-dwarf-full-logical-view.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/06-dwarf-full-logical-view.test
new file mode 100644
index 000000000000..089726fab02f
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/06-dwarf-full-logical-view.test
@@ -0,0 +1,105 @@
+; Test case 6 - Full logical view
+
+; test.cpp
+;  1  using INTPTR = const int *;
+;  2  int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {
+;  3    if (ParamBool) {
+;  4      typedef int INTEGER;
+;  5      const INTEGER CONSTANT = 7;
+;  6      return CONSTANT;
+;  7    }
+;  8    return ParamUnsigned;
+;  9  }
+
+; Print low level details.
+; The following command prints low level information that includes
+; offsets within the debug information section, debug location
+; operands, linkage names, etc.
+
+; RUN: llvm-debuginfo-analyzer --attribute=all \
+; RUN:                         --print=all \
+; RUN:                         %p/Inputs/test-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [0x0000000000][000]            {File} '{{.*}}test-dwarf-clang.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [0x000000000b][001]              {CompileUnit} 'test.cpp'
+; ONE-NEXT: [0x000000000b][002]                {Producer} 'clang version 15.0.0 {{.*}}'
+; ONE-NEXT:                                    {Directory} '/data/projects/tests/input/general'
+; ONE-NEXT:                                    {File} 'test.cpp'
+; ONE-NEXT:                                    {Public} 'foo' [0x0000000000:0x000000003a]
+; ONE-NEXT: [0x000000000b][002]                {Range} Lines 2:9 [0x0000000000:0x000000003a]
+; ONE-NEXT: [0x00000000bc][002]                {BaseType} 'bool'
+; ONE-NEXT: [0x0000000099][002]                {BaseType} 'int'
+; ONE-NEXT: [0x00000000b5][002]                {BaseType} 'unsigned int'
+; ONE-EMPTY:
+; ONE-NEXT: [0x00000000a0][002]   {Source} '/data/projects/tests/input/general/test.cpp'
+; ONE-NEXT: [0x00000000a0][002]      1         {TypeAlias} 'INTPTR' -> [0x00000000ab]'* const int'
+; ONE-NEXT: [0x000000002a][002]      2         {Function} extern not_inlined 'foo' -> [0x0000000099]'int'
+; ONE-NEXT: [0x000000002a][003]                  {Range} Lines 2:9 [0x0000000000:0x000000003a]
+; ONE-NEXT: [0x000000002a][003]                  {Linkage}  0x2 '_Z3fooPKijb'
+; ONE-NEXT: [0x0000000071][003]                  {Block}
+; ONE-NEXT: [0x0000000071][004]                    {Range} Lines 5:8 [0x000000001c:0x000000002f]
+; ONE-NEXT: [0x000000007e][004]      5             {Variable} 'CONSTANT' -> [0x00000000c3]'const INTEGER'
+; ONE-NEXT: [0x000000007e][005]                      {Coverage} 100.00%
+; ONE-NEXT: [0x000000007f][005]                      {Location}
+; ONE-NEXT: [0x000000007f][006]                        {Entry} fbreg -28
+; ONE-NEXT: [0x000000001c][004]      5             {Line} {NewStatement} '/data/projects/tests/input/general/test.cpp'
+; ONE-NEXT: [0x000000001c][004]                    {Code} 'movl	$0x7, -0x1c(%rbp)'
+; ONE-NEXT: [0x0000000023][004]      6             {Line} {NewStatement} '/data/projects/tests/input/general/test.cpp'
+; ONE-NEXT: [0x0000000023][004]                    {Code} 'movl	$0x7, -0x4(%rbp)'
+; ONE-NEXT: [0x000000002a][004]                    {Code} 'jmp	0x6'
+; ONE-NEXT: [0x000000002f][004]      8             {Line} {NewStatement} '/data/projects/tests/input/general/test.cpp'
+; ONE-NEXT: [0x000000002f][004]                    {Code} 'movl	-0x14(%rbp), %eax'
+; ONE-NEXT: [0x0000000063][003]      2           {Parameter} 'ParamBool' -> [0x00000000bc]'bool'
+; ONE-NEXT: [0x0000000063][004]                    {Coverage} 100.00%
+; ONE-NEXT: [0x0000000064][004]                    {Location}
+; ONE-NEXT: [0x0000000064][005]                      {Entry} fbreg -21
+; ONE-NEXT: [0x0000000047][003]      2           {Parameter} 'ParamPtr' -> [0x00000000a0]'INTPTR'
+; ONE-NEXT: [0x0000000047][004]                    {Coverage} 100.00%
+; ONE-NEXT: [0x0000000048][004]                    {Location}
+; ONE-NEXT: [0x0000000048][005]                      {Entry} fbreg -16
+; ONE-NEXT: [0x0000000055][003]      2           {Parameter} 'ParamUnsigned' -> [0x00000000b5]'unsigned int'
+; ONE-NEXT: [0x0000000055][004]                    {Coverage} 100.00%
+; ONE-NEXT: [0x0000000056][004]                    {Location}
+; ONE-NEXT: [0x0000000056][005]                      {Entry} fbreg -20
+; ONE-NEXT: [0x000000008d][003]      4           {TypeAlias} 'INTEGER' -> [0x0000000099]'int'
+; ONE-NEXT: [0x0000000000][003]      2           {Line} {NewStatement} '/data/projects/tests/input/general/test.cpp'
+; ONE-NEXT: [0x0000000000][003]                  {Code} 'pushq	%rbp'
+; ONE-NEXT: [0x0000000001][003]                  {Code} 'movq	%rsp, %rbp'
+; ONE-NEXT: [0x0000000004][003]                  {Code} 'movb	%dl, %al'
+; ONE-NEXT: [0x0000000006][003]                  {Code} 'movq	%rdi, -0x10(%rbp)'
+; ONE-NEXT: [0x000000000a][003]                  {Code} 'movl	%esi, -0x14(%rbp)'
+; ONE-NEXT: [0x000000000d][003]                  {Code} 'andb	$0x1, %al'
+; ONE-NEXT: [0x000000000f][003]                  {Code} 'movb	%al, -0x15(%rbp)'
+; ONE-NEXT: [0x0000000012][003]      3           {Line} {NewStatement} {PrologueEnd} '/data/projects/tests/input/general/test.cpp'
+; ONE-NEXT: [0x0000000012][003]                  {Code} 'testb	$0x1, -0x15(%rbp)'
+; ONE-NEXT: [0x0000000016][003]                  {Code} 'je	0x13'
+; ONE-NEXT: [0x0000000032][003]      8           {Line} '/data/projects/tests/input/general/test.cpp'
+; ONE-NEXT: [0x0000000032][003]                  {Code} 'movl	%eax, -0x4(%rbp)'
+; ONE-NEXT: [0x0000000035][003]      9           {Line} {NewStatement} '/data/projects/tests/input/general/test.cpp'
+; ONE-NEXT: [0x0000000035][003]                  {Code} 'movl	-0x4(%rbp), %eax'
+; ONE-NEXT: [0x0000000038][003]                  {Code} 'popq	%rbp'
+; ONE-NEXT: [0x0000000039][003]                  {Code} 'retq'
+; ONE-NEXT: [0x000000003a][003]      9           {Line} {NewStatement} {EndSequence} '/data/projects/tests/input/general/test.cpp'
+; ONE-EMPTY:
+; ONE-NEXT: -----------------------------
+; ONE-NEXT: Element      Total    Printed
+; ONE-NEXT: -----------------------------
+; ONE-NEXT: Scopes           3          3
+; ONE-NEXT: Symbols          4          4
+; ONE-NEXT: Types            5          5
+; ONE-NEXT: Lines           25         25
+; ONE-NEXT: -----------------------------
+; ONE-NEXT: Total           37         37
+; ONE-EMPTY:
+; ONE-NEXT: Scope Sizes:
+; ONE-NEXT:        189 (100.00%) : [0x000000000b][001]              {CompileUnit} 'test.cpp'
+; ONE-NEXT:        110 ( 58.20%) : [0x000000002a][002]      2         {Function} extern not_inlined 'foo' -> [0x0000000099]'int'
+; ONE-NEXT:         27 ( 14.29%) : [0x0000000071][003]                  {Block}
+; ONE-EMPTY:
+; ONE-NEXT: Totals by lexical level:
+; ONE-NEXT: [001]:        189 (100.00%)
+; ONE-NEXT: [002]:        110 ( 58.20%)
+; ONE-NEXT: [003]:         27 ( 14.29%)
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/hello-world-dwarf-clang.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/hello-world-dwarf-clang.o
new file mode 100644
index 000000000000..61859c670579
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/hello-world-dwarf-clang.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/hello-world-dwarf-gcc.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/hello-world-dwarf-gcc.o
new file mode 100644
index 000000000000..229df05cc22a
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/hello-world-dwarf-gcc.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-43860-dwarf-clang.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-43860-dwarf-clang.o
new file mode 100644
index 000000000000..53c2c37211ad
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-43860-dwarf-clang.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-43860-dwarf-gcc.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-43860-dwarf-gcc.o
new file mode 100644
index 000000000000..bbadbb4665ae
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-43860-dwarf-gcc.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-44884-dwarf-clang.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-44884-dwarf-clang.o
new file mode 100644
index 000000000000..d833e18d96da
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-44884-dwarf-clang.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-44884-dwarf-gcc.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-44884-dwarf-gcc.o
new file mode 100644
index 000000000000..3f8a70b6420c
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-44884-dwarf-gcc.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-46466-dwarf-clang.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-46466-dwarf-clang.o
new file mode 100644
index 000000000000..8e30ccefe513
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-46466-dwarf-clang.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-46466-dwarf-gcc.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-46466-dwarf-gcc.o
new file mode 100644
index 000000000000..fb835776afe7
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-46466-dwarf-gcc.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-57040-test-dwarf-clang.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-57040-test-dwarf-clang.o
new file mode 100644
index 000000000000..1db88cc964f6
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-57040-test-dwarf-clang.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-57040-test-dwarf-gcc.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-57040-test-dwarf-gcc.o
new file mode 100644
index 000000000000..178b673c3711
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-57040-test-dwarf-gcc.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-incorrect-instructions-dwarf-clang.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-incorrect-instructions-dwarf-clang.o
new file mode 100644
index 000000000000..6c0b90636d45
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/pr-incorrect-instructions-dwarf-clang.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/test-dwarf-clang.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/test-dwarf-clang.o
new file mode 100644
index 000000000000..2d0fbe3fbcba
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/test-dwarf-clang.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/test-dwarf-gcc.o b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/test-dwarf-gcc.o
new file mode 100644
index 000000000000..7926f15a8e40
Binary files /dev/null and b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/Inputs/test-dwarf-gcc.o differ
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-57040-ignored-DW_FORM_implicit_const.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-57040-ignored-DW_FORM_implicit_const.test
new file mode 100644
index 000000000000..78e9670241a3
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-57040-ignored-DW_FORM_implicit_const.test
@@ -0,0 +1,65 @@
+; Ignored attributes with DW_FORM_implicit_const.
+; https://github.com/llvm/llvm-project/issues/57040
+
+; Output generated by g++ (Debian 11.3.0-3) 11.3.0
+
+; .debug_abbrev contents:
+; [1] DW_TAG_formal_parameter     DW_CHILDREN_no
+;         DW_AT_decl_file DW_FORM_implicit_const  1
+;         DW_AT_decl_line DW_FORM_implicit_const  2
+
+; [2] DW_TAG_typedef      DW_CHILDREN_no
+;         DW_AT_decl_file DW_FORM_implicit_const  1
+;         DW_AT_decl_line DW_FORM_data1
+
+; Attributes with DW_FORM_implicit_const being ignored by the ELFReader,
+; causing {Parameter} and {TypeAlias} to omit line numbers.
+
+; test.cpp
+;  1  using INTPTR = const int *;
+;  2  int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {
+;  3    if (ParamBool) {
+;  4      typedef int INTEGER;
+;  5      const INTEGER CONSTANT = 7;
+;  6      return CONSTANT;
+;  7    }
+;  8    return ParamUnsigned;
+;  9  }
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format,producer \
+; RUN:                         --print=scopes,symbols,types \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [000]           {File} 'pr-57040-test-dwarf-clang.o' -> elf64-x86-64
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'test.cpp'
+; ONE-NEXT: [002]               {Producer} 'clang version 14.0.6'
+; ONE-NEXT: [002]     1         {TypeAlias} 'INTPTR' -> '* const int'
+; ONE-NEXT: [002]     2         {Function} extern not_inlined 'foo' -> 'int'
+; ONE-NEXT: [003]                 {Block}
+; ONE-NEXT: [004]     5             {Variable} 'CONSTANT' -> 'const INTEGER'
+; ONE-NEXT: [003]     2           {Parameter} 'ParamBool' -> 'bool'
+; ONE-NEXT: [003]     2           {Parameter} 'ParamPtr' -> 'INTPTR'
+; ONE-NEXT: [003]     2           {Parameter} 'ParamUnsigned' -> 'unsigned int'
+; ONE-NEXT: [003]     4           {TypeAlias} 'INTEGER' -> 'int'
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,format,producer \
+; RUN:                         --print=scopes,symbols,types \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s
+
+; TWO:      Logical View:
+; TWO-NEXT: [000]           {File} 'pr-57040-test-dwarf-gcc.o' -> elf64-x86-64
+; TWO-EMPTY:
+; TWO-NEXT: [001]             {CompileUnit} 'test.cpp'
+; TWO-NEXT: [002]               {Producer} 'GNU C++17 11.3.0 {{.*}}'
+; TWO-NEXT: [002]     1         {TypeAlias} 'INTPTR' -> '* const int'
+; TWO-NEXT: [002]     2         {Function} extern not_inlined 'foo' -> 'int'
+; TWO-NEXT: [003]                 {Block}
+; TWO-NEXT: [004]     4             {TypeAlias} 'INTEGER' -> 'int'
+; TWO-NEXT: [004]     5             {Variable} 'CONSTANT' -> 'const INTEGER'
+; TWO-NEXT: [003]     2           {Parameter} 'ParamBool' -> 'bool'
+; TWO-NEXT: [003]     2           {Parameter} 'ParamPtr' -> 'INTPTR'
+; TWO-NEXT: [003]     2           {Parameter} 'ParamUnsigned' -> 'unsigned int'
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-57040-incorrect-function-compare.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-57040-incorrect-function-compare.test
new file mode 100644
index 000000000000..4d7aba1d0055
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-57040-incorrect-function-compare.test
@@ -0,0 +1,142 @@
+; Incorrect function matching during comparison.
+; https://github.com/llvm/llvm-project/issues/57040
+
+; Output generated by g++ (Debian 11.3.0-3) 11.3.0
+
+; .debug_info contents:
+; format = DWARF32, version = 0x0005, unit_type = DW_UT_compile
+;
+; DW_TAG_compile_unit
+;   DW_TAG_subprogram ("foo")
+;     DW_AT_decl_file	(1)
+;
+;     DW_TAG_formal_parameter ("ParamPtr")
+;       DW_AT_decl_file	(1)
+;
+; .debug_line contents:
+; Line table prologue:
+;           format: DWARF32, version: 5
+; include_directories[0] = "/usr/local/google/home/aheejin/test/llvm-dva"
+; file_names[0]: name: "test.cpp" dir_index: 0
+; file_names[1]: name: "test.cpp" dir_index: 0
+
+; The values for DW_AT_decl_file are 1-indexed.
+
+; test.cpp
+;  1  using INTPTR = const int *;
+;  2  int foo(INTPTR ParamPtr, unsigned ParamUnsigned, bool ParamBool) {
+;  3    if (ParamBool) {
+;  4      typedef int INTEGER;
+;  5      const INTEGER CONSTANT = 7;
+;  6      return CONSTANT;
+;  7    }
+;  8    return ParamUnsigned;
+;  9  }
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,producer \
+; RUN:                         --compare=types \
+; RUN:                         --report=view \
+; RUN:                         --print=symbols,types \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-clang.o \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Reference: 'pr-57040-test-dwarf-clang.o'
+; ONE-NEXT: Target:    'pr-57040-test-dwarf-gcc.o'
+; ONE-EMPTY:
+; ONE-NEXT: Logical View:
+; ONE-NEXT:  [000]           {File} 'pr-57040-test-dwarf-clang.o'
+; ONE-EMPTY:
+; ONE-NEXT:  [001]             {CompileUnit} 'test.cpp'
+; ONE-NEXT:  [002]               {Producer} 'clang version 14.0.6'
+; ONE-NEXT:  [002]     1         {TypeAlias} 'INTPTR' -> '* const int'
+; ONE-NEXT:  [002]     2         {Function} extern not_inlined 'foo' -> 'int'
+; ONE-NEXT:  [003]                 {Block}
+; ONE-NEXT:  [004]     5             {Variable} 'CONSTANT' -> 'const INTEGER'
+; ONE-NEXT: +[004]     4             {TypeAlias} 'INTEGER' -> 'int'
+; ONE-NEXT:  [003]     2           {Parameter} 'ParamBool' -> 'bool'
+; ONE-NEXT:  [003]     2           {Parameter} 'ParamPtr' -> 'INTPTR'
+; ONE-NEXT:  [003]     2           {Parameter} 'ParamUnsigned' -> 'unsigned int'
+; ONE-NEXT: -[003]     4           {TypeAlias} 'INTEGER' -> 'int'
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --compare=types \
+; RUN:                         --report=list \
+; RUN:                         --print=symbols,types,summary \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-clang.o \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-gcc.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s
+
+; TWO:      Reference: 'pr-57040-test-dwarf-clang.o'
+; TWO-NEXT: Target:    'pr-57040-test-dwarf-gcc.o'
+; TWO-EMPTY:
+; TWO-NEXT: (1) Missing Types:
+; TWO-NEXT: -[003]     4     {TypeAlias} 'INTEGER' -> 'int'
+; TWO-EMPTY:
+; TWO-NEXT: (1) Added Types:
+; TWO-NEXT: +[004]     4     {TypeAlias} 'INTEGER' -> 'int'
+; TWO-EMPTY:
+; TWO-NEXT: ----------------------------------------
+; TWO-NEXT: Element   Expected    Missing      Added
+; TWO-NEXT: ----------------------------------------
+; TWO-NEXT: Scopes           4          0          0
+; TWO-NEXT: Symbols          0          0          0
+; TWO-NEXT: Types            2          1          1
+; TWO-NEXT: Lines            0          0          0
+; TWO-NEXT: ----------------------------------------
+; TWO-NEXT: Total            6          1          1
+
+; Changing the 'Reference' and 'Target' order:
+
+; RUN: llvm-debuginfo-analyzer --attribute=level,producer \
+; RUN:                         --compare=types \
+; RUN:                         --report=view \
+; RUN:                         --print=symbols,types \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-gcc.o \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=THR %s
+
+; THR:      Reference: 'pr-57040-test-dwarf-gcc.o'
+; THR-NEXT: Target:    'pr-57040-test-dwarf-clang.o'
+; THR-EMPTY:
+; THR-NEXT: Logical View:
+; THR-NEXT:  [000]           {File} 'pr-57040-test-dwarf-gcc.o'
+; THR-EMPTY:
+; THR-NEXT:  [001]             {CompileUnit} 'test.cpp'
+; THR-NEXT:  [002]               {Producer} 'GNU C++17 11.3.0 {{.*}}'
+; THR-NEXT:  [002]     1         {TypeAlias} 'INTPTR' -> '* const int'
+; THR-NEXT:  [002]     2         {Function} extern not_inlined 'foo' -> 'int'
+; THR-NEXT:  [003]                 {Block}
+; THR-NEXT: -[004]     4             {TypeAlias} 'INTEGER' -> 'int'
+; THR-NEXT:  [004]     5             {Variable} 'CONSTANT' -> 'const INTEGER'
+; THR-NEXT:  [003]     2           {Parameter} 'ParamBool' -> 'bool'
+; THR-NEXT:  [003]     2           {Parameter} 'ParamPtr' -> 'INTPTR'
+; THR-NEXT:  [003]     2           {Parameter} 'ParamUnsigned' -> 'unsigned int'
+; THR-NEXT: +[003]     4           {TypeAlias} 'INTEGER' -> 'int'
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --compare=types \
+; RUN:                         --report=list \
+; RUN:                         --print=symbols,types,summary \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-gcc.o \
+; RUN:                         %p/Inputs/pr-57040-test-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=FOU %s
+
+; FOU:      Reference: 'pr-57040-test-dwarf-gcc.o'
+; FOU-NEXT: Target:    'pr-57040-test-dwarf-clang.o'
+; FOU-EMPTY:
+; FOU-NEXT: (1) Missing Types:
+; FOU-NEXT: -[004]     4     {TypeAlias} 'INTEGER' -> 'int'
+; FOU-EMPTY:
+; FOU-NEXT: (1) Added Types:
+; FOU-NEXT: +[003]     4     {TypeAlias} 'INTEGER' -> 'int'
+; FOU-EMPTY:
+; FOU-NEXT: ----------------------------------------
+; FOU-NEXT: Element   Expected    Missing      Added
+; FOU-NEXT: ----------------------------------------
+; FOU-NEXT: Scopes           4          0          0
+; FOU-NEXT: Symbols          0          0          0
+; FOU-NEXT: Types            2          1          1
+; FOU-NEXT: Lines            0          0          0
+; FOU-NEXT: ----------------------------------------
+; FOU-NEXT: Total            6          1          1
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-incorrect-logical-instructions.test b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-incorrect-logical-instructions.test
new file mode 100644
index 000000000000..083068be784b
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/DWARF/pr-incorrect-logical-instructions.test
@@ -0,0 +1,205 @@
+; * Added incorrect logical instructions for: --print=lines,instructions
+;   'bar' and 'foo' showing extra instruction from compiler generated functions:
+;   '_cxx_global_var_init' and '_GLOBAL_sub_l_suite_lexical_01.cpp'
+;
+; * Missing logical instructions for: --print=instructions
+;   Only 'foo' showing logical instructions.
+
+; pr-incorrect-instructions-dwarf-clang.cpp
+;  1 int ABCDE = 56; int XYZ = ABCDE * 65;
+;  2 int bar(int Param) {
+;  3   return Param + 999999 * Param - 66;
+;  4 }
+;  5
+;  6 int foo(int Param) {
+;  7   return Param - bar(Param) / Param * 66 + ABCDE;
+;  8 }
+;  9
+; 10 int test(int P1) {
+; 11  int Local_1 = P1 - ABCDE;
+; 12  {
+; 13    int Local_A = 0;
+; 14    Local_A = P1 + foo(Local_1);
+; 15    ++Local_1;
+; 16  }
+; 17  return Local_1;
+; 18 }
+; 19
+; 20 int main() {
+; 21  return 0;
+; 22 }
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --print=lines,instructions \
+; RUN:                         %p/Inputs/pr-incorrect-instructions-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=ONE %s
+
+; ONE:      Logical View:
+; ONE-NEXT: [000]           {File} 'pr-incorrect-instructions-dwarf-clang.o'
+; ONE-EMPTY:
+; ONE-NEXT: [001]             {CompileUnit} 'pr-incorrect-instructions-dwarf-clang.cpp'
+; ONE-NEXT: [002]     2         {Function} extern not_inlined 'bar' -> 'int'
+; ONE-NEXT: [003]     2           {Line}
+; ONE-NEXT: [003]                 {Code} 'pushq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; ONE-NEXT: [003]                 {Code} 'movl	%edi, -0x4(%rbp)'
+; ONE-NEXT: [003]     3           {Line}
+; ONE-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %eax'
+; ONE-NEXT: [003]     3           {Line}
+; ONE-NEXT: [003]                 {Code} 'imull	$0xf423f, -0x4(%rbp), %ecx'
+; ONE-NEXT: [003]     3           {Line}
+; ONE-NEXT: [003]                 {Code} 'addl	%ecx, %eax'
+; ONE-NEXT: [003]     3           {Line}
+; ONE-NEXT: [003]                 {Code} 'subl	$0x42, %eax'
+; ONE-NEXT: [003]     3           {Line}
+; ONE-NEXT: [003]                 {Code} 'popq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'retq'
+; ONE-NEXT: [002]     6         {Function} extern not_inlined 'foo' -> 'int'
+; ONE-NEXT: [003]     6           {Line}
+; ONE-NEXT: [003]                 {Code} 'pushq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; ONE-NEXT: [003]                 {Code} 'subq	$0x10, %rsp'
+; ONE-NEXT: [003]                 {Code} 'movl	%edi, -0x4(%rbp)'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %eax'
+; ONE-NEXT: [003]                 {Code} 'movl	%eax, -0x8(%rbp)'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %edi'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'callq	0x0'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'cltd'
+; ONE-NEXT: [003]                 {Code} 'idivl	-0x4(%rbp)'
+; ONE-NEXT: [003]                 {Code} 'movl	%eax, %ecx'
+; ONE-NEXT: [003]                 {Code} 'movl	-0x8(%rbp), %eax'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'imull	$0x42, %ecx, %ecx'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'subl	%ecx, %eax'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'addl	(%rip), %eax'
+; ONE-NEXT: [003]     7           {Line}
+; ONE-NEXT: [003]                 {Code} 'addq	$0x10, %rsp'
+; ONE-NEXT: [003]                 {Code} 'popq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'retq'
+; ONE-NEXT: [003]                 {Code} 'data16'
+; ONE-NEXT: [002]    10         {Function} extern not_inlined 'test' -> 'int'
+; ONE-NEXT: [003]                 {Block}
+; ONE-NEXT: [004]    13             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	$0x0, -0xc(%rbp)'
+; ONE-NEXT: [004]    14             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	-0x4(%rbp), %eax'
+; ONE-NEXT: [004]                   {Code} 'movl	%eax, -0x10(%rbp)'
+; ONE-NEXT: [004]    14             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	-0x8(%rbp), %edi'
+; ONE-NEXT: [004]    14             {Line}
+; ONE-NEXT: [004]                   {Code} 'callq	0x0'
+; ONE-NEXT: [004]                   {Code} 'movl	%eax, %ecx'
+; ONE-NEXT: [004]                   {Code} 'movl	-0x10(%rbp), %eax'
+; ONE-NEXT: [004]    14             {Line}
+; ONE-NEXT: [004]                   {Code} 'addl	%ecx, %eax'
+; ONE-NEXT: [004]    14             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	%eax, -0xc(%rbp)'
+; ONE-NEXT: [004]    15             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	-0x8(%rbp), %eax'
+; ONE-NEXT: [004]                   {Code} 'addl	$0x1, %eax'
+; ONE-NEXT: [004]                   {Code} 'movl	%eax, -0x8(%rbp)'
+; ONE-NEXT: [004]    17             {Line}
+; ONE-NEXT: [004]                   {Code} 'movl	-0x8(%rbp), %eax'
+; ONE-NEXT: [003]    10           {Line}
+; ONE-NEXT: [003]                 {Code} 'pushq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; ONE-NEXT: [003]                 {Code} 'subq	$0x10, %rsp'
+; ONE-NEXT: [003]                 {Code} 'movl	%edi, -0x4(%rbp)'
+; ONE-NEXT: [003]    11           {Line}
+; ONE-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %eax'
+; ONE-NEXT: [003]    11           {Line}
+; ONE-NEXT: [003]                 {Code} 'subl	(%rip), %eax'
+; ONE-NEXT: [003]    11           {Line}
+; ONE-NEXT: [003]                 {Code} 'movl	%eax, -0x8(%rbp)'
+; ONE-NEXT: [003]    17           {Line}
+; ONE-NEXT: [003]                 {Code} 'addq	$0x10, %rsp'
+; ONE-NEXT: [003]                 {Code} 'popq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'retq'
+; ONE-NEXT: [002]    20         {Function} extern not_inlined 'main' -> 'int'
+; ONE-NEXT: [003]    20           {Line}
+; ONE-NEXT: [003]                 {Code} 'pushq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; ONE-NEXT: [003]                 {Code} 'movl	$0x0, -0x4(%rbp)'
+; ONE-NEXT: [003]    21           {Line}
+; ONE-NEXT: [003]                 {Code} 'xorl	%eax, %eax'
+; ONE-NEXT: [003]                 {Code} 'popq	%rbp'
+; ONE-NEXT: [003]                 {Code} 'retq'
+; ONE-NEXT: [003]    21           {Line}
+
+; RUN: llvm-debuginfo-analyzer --attribute=level \
+; RUN:                         --print=instructions \
+; RUN:                         %p/Inputs/pr-incorrect-instructions-dwarf-clang.o 2>&1 | \
+; RUN: FileCheck --strict-whitespace -check-prefix=TWO %s
+
+; TWO:      Logical View:
+; TWO-NEXT: [000]           {File} 'pr-incorrect-instructions-dwarf-clang.o'
+; TWO-EMPTY:
+; TWO-NEXT: [001]             {CompileUnit} 'pr-incorrect-instructions-dwarf-clang.cpp'
+; TWO-NEXT: [002]     2         {Function} extern not_inlined 'bar' -> 'int'
+; TWO-NEXT: [003]                 {Code} 'pushq	%rbp'
+; TWO-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; TWO-NEXT: [003]                 {Code} 'movl	%edi, -0x4(%rbp)'
+; TWO-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %eax'
+; TWO-NEXT: [003]                 {Code} 'imull	$0xf423f, -0x4(%rbp), %ecx'
+; TWO-NEXT: [003]                 {Code} 'addl	%ecx, %eax'
+; TWO-NEXT: [003]                 {Code} 'subl	$0x42, %eax'
+; TWO-NEXT: [003]                 {Code} 'popq	%rbp'
+; TWO-NEXT: [003]                 {Code} 'retq'
+; TWO-NEXT: [002]     6         {Function} extern not_inlined 'foo' -> 'int'
+; TWO-NEXT: [003]                 {Code} 'pushq	%rbp'
+; TWO-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; TWO-NEXT: [003]                 {Code} 'subq	$0x10, %rsp'
+; TWO-NEXT: [003]                 {Code} 'movl	%edi, -0x4(%rbp)'
+; TWO-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %eax'
+; TWO-NEXT: [003]                 {Code} 'movl	%eax, -0x8(%rbp)'
+; TWO-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %edi'
+; TWO-NEXT: [003]                 {Code} 'callq	0x0'
+; TWO-NEXT: [003]                 {Code} 'cltd'
+; TWO-NEXT: [003]                 {Code} 'idivl	-0x4(%rbp)'
+; TWO-NEXT: [003]                 {Code} 'movl	%eax, %ecx'
+; TWO-NEXT: [003]                 {Code} 'movl	-0x8(%rbp), %eax'
+; TWO-NEXT: [003]                 {Code} 'imull	$0x42, %ecx, %ecx'
+; TWO-NEXT: [003]                 {Code} 'subl	%ecx, %eax'
+; TWO-NEXT: [003]                 {Code} 'addl	(%rip), %eax'
+; TWO-NEXT: [003]                 {Code} 'addq	$0x10, %rsp'
+; TWO-NEXT: [003]                 {Code} 'popq	%rbp'
+; TWO-NEXT: [003]                 {Code} 'retq'
+; TWO-NEXT: [003]                 {Code} 'data16'
+; TWO-NEXT: [002]    10         {Function} extern not_inlined 'test' -> 'int'
+; TWO-NEXT: [003]                 {Block}
+; TWO-NEXT: [004]                   {Code} 'movl	$0x0, -0xc(%rbp)'
+; TWO-NEXT: [004]                   {Code} 'movl	-0x4(%rbp), %eax'
+; TWO-NEXT: [004]                   {Code} 'movl	%eax, -0x10(%rbp)'
+; TWO-NEXT: [004]                   {Code} 'movl	-0x8(%rbp), %edi'
+; TWO-NEXT: [004]                   {Code} 'callq	0x0'
+; TWO-NEXT: [004]                   {Code} 'movl	%eax, %ecx'
+; TWO-NEXT: [004]                   {Code} 'movl	-0x10(%rbp), %eax'
+; TWO-NEXT: [004]                   {Code} 'addl	%ecx, %eax'
+; TWO-NEXT: [004]                   {Code} 'movl	%eax, -0xc(%rbp)'
+; TWO-NEXT: [004]                   {Code} 'movl	-0x8(%rbp), %eax'
+; TWO-NEXT: [004]                   {Code} 'addl	$0x1, %eax'
+; TWO-NEXT: [004]                   {Code} 'movl	%eax, -0x8(%rbp)'
+; TWO-NEXT: [004]                   {Code} 'movl	-0x8(%rbp), %eax'
+; TWO-NEXT: [003]                 {Code} 'pushq	%rbp'
+; TWO-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; TWO-NEXT: [003]                 {Code} 'subq	$0x10, %rsp'
+; TWO-NEXT: [003]                 {Code} 'movl	%edi, -0x4(%rbp)'
+; TWO-NEXT: [003]                 {Code} 'movl	-0x4(%rbp), %eax'
+; TWO-NEXT: [003]                 {Code} 'subl	(%rip), %eax'
+; TWO-NEXT: [003]                 {Code} 'movl	%eax, -0x8(%rbp)'
+; TWO-NEXT: [003]                 {Code} 'addq	$0x10, %rsp'
+; TWO-NEXT: [003]                 {Code} 'popq	%rbp'
+; TWO-NEXT: [003]                 {Code} 'retq'
+; TWO-NEXT: [002]    20         {Function} extern not_inlined 'main' -> 'int'
+; TWO-NEXT: [003]                 {Code} 'pushq	%rbp'
+; TWO-NEXT: [003]                 {Code} 'movq	%rsp, %rbp'
+; TWO-NEXT: [003]                 {Code} 'movl	$0x0, -0x4(%rbp)'
+; TWO-NEXT: [003]                 {Code} 'xorl	%eax, %eax'
+; TWO-NEXT: [003]                 {Code} 'popq	%rbp'
+; TWO-NEXT: [003]                 {Code} 'retq'
diff --git a/llvm/test/tools/llvm-debuginfo-analyzer/cmdline.test b/llvm/test/tools/llvm-debuginfo-analyzer/cmdline.test
new file mode 100644
index 000000000000..c9c2dbe9fa3e
--- /dev/null
+++ b/llvm/test/tools/llvm-debuginfo-analyzer/cmdline.test
@@ -0,0 +1,221 @@
+RUN: llvm-debuginfo-analyzer --version 2>&1 | FileCheck --check-prefix=VERSION %s
+VERSION: {{ version }}
+
+RUN: llvm-debuginfo-analyzer -h > %t 2>&1
+RUN: FileCheck -input-file=%t %s --check-prefix=HELP --implicit-check-not=out-file
+RUN: llvm-debuginfo-analyzer --help > %t 2>&1
+RUN: FileCheck -input-file=%t %s --check-prefix=HELP --implicit-check-not=out-file
+HELP: OVERVIEW: Printing a logical representation of low-level debug information.
+HELP: USAGE: llvm-debuginfo-analyzer{{[^ ]*}} [options] <input object files or .dSYM bundles>
+HELP: OPTIONS:
+HELP: Generic Options:
+HELP:   --help          - Display available options (--help-hidden for more)
+HELP:   --help-list     - Display list of available options (--help-list-hidden for more)
+HELP:   --version       - Display the version of this program
+HELP: Print Options:
+HELP: These control which elements are printed.
+HELP:   --print=<value> - Element to print.
+HELP:     =all          -   All elements.
+HELP:     =elements     -   Instructions, lines, scopes, symbols and types.
+HELP:     =instructions -   Assembler instructions.
+HELP:     =lines        -   Lines referenced in the debug information.
+HELP:     =scopes       -   A lexical block (Function, Class, etc.).
+HELP:     =sizes        -   Scope contributions to the debug information.
+HELP:     =summary      -   Summary of elements missing/added/matched/printed.
+HELP:     =symbols      -   Symbols (Variable, Members, etc.).
+HELP:     =types        -   Types (Pointer, Reference, etc.).
+HELP:     =warnings     -   Warnings detected.
+HELP: Pass @FILE as argument to read options from FILE.
+
+RUN: llvm-debuginfo-analyzer --help-hidden > %t 2>&1
+RUN: FileCheck -input-file=%t %s --check-prefix=HELP-ALL --implicit-check-not=out-file
+HELP-ALL: OVERVIEW: Printing a logical representation of low-level debug information.
+HELP-ALL: USAGE: llvm-debuginfo-analyzer{{[^ ]*}} [options] <input object files or .dSYM bundles>
+HELP-ALL: OPTIONS:
+HELP-ALL: Attribute Options:
+HELP-ALL: These control extra attributes that are added when the element is printed.
+HELP-ALL:   --attribute=<value>        - Element attributes.
+HELP-ALL:     =all                     -   Include all attributes.
+HELP-ALL:     =argument                -   Template parameters replaced by its arguments.
+HELP-ALL:     =base                    -   Base types (int, bool, etc.).
+HELP-ALL:     =coverage                -   Symbol location coverage.
+HELP-ALL:     =directories             -   Directories referenced in the debug information.
+HELP-ALL:     =discarded               -   Discarded elements by the linker.
+HELP-ALL:     =discriminator           -   Discriminators for inlined function instances.
+HELP-ALL:     =encoded                 -   Template arguments encoded in the template name.
+HELP-ALL:     =extended                -   Advanced attributes alias.
+HELP-ALL:     =filename                -   Filename where the element is defined.
+HELP-ALL:     =files                   -   Files referenced in the debug information.
+HELP-ALL:     =format                  -   Object file format name.
+HELP-ALL:     =gaps                    -   Missing debug location (gaps).
+HELP-ALL:     =generated               -   Compiler generated elements.
+HELP-ALL:     =global                  -   Element referenced across Compile Units.
+HELP-ALL:     =inserted                -   Generated inlined abstract references.
+HELP-ALL:     =level                   -   Lexical scope level (File=0, Compile Unit=1).
+HELP-ALL:     =linkage                 -   Linkage name.
+HELP-ALL:     =local                   -   Element referenced only in the Compile Unit.
+HELP-ALL:     =location                -   Element debug location.
+HELP-ALL:     =offset                  -   Debug information offset.
+HELP-ALL:     =pathname                -   Pathname where the element is defined.
+HELP-ALL:     =producer                -   Toolchain identification name.
+HELP-ALL:     =publics                 -   Function names that are public.
+HELP-ALL:     =qualified               -   The element type include parents in its name.
+HELP-ALL:     =qualifier               -   Line qualifiers (Newstatement, BasicBlock, etc.).
+HELP-ALL:     =range                   -   Debug location ranges.
+HELP-ALL:     =reference               -   Element declaration and definition references.
+HELP-ALL:     =register                -   Processor register names.
+HELP-ALL:     =standard                -   Basic attributes alias.
+HELP-ALL:     =subrange                -   Subrange encoding information for arrays.
+HELP-ALL:     =system                  -   Display PDB's MS system elements.
+HELP-ALL:     =typename                -   Include Parameters in templates.
+HELP-ALL:     =underlying              -   Underlying type for type definitions.
+HELP-ALL:     =zero                    -   Zero line numbers.
+HELP-ALL: Color Options:
+HELP-ALL:   This option category has no options.
+HELP-ALL: Compare Options:
+HELP-ALL: These control the view comparison.
+HELP-ALL:   --compare=<value>          - Elements to compare.
+HELP-ALL:     =all                     -   Compare all elements.
+HELP-ALL:     =lines                   -   Lines.
+HELP-ALL:     =scopes                  -   Scopes.
+HELP-ALL:     =symbols                 -   Symbols.
+HELP-ALL:     =types                   -   Types.
+HELP-ALL:   --compare-context          - Add the view as compare context.
+HELP-ALL: General options:
+HELP-ALL:   This option category has no options.
+HELP-ALL: Generic Options:
+HELP-ALL:   -h                         - Alias for --help
+HELP-ALL:   --help                     - Display available options (--help-hidden for more)
+HELP-ALL:   --help-hidden              - Display all available options
+HELP-ALL:   --help-list                - Display list of available options (--help-list-hidden for more)
+HELP-ALL:   --help-list-hidden         - Display list of all available options
+HELP-ALL:   --print-all-options        - Print all option values after command line parsing
+HELP-ALL:   --print-options            - Print non-default options after command line parsing
+HELP-ALL:   --version                  - Display the version of this program
+HELP-ALL: Internal Options:
+HELP-ALL: Internal traces and extra debugging code.
+HELP-ALL:   --internal=<value>         - Traces to enable.
+HELP-ALL:     =all                     -   Enable all traces.
+HELP-ALL:     =cmdline                 -   Print command line.
+HELP-ALL:     =id                      -   Print unique element ID
+HELP-ALL:     =integrity               -   Check elements integrity.
+HELP-ALL:     =none                    -   Ignore element line number.
+HELP-ALL:     =tag                     -   Debug information tags.
+HELP-ALL: Output Options:
+HELP-ALL: These control the output generated.
+HELP-ALL:   --output=<value>           - Outputs for view.
+HELP-ALL:     =all                     -   All outputs.
+HELP-ALL:     =split                   -   Split the output by Compile Units.
+HELP-ALL:     =text                    -   Use a free form text output.
+HELP-ALL:     =json                    -   Use JSON as the output format.
+HELP-ALL:   --output-file=<filename>   - Redirect output to the specified file.
+HELP-ALL:   --output-folder=<pathname> - Folder name for view splitting.
+HELP-ALL:   --output-level=<N>         - Only print to a depth of N elements.
+HELP-ALL:   --output-sort=<value>      - Primary key when ordering logical view (default: line).
+HELP-ALL:     =kind                    -   Sort by element kind.
+HELP-ALL:     =line                    -   Sort by element line number.
+HELP-ALL:     =name                    -   Sort by element name.
+HELP-ALL:     =offset                  -   Sort by element offset.
+HELP-ALL: Print Options:
+HELP-ALL: These control which elements are printed.
+HELP-ALL:   --print=<value>            - Element to print.
+HELP-ALL:     =all                     -   All elements.
+HELP-ALL:     =elements                -   Instructions, lines, scopes, symbols and types.
+HELP-ALL:     =instructions            -   Assembler instructions.
+HELP-ALL:     =lines                   -   Lines referenced in the debug information.
+HELP-ALL:     =scopes                  -   A lexical block (Function, Class, etc.).
+HELP-ALL:     =sizes                   -   Scope contributions to the debug information.
+HELP-ALL:     =summary                 -   Summary of elements missing/added/matched/printed.
+HELP-ALL:     =symbols                 -   Symbols (Variable, Members, etc.).
+HELP-ALL:     =types                   -   Types (Pointer, Reference, etc.).
+HELP-ALL:     =warnings                -   Warnings detected.
+HELP-ALL: Report Options:
+HELP-ALL: These control how the elements are printed.
+HELP-ALL:   --report=<value>           - Reports layout used for print, compare and select.
+HELP-ALL:     =all                     -   Generate all reports.
+HELP-ALL:     =children                -   Selected elements are displayed in a tree view (Include children)
+HELP-ALL:     =list                    -   Selected elements are displayed in a tabular format.
+HELP-ALL:     =parents                 -   Selected elements are displayed in a tree view. (Include parents)
+HELP-ALL:     =view                    -   Selected elements are displayed in a tree view (Include parents and children.
+HELP-ALL: Select Options:
+HELP-ALL: These control which elements are selected.
+HELP-ALL:   --select=<pattern>         - Search elements matching the given pattern.
+HELP-ALL:   --select-elements=<value>  - Conditions to use when printing elements.
+HELP-ALL:     =Discarded               -   Discarded elements by the linker.
+HELP-ALL:     =Global                  -   Element referenced across Compile Units.
+HELP-ALL:     =Optimized               -   Generated inlined abstract references.
+HELP-ALL:   --select-lines=<value>     - Line kind to use when printing lines.
+HELP-ALL:     =AlwaysStepInto          -   Always Step Into.
+HELP-ALL:     =BasicBlock              -   Basic block.
+HELP-ALL:     =Discriminator           -   Discriminator.
+HELP-ALL:     =EndSequence             -   End sequence.
+HELP-ALL:     =EpilogueBegin.          -   Epilogue begin.
+HELP-ALL:     =LineDebug               -   Debug line.
+HELP-ALL:     =LineAssembler           -   Assembler line.
+HELP-ALL:     =NeverStepInto           -   Never Step Into.
+HELP-ALL:     =NewStatement            -   New statement.
+HELP-ALL:     =PrologueEnd             -   Prologue end.
+HELP-ALL:   --select-nocase            - Ignore case distinctions when searching.
+HELP-ALL:   --select-offsets=<offset>  - Offset element to print.
+HELP-ALL:   --select-regex             - Treat any <pattern> strings as regular expressions when selecting instead of just as an exact string match.
+HELP-ALL:   --select-scopes=<value>    - Scope kind to use when printing scopes.
+HELP-ALL:     =Aggregate               -   Class, Structure or Union.
+HELP-ALL:     =Array                   -   Array.
+HELP-ALL:     =Block                   -   Lexical block.
+HELP-ALL:     =CallSite                -   Call site block.
+HELP-ALL:     =CatchBlock              -   Exception catch block.
+HELP-ALL:     =Class                   -   Class.
+HELP-ALL:     =CompileUnit             -   Compile unit.
+HELP-ALL:     =EntryPoint              -   Function entry point.
+HELP-ALL:     =Enumeration             -   Enumeration.
+HELP-ALL:     =Function                -   Function.
+HELP-ALL:     =FunctionType            -   Function type.
+HELP-ALL:     =InlinedFunction         -   Inlined function.
+HELP-ALL:     =Label                   -   Label.
+HELP-ALL:     =LexicalBlock            -   Lexical block.
+HELP-ALL:     =Namespace               -   Namespace.
+HELP-ALL:     =Root                    -   Root.
+HELP-ALL:     =Structure               -   Structure.
+HELP-ALL:     =Subprogram              -   Subprogram.
+HELP-ALL:     =Template                -   Template.
+HELP-ALL:     =TemplateAlias           -   Template alias.
+HELP-ALL:     =TemplatePack            -   Template pack.
+HELP-ALL:     =TryBlock                -   Exception try block.
+HELP-ALL:     =Union                   -   Union.
+HELP-ALL:   --select-symbols=<value>   - Symbol kind to use when printing symbols.
+HELP-ALL:     =CallSiteParameter       -   Call site parameter.
+HELP-ALL:     =Constant                -   Constant.
+HELP-ALL:     =Inheritance             -   Inheritance.
+HELP-ALL:     =Member                  -   Member.
+HELP-ALL:     =Parameter               -   Parameter.
+HELP-ALL:     =Unspecified             -   Unspecified parameter.
+HELP-ALL:     =Variable                -   Variable.
+HELP-ALL:   --select-types=<value>     - Type kind to use when printing types.
+HELP-ALL:     =Base                    -   Base Type (int, bool, etc.).
+HELP-ALL:     =Const                   -   Constant specifier.
+HELP-ALL:     =Enumerator              -   Enumerator.
+HELP-ALL:     =Import                  -   Import.
+HELP-ALL:     =ImportDeclaration       -   Import declaration.
+HELP-ALL:     =ImportModule            -   Import module.
+HELP-ALL:     =Pointer                 -   Pointer.
+HELP-ALL:     =PointerMember           -   Pointer to member.
+HELP-ALL:     =Reference               -   Reference type.
+HELP-ALL:     =Restrict                -   Restrict specifier.
+HELP-ALL:     =RvalueReference         -   Rvalue reference.
+HELP-ALL:     =Subrange                -   Array subrange.
+HELP-ALL:     =TemplateParam           -   Template Parameter.
+HELP-ALL:     =TemplateTemplateParam   -   Template template parameter.
+HELP-ALL:     =TemplateTypeParam       -   Template type parameter.
+HELP-ALL:     =TemplateValueParam      -   Template value parameter.
+HELP-ALL:     =Typedef                 -   Type definition.
+HELP-ALL:     =Unspecified             -   Unspecified type.
+HELP-ALL:     =Volatile                -   Volatile specifier.
+HELP-ALL: Warning Options:
+HELP-ALL: These control the generated warnings.
+HELP-ALL:   --warning=<value>          - Warnings to generate.
+HELP-ALL:     =all                     -   All warnings.
+HELP-ALL:     =coverages               -   Invalid symbol coverages values.
+HELP-ALL:     =lines                   -   Debug lines that are zero.
+HELP-ALL:     =locations               -   Invalid symbol locations.
+HELP-ALL:     =ranges                  -   Invalid code ranges.
+HELP-ALL: Pass @FILE as argument to read options from FILE.
diff --git a/llvm/test/tools/llvm-driver/lit.local.cfg b/llvm/test/tools/llvm-driver/lit.local.cfg
new file mode 100644
index 000000000000..940e46217621
--- /dev/null
+++ b/llvm/test/tools/llvm-driver/lit.local.cfg
@@ -0,0 +1,4 @@
+from lit.llvm import llvm_config
+
+if llvm_config.use_lld(required=False):
+    config.available_features.add('lld')
diff --git a/llvm/test/tools/llvm-driver/passthrough-lld.test b/llvm/test/tools/llvm-driver/passthrough-lld.test
new file mode 100644
index 000000000000..acd5f3878481
--- /dev/null
+++ b/llvm/test/tools/llvm-driver/passthrough-lld.test
@@ -0,0 +1,6 @@
+# REQUIRES: llvm-driver, lld
+
+# RUN: %llvm ld.lld --help | FileCheck %s
+# RUN: %llvm lld -flavor ld.lld --help | FileCheck %s
+
+# CHECK: supported targets: elf
diff --git a/llvm/test/tools/llvm-dwarfdump/AArch64/ptrauth.s b/llvm/test/tools/llvm-dwarfdump/AArch64/ptrauth.s
index 4d93528557cb..d24a60d99bda 100644
--- a/llvm/test/tools/llvm-dwarfdump/AArch64/ptrauth.s
+++ b/llvm/test/tools/llvm-dwarfdump/AArch64/ptrauth.s
@@ -1,13 +1,13 @@
-# RUN: llvm-mc %s -filetype obj -triple arm64-apple-darwin -o - \
-# RUN: | llvm-dwarfdump --debug-info - \
-# RUN: | FileCheck %s
+# RUN: llvm-mc %s -filetype obj -triple arm64-apple-darwin -o %t
+# RUN: llvm-dwarfdump --debug-info %t | FileCheck %s
+# RUN: llvm-dwarfdump --verify %t
 
 # CHECK: 0x0000001e:   DW_TAG_variable
 # CHECK:                 DW_AT_name      ("p1")
 # CHECK:                 DW_AT_type      (0x00000033 "void *__ptrauth(4, 1, 0x04d2)")
 
 # CHECK: 0x00000033:   DW_TAG_LLVM_ptrauth_type
 # CHECK:                 DW_AT_LLVM_ptrauth_key  (0x04)
 # CHECK:                 DW_AT_LLVM_ptrauth_address_discriminated        (true)
 # CHECK:                 DW_AT_LLVM_ptrauth_extra_discriminator  (0x04d2)
 
diff --git a/llvm/test/tools/llvm-extract/address-space-assert.ll b/llvm/test/tools/llvm-extract/address-space-assert.ll
new file mode 100644
index 000000000000..94f3fdd72598
--- /dev/null
+++ b/llvm/test/tools/llvm-extract/address-space-assert.ll
@@ -0,0 +1,32 @@
+; RUN: llvm-extract -S --bb=func:bb4 -aggregate-extracted-args=0 < %s | FileCheck %s
+
+; FIXME: aggregate-extracted-args doesn't work for other reasons
+; XUN: llvm-extract -S --bb=func:bb4 -aggregate-extracted-args=1 < %s | FileCheck %s
+
+target datalayout = "A5-G1-ni:7"
+
+; Check that there's no assert from incorrect pointer types used in the new arguments.
+
+; CHECK-LABEL: define dso_local void @func.bb4(i32 %orig.arg.0, ptr addrspace(5) %tmp1.out, ptr addrspace(5) %add.out) {
+; CHECK: bb4:
+; CHECK-NEXT: %tmp0 = add i32 0, 0
+; CHECK-NEXT: %tmp1 = add i32 1, 1
+; CHECK-NEXT: store i32 %tmp1, ptr addrspace(5) %tmp1.out, align 4
+; CHECK-NEXT: %add = add i32 %tmp0, %orig.arg.0
+; CHECK-NEXT: store i32 %add, ptr addrspace(5) %add.out, align 4
+; CHECK-NEXT: br label %bb5.exitStub
+define void @func(i32 %orig.arg.0, ptr addrspace(1) %orig.arg.1) {
+bb:
+  br label %bb4
+
+bb4:                                              ; preds = %bb
+  %tmp0 = add i32 0, 0
+  %tmp1 = add i32 1, 1
+  %add = add i32 %tmp0, %orig.arg.0
+  br label %bb5
+
+bb5:                                              ; preds = %bb5, %bb4
+  %tmp6 = phi i32 [ %add, %bb4 ], [ 0, %bb5 ]
+  %tmp7 = phi i32 [ %tmp1, %bb4 ], [ 2, %bb5 ]
+  br label %bb5
+}
diff --git a/llvm/test/tools/llvm-mca/AArch64/A64FX/A64FX-sve-instructions.s b/llvm/test/tools/llvm-mca/AArch64/A64FX/A64FX-sve-instructions.s
index 0f1d46f43bd4..ee1eb521a1e2 100644
--- a/llvm/test/tools/llvm-mca/AArch64/A64FX/A64FX-sve-instructions.s
+++ b/llvm/test/tools/llvm-mca/AArch64/A64FX/A64FX-sve-instructions.s
@@ -3561,60 +3561,60 @@ zip2	z31.s, z31.s, z31.s
 # CHECK-NEXT:  3      15    4.50    *             U     ld2h	{ z0.h, z1.h }, p0/z, [x0, x0, lsl #1]
 # CHECK-NEXT:  3      15    4.50    *             U     ld2h	{ z0.h, z1.h }, p0/z, [x0]
 # CHECK-NEXT:  3      15    4.50    *             U     ld2h	{ z21.h, z22.h }, p5/z, [x10, #10, mul vl]
 # CHECK-NEXT:  3      15    4.50    *             U     ld2h	{ z23.h, z24.h }, p3/z, [x13, #-16, mul vl]
 # CHECK-NEXT:  3      15    4.50    *             U     ld2h	{ z5.h, z6.h }, p3/z, [x17, x16, lsl #1]
 # CHECK-NEXT:  3      12    1.50    *             U     ld2w	{ z0.s, z1.s }, p0/z, [x0, x0, lsl #2]
 # CHECK-NEXT:  2      11    1.00    *             U     ld2w	{ z0.s, z1.s }, p0/z, [x0]
 # CHECK-NEXT:  2      11    1.00    *             U     ld2w	{ z21.s, z22.s }, p5/z, [x10, #10, mul vl]
 # CHECK-NEXT:  2      11    1.00    *             U     ld2w	{ z23.s, z24.s }, p3/z, [x13, #-16, mul vl]
 # CHECK-NEXT:  3      12    1.50    *             U     ld2w	{ z5.s, z6.s }, p3/z, [x17, x16, lsl #2]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z0.b, z1.b, z2.b }, p0/z, [x0, x0]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z0.b, z1.b, z2.b }, p0/z, [x0]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z21.b, z22.b, z23.b }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z23.b, z24.b, z25.b }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z5.b, z6.b, z7.b }, p3/z, [x17, x16]
-# CHECK-NEXT:  4      12    2.00    *             U     ld3d	{ z0.d, z1.d, z2.d }, p0/z, [x0, x0, lsl #3]
-# CHECK-NEXT:  3      11    1.50    *             U     ld3d	{ z0.d, z1.d, z2.d }, p0/z, [x0]
-# CHECK-NEXT:  3      11    1.50    *             U     ld3d	{ z21.d, z22.d, z23.d }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  3      11    1.50    *             U     ld3d	{ z23.d, z24.d, z25.d }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  4      12    2.00    *             U     ld3d	{ z5.d, z6.d, z7.d }, p3/z, [x17, x16, lsl #3]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z0.h, z1.h, z2.h }, p0/z, [x0, x0, lsl #1]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z0.h, z1.h, z2.h }, p0/z, [x0]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z21.h, z22.h, z23.h }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z23.h, z24.h, z25.h }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z5.h, z6.h, z7.h }, p3/z, [x17, x16, lsl #1]
-# CHECK-NEXT:  4      12    2.00    *             U     ld3w	{ z0.s, z1.s, z2.s }, p0/z, [x0, x0, lsl #2]
-# CHECK-NEXT:  3      11    1.50    *             U     ld3w	{ z0.s, z1.s, z2.s }, p0/z, [x0]
-# CHECK-NEXT:  3      11    1.50    *             U     ld3w	{ z21.s, z22.s, z23.s }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  3      11    1.50    *             U     ld3w	{ z23.s, z24.s, z25.s }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  4      12    2.00    *             U     ld3w	{ z5.s, z6.s, z7.s }, p3/z, [x17, x16, lsl #2]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z0.b, z1.b, z2.b, z3.b }, p0/z, [x0, x0]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z0.b, z1.b, z2.b, z3.b }, p0/z, [x0]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z21.b, z22.b, z23.b, z24.b }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z23.b, z24.b, z25.b, z26.b }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z5.b, z6.b, z7.b, z8.b }, p3/z, [x17, x16]
-# CHECK-NEXT:  5      12    2.50    *             U     ld4d	{ z0.d, z1.d, z2.d, z3.d }, p0/z, [x0, x0, lsl #3]
-# CHECK-NEXT:  4      11    2.00    *             U     ld4d	{ z0.d, z1.d, z2.d, z3.d }, p0/z, [x0]
-# CHECK-NEXT:  4      11    2.00    *             U     ld4d	{ z21.d, z22.d, z23.d, z24.d }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  4      11    2.00    *             U     ld4d	{ z23.d, z24.d, z25.d, z26.d }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  5      12    2.50    *             U     ld4d	{ z5.d, z6.d, z7.d, z8.d }, p3/z, [x17, x16, lsl #3]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z0.h, z1.h, z2.h, z3.h }, p0/z, [x0, x0, lsl #1]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z0.h, z1.h, z2.h, z3.h }, p0/z, [x0]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z21.h, z22.h, z23.h, z24.h }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z23.h, z24.h, z25.h, z26.h }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z5.h, z6.h, z7.h, z8.h }, p3/z, [x17, x16, lsl #1]
-# CHECK-NEXT:  5      12    2.50    *             U     ld4w	{ z0.s, z1.s, z2.s, z3.s }, p0/z, [x0, x0, lsl #2]
-# CHECK-NEXT:  4      11    2.00    *             U     ld4w	{ z0.s, z1.s, z2.s, z3.s }, p0/z, [x0]
-# CHECK-NEXT:  4      11    2.00    *             U     ld4w	{ z21.s, z22.s, z23.s, z24.s }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  4      11    2.00    *             U     ld4w	{ z23.s, z24.s, z25.s, z26.s }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  5      12    2.50    *             U     ld4w	{ z5.s, z6.s, z7.s, z8.s }, p3/z, [x17, x16, lsl #2]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z0.b - z2.b }, p0/z, [x0, x0]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z0.b - z2.b }, p0/z, [x0]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z21.b - z23.b }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z23.b - z25.b }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3b	{ z5.b - z7.b }, p3/z, [x17, x16]
+# CHECK-NEXT:  4      12    2.00    *             U     ld3d	{ z0.d - z2.d }, p0/z, [x0, x0, lsl #3]
+# CHECK-NEXT:  3      11    1.50    *             U     ld3d	{ z0.d - z2.d }, p0/z, [x0]
+# CHECK-NEXT:  3      11    1.50    *             U     ld3d	{ z21.d - z23.d }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  3      11    1.50    *             U     ld3d	{ z23.d - z25.d }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  4      12    2.00    *             U     ld3d	{ z5.d - z7.d }, p3/z, [x17, x16, lsl #3]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z0.h - z2.h }, p0/z, [x0, x0, lsl #1]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z0.h - z2.h }, p0/z, [x0]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z21.h - z23.h }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z23.h - z25.h }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  4      15    6.50    *             U     ld3h	{ z5.h - z7.h }, p3/z, [x17, x16, lsl #1]
+# CHECK-NEXT:  4      12    2.00    *             U     ld3w	{ z0.s - z2.s }, p0/z, [x0, x0, lsl #2]
+# CHECK-NEXT:  3      11    1.50    *             U     ld3w	{ z0.s - z2.s }, p0/z, [x0]
+# CHECK-NEXT:  3      11    1.50    *             U     ld3w	{ z21.s - z23.s }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  3      11    1.50    *             U     ld3w	{ z23.s - z25.s }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  4      12    2.00    *             U     ld3w	{ z5.s - z7.s }, p3/z, [x17, x16, lsl #2]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z0.b - z3.b }, p0/z, [x0, x0]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z0.b - z3.b }, p0/z, [x0]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z21.b - z24.b }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z23.b - z26.b }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4b	{ z5.b - z8.b }, p3/z, [x17, x16]
+# CHECK-NEXT:  5      12    2.50    *             U     ld4d	{ z0.d - z3.d }, p0/z, [x0, x0, lsl #3]
+# CHECK-NEXT:  4      11    2.00    *             U     ld4d	{ z0.d - z3.d }, p0/z, [x0]
+# CHECK-NEXT:  4      11    2.00    *             U     ld4d	{ z21.d - z24.d }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  4      11    2.00    *             U     ld4d	{ z23.d - z26.d }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  5      12    2.50    *             U     ld4d	{ z5.d - z8.d }, p3/z, [x17, x16, lsl #3]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z0.h - z3.h }, p0/z, [x0, x0, lsl #1]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z0.h - z3.h }, p0/z, [x0]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z21.h - z24.h }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z23.h - z26.h }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  5      15    8.50    *             U     ld4h	{ z5.h - z8.h }, p3/z, [x17, x16, lsl #1]
+# CHECK-NEXT:  5      12    2.50    *             U     ld4w	{ z0.s - z3.s }, p0/z, [x0, x0, lsl #2]
+# CHECK-NEXT:  4      11    2.00    *             U     ld4w	{ z0.s - z3.s }, p0/z, [x0]
+# CHECK-NEXT:  4      11    2.00    *             U     ld4w	{ z21.s - z24.s }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  4      11    2.00    *             U     ld4w	{ z23.s - z26.s }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  5      12    2.50    *             U     ld4w	{ z5.s - z8.s }, p3/z, [x17, x16, lsl #2]
 # CHECK-NEXT:  1      11    0.50    *             U     ldff1b	{ z0.d }, p0/z, [x0, x0]
 # CHECK-NEXT:  1      16    2.00    *             U     ldff1b	{ z0.d }, p0/z, [z0.d]
 # CHECK-NEXT:  1      11    0.50    *             U     ldff1b	{ z0.h }, p0/z, [x0, x0]
 # CHECK-NEXT:  1      11    0.50    *             U     ldff1b	{ z0.s }, p0/z, [x0, x0]
 # CHECK-NEXT:  1      23    4.00    *             U     ldff1b	{ z0.s }, p0/z, [x0, z0.s, sxtw]
 # CHECK-NEXT:  1      23    4.00    *             U     ldff1b	{ z0.s }, p0/z, [x0, z0.s, uxtw]
 # CHECK-NEXT:  1      19    4.00    *             U     ldff1b	{ z0.s }, p0/z, [z0.s]
 # CHECK-NEXT:  1      20    2.00    *             U     ldff1b	{ z21.d }, p5/z, [x10, z21.d, sxtw]
 # CHECK-NEXT:  1      20    2.00    *             U     ldff1b	{ z21.d }, p5/z, [x10, z21.d, uxtw]
 # CHECK-NEXT:  1      11    0.50    *             U     ldff1b	{ z31.b }, p7/z, [sp]
@@ -4573,60 +4573,60 @@ zip2	z31.s, z31.s, z31.s
 # CHECK-NEXT:  3      12    8.00           *      U     st2h	{ z0.h, z1.h }, p0, [x0, x0, lsl #1]
 # CHECK-NEXT:  3      12    8.00           *      U     st2h	{ z0.h, z1.h }, p0, [x0]
 # CHECK-NEXT:  3      12    8.00           *      U     st2h	{ z21.h, z22.h }, p5, [x10, #10, mul vl]
 # CHECK-NEXT:  3      12    8.00           *      U     st2h	{ z23.h, z24.h }, p3, [x13, #-16, mul vl]
 # CHECK-NEXT:  3      12    8.00           *      U     st2h	{ z5.h, z6.h }, p3, [x17, x16, lsl #1]
 # CHECK-NEXT:  2      11    2.00           *      U     st2w	{ z0.s, z1.s }, p0, [x0, x0, lsl #2]
 # CHECK-NEXT:  3      12    2.00           *      U     st2w	{ z0.s, z1.s }, p0, [x0]
 # CHECK-NEXT:  3      12    2.00           *      U     st2w	{ z21.s, z22.s }, p5, [x10, #10, mul vl]
 # CHECK-NEXT:  3      12    2.00           *      U     st2w	{ z23.s, z24.s }, p3, [x13, #-16, mul vl]
 # CHECK-NEXT:  2      11    2.00           *      U     st2w	{ z5.s, z6.s }, p3, [x17, x16, lsl #2]
-# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z0.b, z1.b, z2.b }, p0, [x0, x0]
-# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z0.b, z1.b, z2.b }, p0, [x0]
-# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z21.b, z22.b, z23.b }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z23.b, z24.b, z25.b }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z5.b, z6.b, z7.b }, p3, [x17, x16]
-# CHECK-NEXT:  3      11    3.00           *      U     st3d	{ z0.d, z1.d, z2.d }, p0, [x0, x0, lsl #3]
-# CHECK-NEXT:  4      12    3.00           *      U     st3d	{ z0.d, z1.d, z2.d }, p0, [x0]
-# CHECK-NEXT:  4      12    3.00           *      U     st3d	{ z21.d, z22.d, z23.d }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  4      12    3.00           *      U     st3d	{ z23.d, z24.d, z25.d }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  3      11    3.00           *      U     st3d	{ z5.d, z6.d, z7.d }, p3, [x17, x16, lsl #3]
-# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z0.h, z1.h, z2.h }, p0, [x0, x0, lsl #1]
-# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z0.h, z1.h, z2.h }, p0, [x0]
-# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z21.h, z22.h, z23.h }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z23.h, z24.h, z25.h }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z5.h, z6.h, z7.h }, p3, [x17, x16, lsl #1]
-# CHECK-NEXT:  3      11    3.00           *      U     st3w	{ z0.s, z1.s, z2.s }, p0, [x0, x0, lsl #2]
-# CHECK-NEXT:  4      12    3.00           *      U     st3w	{ z0.s, z1.s, z2.s }, p0, [x0]
-# CHECK-NEXT:  4      12    3.00           *      U     st3w	{ z21.s, z22.s, z23.s }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  4      12    3.00           *      U     st3w	{ z23.s, z24.s, z25.s }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  3      11    3.00           *      U     st3w	{ z5.s, z6.s, z7.s }, p3, [x17, x16, lsl #2]
-# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z0.b, z1.b, z2.b, z3.b }, p0, [x0, x0]
-# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z0.b, z1.b, z2.b, z3.b }, p0, [x0]
-# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z21.b, z22.b, z23.b, z24.b }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z23.b, z24.b, z25.b, z26.b }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z5.b, z6.b, z7.b, z8.b }, p3, [x17, x16]
-# CHECK-NEXT:  4      11    4.00           *      U     st4d	{ z0.d, z1.d, z2.d, z3.d }, p0, [x0, x0, lsl #3]
-# CHECK-NEXT:  5      12    4.00           *      U     st4d	{ z0.d, z1.d, z2.d, z3.d }, p0, [x0]
-# CHECK-NEXT:  5      12    4.00           *      U     st4d	{ z21.d, z22.d, z23.d, z24.d }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  5      12    4.00           *      U     st4d	{ z23.d, z24.d, z25.d, z26.d }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  4      11    4.00           *      U     st4d	{ z5.d, z6.d, z7.d, z8.d }, p3, [x17, x16, lsl #3]
-# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z0.h, z1.h, z2.h, z3.h }, p0, [x0, x0, lsl #1]
-# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z0.h, z1.h, z2.h, z3.h }, p0, [x0]
-# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z21.h, z22.h, z23.h, z24.h }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z23.h, z24.h, z25.h, z26.h }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z5.h, z6.h, z7.h, z8.h }, p3, [x17, x16, lsl #1]
-# CHECK-NEXT:  4      11    4.00           *      U     st4w	{ z0.s, z1.s, z2.s, z3.s }, p0, [x0, x0, lsl #2]
-# CHECK-NEXT:  5      12    4.00           *      U     st4w	{ z0.s, z1.s, z2.s, z3.s }, p0, [x0]
-# CHECK-NEXT:  5      12    4.00           *      U     st4w	{ z21.s, z22.s, z23.s, z24.s }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  5      12    4.00           *      U     st4w	{ z23.s, z24.s, z25.s, z26.s }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  4      11    4.00           *      U     st4w	{ z5.s, z6.s, z7.s, z8.s }, p3, [x17, x16, lsl #2]
+# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z0.b - z2.b }, p0, [x0, x0]
+# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z0.b - z2.b }, p0, [x0]
+# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z21.b - z23.b }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z23.b - z25.b }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  4      15    12.00          *      U     st3b	{ z5.b - z7.b }, p3, [x17, x16]
+# CHECK-NEXT:  3      11    3.00           *      U     st3d	{ z0.d - z2.d }, p0, [x0, x0, lsl #3]
+# CHECK-NEXT:  4      12    3.00           *      U     st3d	{ z0.d - z2.d }, p0, [x0]
+# CHECK-NEXT:  4      12    3.00           *      U     st3d	{ z21.d - z23.d }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  4      12    3.00           *      U     st3d	{ z23.d - z25.d }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  3      11    3.00           *      U     st3d	{ z5.d - z7.d }, p3, [x17, x16, lsl #3]
+# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z0.h - z2.h }, p0, [x0, x0, lsl #1]
+# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z0.h - z2.h }, p0, [x0]
+# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z21.h - z23.h }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z23.h - z25.h }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  4      15    12.00          *      U     st3h	{ z5.h - z7.h }, p3, [x17, x16, lsl #1]
+# CHECK-NEXT:  3      11    3.00           *      U     st3w	{ z0.s - z2.s }, p0, [x0, x0, lsl #2]
+# CHECK-NEXT:  4      12    3.00           *      U     st3w	{ z0.s - z2.s }, p0, [x0]
+# CHECK-NEXT:  4      12    3.00           *      U     st3w	{ z21.s - z23.s }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  4      12    3.00           *      U     st3w	{ z23.s - z25.s }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  3      11    3.00           *      U     st3w	{ z5.s - z7.s }, p3, [x17, x16, lsl #2]
+# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z0.b - z3.b }, p0, [x0, x0]
+# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z0.b - z3.b }, p0, [x0]
+# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z21.b - z24.b }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z23.b - z26.b }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  5      15    16.00          *      U     st4b	{ z5.b - z8.b }, p3, [x17, x16]
+# CHECK-NEXT:  4      11    4.00           *      U     st4d	{ z0.d - z3.d }, p0, [x0, x0, lsl #3]
+# CHECK-NEXT:  5      12    4.00           *      U     st4d	{ z0.d - z3.d }, p0, [x0]
+# CHECK-NEXT:  5      12    4.00           *      U     st4d	{ z21.d - z24.d }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  5      12    4.00           *      U     st4d	{ z23.d - z26.d }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  4      11    4.00           *      U     st4d	{ z5.d - z8.d }, p3, [x17, x16, lsl #3]
+# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z0.h - z3.h }, p0, [x0, x0, lsl #1]
+# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z0.h - z3.h }, p0, [x0]
+# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z21.h - z24.h }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z23.h - z26.h }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  5      15    16.00          *      U     st4h	{ z5.h - z8.h }, p3, [x17, x16, lsl #1]
+# CHECK-NEXT:  4      11    4.00           *      U     st4w	{ z0.s - z3.s }, p0, [x0, x0, lsl #2]
+# CHECK-NEXT:  5      12    4.00           *      U     st4w	{ z0.s - z3.s }, p0, [x0]
+# CHECK-NEXT:  5      12    4.00           *      U     st4w	{ z21.s - z24.s }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  5      12    4.00           *      U     st4w	{ z23.s - z26.s }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  4      11    4.00           *      U     st4w	{ z5.s - z8.s }, p3, [x17, x16, lsl #2]
 # CHECK-NEXT:  1      11    1.00           *            stnt1b	{ z0.b }, p0, [x0, x0]
 # CHECK-NEXT:  1      11    1.00           *            stnt1b	{ z0.b }, p0, [x0]
 # CHECK-NEXT:  1      11    1.00           *            stnt1b	{ z21.b }, p5, [x10, #7, mul vl]
 # CHECK-NEXT:  1      11    1.00           *            stnt1b	{ z23.b }, p3, [x13, #-8, mul vl]
 # CHECK-NEXT:  1      11    1.00           *            stnt1d	{ z0.d }, p0, [x0, x0, lsl #3]
 # CHECK-NEXT:  1      11    1.00           *            stnt1d	{ z0.d }, p0, [x0]
 # CHECK-NEXT:  1      11    1.00           *            stnt1d	{ z21.d }, p5, [x10, #7, mul vl]
 # CHECK-NEXT:  1      11    1.00           *            stnt1d	{ z23.d }, p3, [x13, #-8, mul vl]
 # CHECK-NEXT:  1      11    1.00           *            stnt1h	{ z0.h }, p0, [x0, x0, lsl #1]
 # CHECK-NEXT:  1      11    1.00           *            stnt1h	{ z0.h }, p0, [x0]
@@ -6073,60 +6073,60 @@ zip2	z31.s, z31.s, z31.s
 # CHECK-NEXT:  -     4.50   4.50    -      -      -      -      -     ld2h	{ z0.h, z1.h }, p0/z, [x0, x0, lsl #1]
 # CHECK-NEXT:  -     4.50   4.50    -      -      -      -      -     ld2h	{ z0.h, z1.h }, p0/z, [x0]
 # CHECK-NEXT:  -     4.50   4.50    -      -      -      -      -     ld2h	{ z21.h, z22.h }, p5/z, [x10, #10, mul vl]
 # CHECK-NEXT:  -     4.50   4.50    -      -      -      -      -     ld2h	{ z23.h, z24.h }, p3/z, [x13, #-16, mul vl]
 # CHECK-NEXT:  -     4.50   4.50    -      -      -      -      -     ld2h	{ z5.h, z6.h }, p3/z, [x17, x16, lsl #1]
 # CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld2w	{ z0.s, z1.s }, p0/z, [x0, x0, lsl #2]
 # CHECK-NEXT:  -     1.00   1.00    -      -      -      -      -     ld2w	{ z0.s, z1.s }, p0/z, [x0]
 # CHECK-NEXT:  -     1.00   1.00    -      -      -      -      -     ld2w	{ z21.s, z22.s }, p5/z, [x10, #10, mul vl]
 # CHECK-NEXT:  -     1.00   1.00    -      -      -      -      -     ld2w	{ z23.s, z24.s }, p3/z, [x13, #-16, mul vl]
 # CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld2w	{ z5.s, z6.s }, p3/z, [x17, x16, lsl #2]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z0.b, z1.b, z2.b }, p0/z, [x0, x0]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z0.b, z1.b, z2.b }, p0/z, [x0]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z21.b, z22.b, z23.b }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z23.b, z24.b, z25.b }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z5.b, z6.b, z7.b }, p3/z, [x17, x16]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld3d	{ z0.d, z1.d, z2.d }, p0/z, [x0, x0, lsl #3]
-# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3d	{ z0.d, z1.d, z2.d }, p0/z, [x0]
-# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3d	{ z21.d, z22.d, z23.d }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3d	{ z23.d, z24.d, z25.d }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld3d	{ z5.d, z6.d, z7.d }, p3/z, [x17, x16, lsl #3]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z0.h, z1.h, z2.h }, p0/z, [x0, x0, lsl #1]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z0.h, z1.h, z2.h }, p0/z, [x0]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z21.h, z22.h, z23.h }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z23.h, z24.h, z25.h }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z5.h, z6.h, z7.h }, p3/z, [x17, x16, lsl #1]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld3w	{ z0.s, z1.s, z2.s }, p0/z, [x0, x0, lsl #2]
-# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3w	{ z0.s, z1.s, z2.s }, p0/z, [x0]
-# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3w	{ z21.s, z22.s, z23.s }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3w	{ z23.s, z24.s, z25.s }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld3w	{ z5.s, z6.s, z7.s }, p3/z, [x17, x16, lsl #2]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z0.b, z1.b, z2.b, z3.b }, p0/z, [x0, x0]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z0.b, z1.b, z2.b, z3.b }, p0/z, [x0]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z21.b, z22.b, z23.b, z24.b }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z23.b, z24.b, z25.b, z26.b }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z5.b, z6.b, z7.b, z8.b }, p3/z, [x17, x16]
-# CHECK-NEXT:  -     2.50   2.50    -      -      -      -      -     ld4d	{ z0.d, z1.d, z2.d, z3.d }, p0/z, [x0, x0, lsl #3]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4d	{ z0.d, z1.d, z2.d, z3.d }, p0/z, [x0]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4d	{ z21.d, z22.d, z23.d, z24.d }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4d	{ z23.d, z24.d, z25.d, z26.d }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  -     2.50   2.50    -      -      -      -      -     ld4d	{ z5.d, z6.d, z7.d, z8.d }, p3/z, [x17, x16, lsl #3]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z0.h, z1.h, z2.h, z3.h }, p0/z, [x0, x0, lsl #1]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z0.h, z1.h, z2.h, z3.h }, p0/z, [x0]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z21.h, z22.h, z23.h, z24.h }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z23.h, z24.h, z25.h, z26.h }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z5.h, z6.h, z7.h, z8.h }, p3/z, [x17, x16, lsl #1]
-# CHECK-NEXT:  -     2.50   2.50    -      -      -      -      -     ld4w	{ z0.s, z1.s, z2.s, z3.s }, p0/z, [x0, x0, lsl #2]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4w	{ z0.s, z1.s, z2.s, z3.s }, p0/z, [x0]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4w	{ z21.s, z22.s, z23.s, z24.s }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4w	{ z23.s, z24.s, z25.s, z26.s }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  -     2.50   2.50    -      -      -      -      -     ld4w	{ z5.s, z6.s, z7.s, z8.s }, p3/z, [x17, x16, lsl #2]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z0.b - z2.b }, p0/z, [x0, x0]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z0.b - z2.b }, p0/z, [x0]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z21.b - z23.b }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z23.b - z25.b }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3b	{ z5.b - z7.b }, p3/z, [x17, x16]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld3d	{ z0.d - z2.d }, p0/z, [x0, x0, lsl #3]
+# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3d	{ z0.d - z2.d }, p0/z, [x0]
+# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3d	{ z21.d - z23.d }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3d	{ z23.d - z25.d }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld3d	{ z5.d - z7.d }, p3/z, [x17, x16, lsl #3]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z0.h - z2.h }, p0/z, [x0, x0, lsl #1]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z0.h - z2.h }, p0/z, [x0]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z21.h - z23.h }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z23.h - z25.h }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  -     6.50   6.50    -      -      -      -      -     ld3h	{ z5.h - z7.h }, p3/z, [x17, x16, lsl #1]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld3w	{ z0.s - z2.s }, p0/z, [x0, x0, lsl #2]
+# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3w	{ z0.s - z2.s }, p0/z, [x0]
+# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3w	{ z21.s - z23.s }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  -     1.50   1.50    -      -      -      -      -     ld3w	{ z23.s - z25.s }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld3w	{ z5.s - z7.s }, p3/z, [x17, x16, lsl #2]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z0.b - z3.b }, p0/z, [x0, x0]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z0.b - z3.b }, p0/z, [x0]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z21.b - z24.b }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z23.b - z26.b }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4b	{ z5.b - z8.b }, p3/z, [x17, x16]
+# CHECK-NEXT:  -     2.50   2.50    -      -      -      -      -     ld4d	{ z0.d - z3.d }, p0/z, [x0, x0, lsl #3]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4d	{ z0.d - z3.d }, p0/z, [x0]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4d	{ z21.d - z24.d }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4d	{ z23.d - z26.d }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  -     2.50   2.50    -      -      -      -      -     ld4d	{ z5.d - z8.d }, p3/z, [x17, x16, lsl #3]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z0.h - z3.h }, p0/z, [x0, x0, lsl #1]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z0.h - z3.h }, p0/z, [x0]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z21.h - z24.h }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z23.h - z26.h }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  -     8.50   8.50    -      -      -      -      -     ld4h	{ z5.h - z8.h }, p3/z, [x17, x16, lsl #1]
+# CHECK-NEXT:  -     2.50   2.50    -      -      -      -      -     ld4w	{ z0.s - z3.s }, p0/z, [x0, x0, lsl #2]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4w	{ z0.s - z3.s }, p0/z, [x0]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4w	{ z21.s - z24.s }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  -     2.00   2.00    -      -      -      -      -     ld4w	{ z23.s - z26.s }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  -     2.50   2.50    -      -      -      -      -     ld4w	{ z5.s - z8.s }, p3/z, [x17, x16, lsl #2]
 # CHECK-NEXT:  -     0.50   0.50    -      -      -      -      -     ldff1b	{ z0.d }, p0/z, [x0, x0]
 # CHECK-NEXT:  -     2.00   2.00    -      -     1.00    -      -     ldff1b	{ z0.d }, p0/z, [z0.d]
 # CHECK-NEXT:  -     0.50   0.50    -      -      -      -      -     ldff1b	{ z0.h }, p0/z, [x0, x0]
 # CHECK-NEXT:  -     0.50   0.50    -      -      -      -      -     ldff1b	{ z0.s }, p0/z, [x0, x0]
 # CHECK-NEXT:  -     4.00   4.00   1.00    -     2.00    -      -     ldff1b	{ z0.s }, p0/z, [x0, z0.s, sxtw]
 # CHECK-NEXT:  -     4.00   4.00   1.00    -     2.00    -      -     ldff1b	{ z0.s }, p0/z, [x0, z0.s, uxtw]
 # CHECK-NEXT:  -     4.00   4.00    -      -     2.00    -      -     ldff1b	{ z0.s }, p0/z, [z0.s]
 # CHECK-NEXT:  -     2.00   2.00   1.00    -     1.00    -      -     ldff1b	{ z21.d }, p5/z, [x10, z21.d, sxtw]
 # CHECK-NEXT:  -     2.00   2.00   1.00    -     1.00    -      -     ldff1b	{ z21.d }, p5/z, [x10, z21.d, uxtw]
 # CHECK-NEXT:  -     0.50   0.50    -      -      -      -      -     ldff1b	{ z31.b }, p7/z, [sp]
@@ -7085,60 +7085,60 @@ zip2	z31.s, z31.s, z31.s
 # CHECK-NEXT:  -     4.50   4.50    -      -     8.00    -      -     st2h	{ z0.h, z1.h }, p0, [x0, x0, lsl #1]
 # CHECK-NEXT:  -     4.50   4.50    -      -     8.00    -      -     st2h	{ z0.h, z1.h }, p0, [x0]
 # CHECK-NEXT:  -     4.50   4.50    -      -     8.00    -      -     st2h	{ z21.h, z22.h }, p5, [x10, #10, mul vl]
 # CHECK-NEXT:  -     4.50   4.50    -      -     8.00    -      -     st2h	{ z23.h, z24.h }, p3, [x13, #-16, mul vl]
 # CHECK-NEXT:  -     4.50   4.50    -      -     8.00    -      -     st2h	{ z5.h, z6.h }, p3, [x17, x16, lsl #1]
 # CHECK-NEXT:  -     1.00   1.00    -      -     2.00    -      -     st2w	{ z0.s, z1.s }, p0, [x0, x0, lsl #2]
 # CHECK-NEXT:  -     1.50   1.50    -      -     2.00    -      -     st2w	{ z0.s, z1.s }, p0, [x0]
 # CHECK-NEXT:  -     1.50   1.50    -      -     2.00    -      -     st2w	{ z21.s, z22.s }, p5, [x10, #10, mul vl]
 # CHECK-NEXT:  -     1.50   1.50    -      -     2.00    -      -     st2w	{ z23.s, z24.s }, p3, [x13, #-16, mul vl]
 # CHECK-NEXT:  -     1.00   1.00    -      -     2.00    -      -     st2w	{ z5.s, z6.s }, p3, [x17, x16, lsl #2]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z0.b, z1.b, z2.b }, p0, [x0, x0]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z0.b, z1.b, z2.b }, p0, [x0]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z21.b, z22.b, z23.b }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z23.b, z24.b, z25.b }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z5.b, z6.b, z7.b }, p3, [x17, x16]
-# CHECK-NEXT:  -     1.50   1.50    -      -     3.00    -      -     st3d	{ z0.d, z1.d, z2.d }, p0, [x0, x0, lsl #3]
-# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3d	{ z0.d, z1.d, z2.d }, p0, [x0]
-# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3d	{ z21.d, z22.d, z23.d }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3d	{ z23.d, z24.d, z25.d }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  -     1.50   1.50    -      -     3.00    -      -     st3d	{ z5.d, z6.d, z7.d }, p3, [x17, x16, lsl #3]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z0.h, z1.h, z2.h }, p0, [x0, x0, lsl #1]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z0.h, z1.h, z2.h }, p0, [x0]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z21.h, z22.h, z23.h }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z23.h, z24.h, z25.h }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z5.h, z6.h, z7.h }, p3, [x17, x16, lsl #1]
-# CHECK-NEXT:  -     1.50   1.50    -      -     3.00    -      -     st3w	{ z0.s, z1.s, z2.s }, p0, [x0, x0, lsl #2]
-# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3w	{ z0.s, z1.s, z2.s }, p0, [x0]
-# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3w	{ z21.s, z22.s, z23.s }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3w	{ z23.s, z24.s, z25.s }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  -     1.50   1.50    -      -     3.00    -      -     st3w	{ z5.s, z6.s, z7.s }, p3, [x17, x16, lsl #2]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z0.b, z1.b, z2.b, z3.b }, p0, [x0, x0]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z0.b, z1.b, z2.b, z3.b }, p0, [x0]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z21.b, z22.b, z23.b, z24.b }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z23.b, z24.b, z25.b, z26.b }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z5.b, z6.b, z7.b, z8.b }, p3, [x17, x16]
-# CHECK-NEXT:  -     2.00   2.00    -      -     4.00    -      -     st4d	{ z0.d, z1.d, z2.d, z3.d }, p0, [x0, x0, lsl #3]
-# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4d	{ z0.d, z1.d, z2.d, z3.d }, p0, [x0]
-# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4d	{ z21.d, z22.d, z23.d, z24.d }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4d	{ z23.d, z24.d, z25.d, z26.d }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  -     2.00   2.00    -      -     4.00    -      -     st4d	{ z5.d, z6.d, z7.d, z8.d }, p3, [x17, x16, lsl #3]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z0.h, z1.h, z2.h, z3.h }, p0, [x0, x0, lsl #1]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z0.h, z1.h, z2.h, z3.h }, p0, [x0]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z21.h, z22.h, z23.h, z24.h }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z23.h, z24.h, z25.h, z26.h }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z5.h, z6.h, z7.h, z8.h }, p3, [x17, x16, lsl #1]
-# CHECK-NEXT:  -     2.00   2.00    -      -     4.00    -      -     st4w	{ z0.s, z1.s, z2.s, z3.s }, p0, [x0, x0, lsl #2]
-# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4w	{ z0.s, z1.s, z2.s, z3.s }, p0, [x0]
-# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4w	{ z21.s, z22.s, z23.s, z24.s }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4w	{ z23.s, z24.s, z25.s, z26.s }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  -     2.00   2.00    -      -     4.00    -      -     st4w	{ z5.s, z6.s, z7.s, z8.s }, p3, [x17, x16, lsl #2]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z0.b - z2.b }, p0, [x0, x0]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z0.b - z2.b }, p0, [x0]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z21.b - z23.b }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z23.b - z25.b }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3b	{ z5.b - z7.b }, p3, [x17, x16]
+# CHECK-NEXT:  -     1.50   1.50    -      -     3.00    -      -     st3d	{ z0.d - z2.d }, p0, [x0, x0, lsl #3]
+# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3d	{ z0.d - z2.d }, p0, [x0]
+# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3d	{ z21.d - z23.d }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3d	{ z23.d - z25.d }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  -     1.50   1.50    -      -     3.00    -      -     st3d	{ z5.d - z7.d }, p3, [x17, x16, lsl #3]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z0.h - z2.h }, p0, [x0, x0, lsl #1]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z0.h - z2.h }, p0, [x0]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z21.h - z23.h }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z23.h - z25.h }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  -     6.50   6.50    -      -     12.00   -      -     st3h	{ z5.h - z7.h }, p3, [x17, x16, lsl #1]
+# CHECK-NEXT:  -     1.50   1.50    -      -     3.00    -      -     st3w	{ z0.s - z2.s }, p0, [x0, x0, lsl #2]
+# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3w	{ z0.s - z2.s }, p0, [x0]
+# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3w	{ z21.s - z23.s }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  -     2.00   2.00    -      -     3.00    -      -     st3w	{ z23.s - z25.s }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  -     1.50   1.50    -      -     3.00    -      -     st3w	{ z5.s - z7.s }, p3, [x17, x16, lsl #2]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z0.b - z3.b }, p0, [x0, x0]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z0.b - z3.b }, p0, [x0]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z21.b - z24.b }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z23.b - z26.b }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4b	{ z5.b - z8.b }, p3, [x17, x16]
+# CHECK-NEXT:  -     2.00   2.00    -      -     4.00    -      -     st4d	{ z0.d - z3.d }, p0, [x0, x0, lsl #3]
+# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4d	{ z0.d - z3.d }, p0, [x0]
+# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4d	{ z21.d - z24.d }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4d	{ z23.d - z26.d }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  -     2.00   2.00    -      -     4.00    -      -     st4d	{ z5.d - z8.d }, p3, [x17, x16, lsl #3]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z0.h - z3.h }, p0, [x0, x0, lsl #1]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z0.h - z3.h }, p0, [x0]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z21.h - z24.h }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z23.h - z26.h }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  -     8.50   8.50    -      -     16.00   -      -     st4h	{ z5.h - z8.h }, p3, [x17, x16, lsl #1]
+# CHECK-NEXT:  -     2.00   2.00    -      -     4.00    -      -     st4w	{ z0.s - z3.s }, p0, [x0, x0, lsl #2]
+# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4w	{ z0.s - z3.s }, p0, [x0]
+# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4w	{ z21.s - z24.s }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  -     2.50   2.50    -      -     4.00    -      -     st4w	{ z23.s - z26.s }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  -     2.00   2.00    -      -     4.00    -      -     st4w	{ z5.s - z8.s }, p3, [x17, x16, lsl #2]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1b	{ z0.b }, p0, [x0, x0]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1b	{ z0.b }, p0, [x0]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1b	{ z21.b }, p5, [x10, #7, mul vl]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1b	{ z23.b }, p3, [x13, #-8, mul vl]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1d	{ z0.d }, p0, [x0, x0, lsl #3]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1d	{ z0.d }, p0, [x0]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1d	{ z21.d }, p5, [x10, #7, mul vl]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1d	{ z23.d }, p3, [x13, #-8, mul vl]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1h	{ z0.h }, p0, [x0, x0, lsl #1]
 # CHECK-NEXT:  -     0.50   0.50    -      -     1.00    -      -     stnt1h	{ z0.h }, p0, [x0]
diff --git a/llvm/test/tools/llvm-mca/AArch64/Neoverse/N2-sve-instructions.s b/llvm/test/tools/llvm-mca/AArch64/Neoverse/N2-sve-instructions.s
index 062ac80bd718..5ba286f21ba6 100644
--- a/llvm/test/tools/llvm-mca/AArch64/Neoverse/N2-sve-instructions.s
+++ b/llvm/test/tools/llvm-mca/AArch64/Neoverse/N2-sve-instructions.s
@@ -4617,60 +4617,60 @@ zip2	z31.s, z31.s, z31.s
 # CHECK-NEXT:  2      9     0.50    *             U     ld2h	{ z0.h, z1.h }, p0/z, [x0, x0, lsl #1]
 # CHECK-NEXT:  2      8     0.50    *             U     ld2h	{ z0.h, z1.h }, p0/z, [x0]
 # CHECK-NEXT:  2      8     0.50    *             U     ld2h	{ z21.h, z22.h }, p5/z, [x10, #10, mul vl]
 # CHECK-NEXT:  2      8     0.50    *             U     ld2h	{ z23.h, z24.h }, p3/z, [x13, #-16, mul vl]
 # CHECK-NEXT:  2      9     0.50    *             U     ld2h	{ z5.h, z6.h }, p3/z, [x17, x16, lsl #1]
 # CHECK-NEXT:  2      9     0.50    *             U     ld2w	{ z0.s, z1.s }, p0/z, [x0, x0, lsl #2]
 # CHECK-NEXT:  2      8     0.50    *             U     ld2w	{ z0.s, z1.s }, p0/z, [x0]
 # CHECK-NEXT:  2      8     0.50    *             U     ld2w	{ z21.s, z22.s }, p5/z, [x10, #10, mul vl]
 # CHECK-NEXT:  2      8     0.50    *             U     ld2w	{ z23.s, z24.s }, p3/z, [x13, #-16, mul vl]
 # CHECK-NEXT:  2      9     0.50    *             U     ld2w	{ z5.s, z6.s }, p3/z, [x17, x16, lsl #2]
-# CHECK-NEXT:  3      10    0.67    *             U     ld3b	{ z0.b, z1.b, z2.b }, p0/z, [x0, x0]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3b	{ z0.b, z1.b, z2.b }, p0/z, [x0]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3b	{ z21.b, z22.b, z23.b }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3b	{ z23.b, z24.b, z25.b }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  3      10    0.67    *             U     ld3b	{ z5.b, z6.b, z7.b }, p3/z, [x17, x16]
-# CHECK-NEXT:  3      10    0.67    *             U     ld3d	{ z0.d, z1.d, z2.d }, p0/z, [x0, x0, lsl #3]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3d	{ z0.d, z1.d, z2.d }, p0/z, [x0]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3d	{ z21.d, z22.d, z23.d }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3d	{ z23.d, z24.d, z25.d }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  3      10    0.67    *             U     ld3d	{ z5.d, z6.d, z7.d }, p3/z, [x17, x16, lsl #3]
-# CHECK-NEXT:  3      10    0.67    *             U     ld3h	{ z0.h, z1.h, z2.h }, p0/z, [x0, x0, lsl #1]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3h	{ z0.h, z1.h, z2.h }, p0/z, [x0]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3h	{ z21.h, z22.h, z23.h }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3h	{ z23.h, z24.h, z25.h }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  3      10    0.67    *             U     ld3h	{ z5.h, z6.h, z7.h }, p3/z, [x17, x16, lsl #1]
-# CHECK-NEXT:  3      10    0.67    *             U     ld3w	{ z0.s, z1.s, z2.s }, p0/z, [x0, x0, lsl #2]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3w	{ z0.s, z1.s, z2.s }, p0/z, [x0]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3w	{ z21.s, z22.s, z23.s }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  2      9     0.50    *             U     ld3w	{ z23.s, z24.s, z25.s }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  3      10    0.67    *             U     ld3w	{ z5.s, z6.s, z7.s }, p3/z, [x17, x16, lsl #2]
-# CHECK-NEXT:  6      10    1.00    *             U     ld4b	{ z0.b, z1.b, z2.b, z3.b }, p0/z, [x0, x0]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4b	{ z0.b, z1.b, z2.b, z3.b }, p0/z, [x0]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4b	{ z21.b, z22.b, z23.b, z24.b }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4b	{ z23.b, z24.b, z25.b, z26.b }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  6      10    1.00    *             U     ld4b	{ z5.b, z6.b, z7.b, z8.b }, p3/z, [x17, x16]
-# CHECK-NEXT:  6      10    1.00    *             U     ld4d	{ z0.d, z1.d, z2.d, z3.d }, p0/z, [x0, x0, lsl #3]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4d	{ z0.d, z1.d, z2.d, z3.d }, p0/z, [x0]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4d	{ z21.d, z22.d, z23.d, z24.d }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4d	{ z23.d, z24.d, z25.d, z26.d }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  6      10    1.00    *             U     ld4d	{ z5.d, z6.d, z7.d, z8.d }, p3/z, [x17, x16, lsl #3]
-# CHECK-NEXT:  6      10    1.00    *             U     ld4h	{ z0.h, z1.h, z2.h, z3.h }, p0/z, [x0, x0, lsl #1]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4h	{ z0.h, z1.h, z2.h, z3.h }, p0/z, [x0]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4h	{ z21.h, z22.h, z23.h, z24.h }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4h	{ z23.h, z24.h, z25.h, z26.h }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  6      10    1.00    *             U     ld4h	{ z5.h, z6.h, z7.h, z8.h }, p3/z, [x17, x16, lsl #1]
-# CHECK-NEXT:  6      10    1.00    *             U     ld4w	{ z0.s, z1.s, z2.s, z3.s }, p0/z, [x0, x0, lsl #2]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4w	{ z0.s, z1.s, z2.s, z3.s }, p0/z, [x0]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4w	{ z21.s, z22.s, z23.s, z24.s }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  4      9     1.00    *             U     ld4w	{ z23.s, z24.s, z25.s, z26.s }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  6      10    1.00    *             U     ld4w	{ z5.s, z6.s, z7.s, z8.s }, p3/z, [x17, x16, lsl #2]
+# CHECK-NEXT:  3      10    0.67    *             U     ld3b	{ z0.b - z2.b }, p0/z, [x0, x0]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3b	{ z0.b - z2.b }, p0/z, [x0]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3b	{ z21.b - z23.b }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3b	{ z23.b - z25.b }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  3      10    0.67    *             U     ld3b	{ z5.b - z7.b }, p3/z, [x17, x16]
+# CHECK-NEXT:  3      10    0.67    *             U     ld3d	{ z0.d - z2.d }, p0/z, [x0, x0, lsl #3]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3d	{ z0.d - z2.d }, p0/z, [x0]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3d	{ z21.d - z23.d }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3d	{ z23.d - z25.d }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  3      10    0.67    *             U     ld3d	{ z5.d - z7.d }, p3/z, [x17, x16, lsl #3]
+# CHECK-NEXT:  3      10    0.67    *             U     ld3h	{ z0.h - z2.h }, p0/z, [x0, x0, lsl #1]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3h	{ z0.h - z2.h }, p0/z, [x0]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3h	{ z21.h - z23.h }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3h	{ z23.h - z25.h }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  3      10    0.67    *             U     ld3h	{ z5.h - z7.h }, p3/z, [x17, x16, lsl #1]
+# CHECK-NEXT:  3      10    0.67    *             U     ld3w	{ z0.s - z2.s }, p0/z, [x0, x0, lsl #2]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3w	{ z0.s - z2.s }, p0/z, [x0]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3w	{ z21.s - z23.s }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  2      9     0.50    *             U     ld3w	{ z23.s - z25.s }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  3      10    0.67    *             U     ld3w	{ z5.s - z7.s }, p3/z, [x17, x16, lsl #2]
+# CHECK-NEXT:  6      10    1.00    *             U     ld4b	{ z0.b - z3.b }, p0/z, [x0, x0]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4b	{ z0.b - z3.b }, p0/z, [x0]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4b	{ z21.b - z24.b }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4b	{ z23.b - z26.b }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  6      10    1.00    *             U     ld4b	{ z5.b - z8.b }, p3/z, [x17, x16]
+# CHECK-NEXT:  6      10    1.00    *             U     ld4d	{ z0.d - z3.d }, p0/z, [x0, x0, lsl #3]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4d	{ z0.d - z3.d }, p0/z, [x0]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4d	{ z21.d - z24.d }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4d	{ z23.d - z26.d }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  6      10    1.00    *             U     ld4d	{ z5.d - z8.d }, p3/z, [x17, x16, lsl #3]
+# CHECK-NEXT:  6      10    1.00    *             U     ld4h	{ z0.h - z3.h }, p0/z, [x0, x0, lsl #1]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4h	{ z0.h - z3.h }, p0/z, [x0]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4h	{ z21.h - z24.h }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4h	{ z23.h - z26.h }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  6      10    1.00    *             U     ld4h	{ z5.h - z8.h }, p3/z, [x17, x16, lsl #1]
+# CHECK-NEXT:  6      10    1.00    *             U     ld4w	{ z0.s - z3.s }, p0/z, [x0, x0, lsl #2]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4w	{ z0.s - z3.s }, p0/z, [x0]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4w	{ z21.s - z24.s }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  4      9     1.00    *             U     ld4w	{ z23.s - z26.s }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  6      10    1.00    *             U     ld4w	{ z5.s - z8.s }, p3/z, [x17, x16, lsl #2]
 # CHECK-NEXT:  2      6     0.50    *             U     ldff1b	{ z0.d }, p0/z, [x0, x0]
 # CHECK-NEXT:  4      9     1.00    *             U     ldff1b	{ z0.d }, p0/z, [z0.d]
 # CHECK-NEXT:  2      6     0.50    *             U     ldff1b	{ z0.h }, p0/z, [x0, x0]
 # CHECK-NEXT:  2      6     0.50    *             U     ldff1b	{ z0.s }, p0/z, [x0, x0]
 # CHECK-NEXT:  2      9     0.50    *             U     ldff1b	{ z0.s }, p0/z, [x0, z0.s, sxtw]
 # CHECK-NEXT:  2      9     0.50    *             U     ldff1b	{ z0.s }, p0/z, [x0, z0.s, uxtw]
 # CHECK-NEXT:  2      9     0.50    *             U     ldff1b	{ z0.s }, p0/z, [z0.s]
 # CHECK-NEXT:  4      9     1.00    *             U     ldff1b	{ z21.d }, p5/z, [x10, z21.d, sxtw]
 # CHECK-NEXT:  4      9     1.00    *             U     ldff1b	{ z21.d }, p5/z, [x10, z21.d, uxtw]
 # CHECK-NEXT:  2      6     0.50    *             U     ldff1b	{ z31.b }, p7/z, [sp]
@@ -6117,60 +6117,60 @@ zip2	z31.s, z31.s, z31.s
 # CHECK-NEXT:  3      4     0.50           *      U     st2h	{ z0.h, z1.h }, p0, [x0, x0, lsl #1]
 # CHECK-NEXT:  2      4     0.50           *      U     st2h	{ z0.h, z1.h }, p0, [x0]
 # CHECK-NEXT:  2      4     0.50           *      U     st2h	{ z21.h, z22.h }, p5, [x10, #10, mul vl]
 # CHECK-NEXT:  2      4     0.50           *      U     st2h	{ z23.h, z24.h }, p3, [x13, #-16, mul vl]
 # CHECK-NEXT:  3      4     0.50           *      U     st2h	{ z5.h, z6.h }, p3, [x17, x16, lsl #1]
 # CHECK-NEXT:  2      4     0.50           *      U     st2w	{ z0.s, z1.s }, p0, [x0, x0, lsl #2]
 # CHECK-NEXT:  2      4     0.50           *      U     st2w	{ z0.s, z1.s }, p0, [x0]
 # CHECK-NEXT:  2      4     0.50           *      U     st2w	{ z21.s, z22.s }, p5, [x10, #10, mul vl]
 # CHECK-NEXT:  2      4     0.50           *      U     st2w	{ z23.s, z24.s }, p3, [x13, #-16, mul vl]
 # CHECK-NEXT:  2      4     0.50           *      U     st2w	{ z5.s, z6.s }, p3, [x17, x16, lsl #2]
-# CHECK-NEXT:  15     7     2.50           *      U     st3b	{ z0.b, z1.b, z2.b }, p0, [x0, x0]
-# CHECK-NEXT:  10     7     2.50           *      U     st3b	{ z0.b, z1.b, z2.b }, p0, [x0]
-# CHECK-NEXT:  10     7     2.50           *      U     st3b	{ z21.b, z22.b, z23.b }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  10     7     2.50           *      U     st3b	{ z23.b, z24.b, z25.b }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  15     7     2.50           *      U     st3b	{ z5.b, z6.b, z7.b }, p3, [x17, x16]
-# CHECK-NEXT:  15     7     2.50           *      U     st3d	{ z0.d, z1.d, z2.d }, p0, [x0, x0, lsl #3]
-# CHECK-NEXT:  10     7     2.50           *      U     st3d	{ z0.d, z1.d, z2.d }, p0, [x0]
-# CHECK-NEXT:  10     7     2.50           *      U     st3d	{ z21.d, z22.d, z23.d }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  10     7     2.50           *      U     st3d	{ z23.d, z24.d, z25.d }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  15     7     2.50           *      U     st3d	{ z5.d, z6.d, z7.d }, p3, [x17, x16, lsl #3]
-# CHECK-NEXT:  15     7     2.50           *      U     st3h	{ z0.h, z1.h, z2.h }, p0, [x0, x0, lsl #1]
-# CHECK-NEXT:  10     7     2.50           *      U     st3h	{ z0.h, z1.h, z2.h }, p0, [x0]
-# CHECK-NEXT:  10     7     2.50           *      U     st3h	{ z21.h, z22.h, z23.h }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  10     7     2.50           *      U     st3h	{ z23.h, z24.h, z25.h }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  15     7     2.50           *      U     st3h	{ z5.h, z6.h, z7.h }, p3, [x17, x16, lsl #1]
-# CHECK-NEXT:  15     7     2.50           *      U     st3w	{ z0.s, z1.s, z2.s }, p0, [x0, x0, lsl #2]
-# CHECK-NEXT:  10     7     2.50           *      U     st3w	{ z0.s, z1.s, z2.s }, p0, [x0]
-# CHECK-NEXT:  10     7     2.50           *      U     st3w	{ z21.s, z22.s, z23.s }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  10     7     2.50           *      U     st3w	{ z23.s, z24.s, z25.s }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  15     7     2.50           *      U     st3w	{ z5.s, z6.s, z7.s }, p3, [x17, x16, lsl #2]
-# CHECK-NEXT:  27     11    4.50           *      U     st4b	{ z0.b, z1.b, z2.b, z3.b }, p0, [x0, x0]
-# CHECK-NEXT:  18     11    4.50           *      U     st4b	{ z0.b, z1.b, z2.b, z3.b }, p0, [x0]
-# CHECK-NEXT:  18     11    4.50           *      U     st4b	{ z21.b, z22.b, z23.b, z24.b }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  18     11    4.50           *      U     st4b	{ z23.b, z24.b, z25.b, z26.b }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  27     11    4.50           *      U     st4b	{ z5.b, z6.b, z7.b, z8.b }, p3, [x17, x16]
-# CHECK-NEXT:  27     11    4.50           *      U     st4d	{ z0.d, z1.d, z2.d, z3.d }, p0, [x0, x0, lsl #3]
-# CHECK-NEXT:  18     11    4.50           *      U     st4d	{ z0.d, z1.d, z2.d, z3.d }, p0, [x0]
-# CHECK-NEXT:  18     11    4.50           *      U     st4d	{ z21.d, z22.d, z23.d, z24.d }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  18     11    4.50           *      U     st4d	{ z23.d, z24.d, z25.d, z26.d }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  27     11    4.50           *      U     st4d	{ z5.d, z6.d, z7.d, z8.d }, p3, [x17, x16, lsl #3]
-# CHECK-NEXT:  27     11    4.50           *      U     st4h	{ z0.h, z1.h, z2.h, z3.h }, p0, [x0, x0, lsl #1]
-# CHECK-NEXT:  18     11    4.50           *      U     st4h	{ z0.h, z1.h, z2.h, z3.h }, p0, [x0]
-# CHECK-NEXT:  18     11    4.50           *      U     st4h	{ z21.h, z22.h, z23.h, z24.h }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  18     11    4.50           *      U     st4h	{ z23.h, z24.h, z25.h, z26.h }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  27     11    4.50           *      U     st4h	{ z5.h, z6.h, z7.h, z8.h }, p3, [x17, x16, lsl #1]
-# CHECK-NEXT:  27     11    4.50           *      U     st4w	{ z0.s, z1.s, z2.s, z3.s }, p0, [x0, x0, lsl #2]
-# CHECK-NEXT:  18     11    4.50           *      U     st4w	{ z0.s, z1.s, z2.s, z3.s }, p0, [x0]
-# CHECK-NEXT:  18     11    4.50           *      U     st4w	{ z21.s, z22.s, z23.s, z24.s }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  18     11    4.50           *      U     st4w	{ z23.s, z24.s, z25.s, z26.s }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  27     11    4.50           *      U     st4w	{ z5.s, z6.s, z7.s, z8.s }, p3, [x17, x16, lsl #2]
+# CHECK-NEXT:  15     7     2.50           *      U     st3b	{ z0.b - z2.b }, p0, [x0, x0]
+# CHECK-NEXT:  10     7     2.50           *      U     st3b	{ z0.b - z2.b }, p0, [x0]
+# CHECK-NEXT:  10     7     2.50           *      U     st3b	{ z21.b - z23.b }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  10     7     2.50           *      U     st3b	{ z23.b - z25.b }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  15     7     2.50           *      U     st3b	{ z5.b - z7.b }, p3, [x17, x16]
+# CHECK-NEXT:  15     7     2.50           *      U     st3d	{ z0.d - z2.d }, p0, [x0, x0, lsl #3]
+# CHECK-NEXT:  10     7     2.50           *      U     st3d	{ z0.d - z2.d }, p0, [x0]
+# CHECK-NEXT:  10     7     2.50           *      U     st3d	{ z21.d - z23.d }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  10     7     2.50           *      U     st3d	{ z23.d - z25.d }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  15     7     2.50           *      U     st3d	{ z5.d - z7.d }, p3, [x17, x16, lsl #3]
+# CHECK-NEXT:  15     7     2.50           *      U     st3h	{ z0.h - z2.h }, p0, [x0, x0, lsl #1]
+# CHECK-NEXT:  10     7     2.50           *      U     st3h	{ z0.h - z2.h }, p0, [x0]
+# CHECK-NEXT:  10     7     2.50           *      U     st3h	{ z21.h - z23.h }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  10     7     2.50           *      U     st3h	{ z23.h - z25.h }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  15     7     2.50           *      U     st3h	{ z5.h - z7.h }, p3, [x17, x16, lsl #1]
+# CHECK-NEXT:  15     7     2.50           *      U     st3w	{ z0.s - z2.s }, p0, [x0, x0, lsl #2]
+# CHECK-NEXT:  10     7     2.50           *      U     st3w	{ z0.s - z2.s }, p0, [x0]
+# CHECK-NEXT:  10     7     2.50           *      U     st3w	{ z21.s - z23.s }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  10     7     2.50           *      U     st3w	{ z23.s - z25.s }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  15     7     2.50           *      U     st3w	{ z5.s - z7.s }, p3, [x17, x16, lsl #2]
+# CHECK-NEXT:  27     11    4.50           *      U     st4b	{ z0.b - z3.b }, p0, [x0, x0]
+# CHECK-NEXT:  18     11    4.50           *      U     st4b	{ z0.b - z3.b }, p0, [x0]
+# CHECK-NEXT:  18     11    4.50           *      U     st4b	{ z21.b - z24.b }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  18     11    4.50           *      U     st4b	{ z23.b - z26.b }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  27     11    4.50           *      U     st4b	{ z5.b - z8.b }, p3, [x17, x16]
+# CHECK-NEXT:  27     11    4.50           *      U     st4d	{ z0.d - z3.d }, p0, [x0, x0, lsl #3]
+# CHECK-NEXT:  18     11    4.50           *      U     st4d	{ z0.d - z3.d }, p0, [x0]
+# CHECK-NEXT:  18     11    4.50           *      U     st4d	{ z21.d - z24.d }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  18     11    4.50           *      U     st4d	{ z23.d - z26.d }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  27     11    4.50           *      U     st4d	{ z5.d - z8.d }, p3, [x17, x16, lsl #3]
+# CHECK-NEXT:  27     11    4.50           *      U     st4h	{ z0.h - z3.h }, p0, [x0, x0, lsl #1]
+# CHECK-NEXT:  18     11    4.50           *      U     st4h	{ z0.h - z3.h }, p0, [x0]
+# CHECK-NEXT:  18     11    4.50           *      U     st4h	{ z21.h - z24.h }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  18     11    4.50           *      U     st4h	{ z23.h - z26.h }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  27     11    4.50           *      U     st4h	{ z5.h - z8.h }, p3, [x17, x16, lsl #1]
+# CHECK-NEXT:  27     11    4.50           *      U     st4w	{ z0.s - z3.s }, p0, [x0, x0, lsl #2]
+# CHECK-NEXT:  18     11    4.50           *      U     st4w	{ z0.s - z3.s }, p0, [x0]
+# CHECK-NEXT:  18     11    4.50           *      U     st4w	{ z21.s - z24.s }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  18     11    4.50           *      U     st4w	{ z23.s - z26.s }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  27     11    4.50           *      U     st4w	{ z5.s - z8.s }, p3, [x17, x16, lsl #2]
 # CHECK-NEXT:  2      2     0.50           *            stnt1b	{ z0.b }, p0, [x0, x0]
 # CHECK-NEXT:  2      2     0.50           *            stnt1b	{ z0.b }, p0, [x0]
 # CHECK-NEXT:  2      2     0.50           *            stnt1b	{ z0.d }, p0, [z1.d]
 # CHECK-NEXT:  4      4     1.00           *            stnt1b	{ z0.s }, p0, [z1.s]
 # CHECK-NEXT:  2      2     0.50           *            stnt1b	{ z21.b }, p5, [x10, #7, mul vl]
 # CHECK-NEXT:  2      2     0.50           *            stnt1b	{ z23.b }, p3, [x13, #-8, mul vl]
 # CHECK-NEXT:  2      2     0.50           *            stnt1b	{ z31.d }, p7, [z31.d, x0]
 # CHECK-NEXT:  2      2     0.50           *            stnt1b	{ z31.d }, p7, [z31.d]
 # CHECK-NEXT:  4      4     1.00           *            stnt1b	{ z31.s }, p7, [z31.s, x0]
 # CHECK-NEXT:  4      4     1.00           *            stnt1b	{ z31.s }, p7, [z31.s]
@@ -8048,60 +8048,60 @@ zip2	z31.s, z31.s, z31.s
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2h	{ z0.h, z1.h }, p0/z, [x0, x0, lsl #1]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2h	{ z0.h, z1.h }, p0/z, [x0]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2h	{ z21.h, z22.h }, p5/z, [x10, #10, mul vl]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2h	{ z23.h, z24.h }, p3/z, [x13, #-16, mul vl]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2h	{ z5.h, z6.h }, p3/z, [x17, x16, lsl #1]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2w	{ z0.s, z1.s }, p0/z, [x0, x0, lsl #2]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2w	{ z0.s, z1.s }, p0/z, [x0]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2w	{ z21.s, z22.s }, p5/z, [x10, #10, mul vl]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2w	{ z23.s, z24.s }, p3/z, [x13, #-16, mul vl]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld2w	{ z5.s, z6.s }, p3/z, [x17, x16, lsl #2]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3b	{ z0.b, z1.b, z2.b }, p0/z, [x0, x0]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3b	{ z0.b, z1.b, z2.b }, p0/z, [x0]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3b	{ z21.b, z22.b, z23.b }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3b	{ z23.b, z24.b, z25.b }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3b	{ z5.b, z6.b, z7.b }, p3/z, [x17, x16]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3d	{ z0.d, z1.d, z2.d }, p0/z, [x0, x0, lsl #3]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3d	{ z0.d, z1.d, z2.d }, p0/z, [x0]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3d	{ z21.d, z22.d, z23.d }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3d	{ z23.d, z24.d, z25.d }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3d	{ z5.d, z6.d, z7.d }, p3/z, [x17, x16, lsl #3]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3h	{ z0.h, z1.h, z2.h }, p0/z, [x0, x0, lsl #1]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3h	{ z0.h, z1.h, z2.h }, p0/z, [x0]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3h	{ z21.h, z22.h, z23.h }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3h	{ z23.h, z24.h, z25.h }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3h	{ z5.h, z6.h, z7.h }, p3/z, [x17, x16, lsl #1]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3w	{ z0.s, z1.s, z2.s }, p0/z, [x0, x0, lsl #2]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3w	{ z0.s, z1.s, z2.s }, p0/z, [x0]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3w	{ z21.s, z22.s, z23.s }, p5/z, [x10, #15, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3w	{ z23.s, z24.s, z25.s }, p3/z, [x13, #-24, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3w	{ z5.s, z6.s, z7.s }, p3/z, [x17, x16, lsl #2]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4b	{ z0.b, z1.b, z2.b, z3.b }, p0/z, [x0, x0]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4b	{ z0.b, z1.b, z2.b, z3.b }, p0/z, [x0]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4b	{ z21.b, z22.b, z23.b, z24.b }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4b	{ z23.b, z24.b, z25.b, z26.b }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4b	{ z5.b, z6.b, z7.b, z8.b }, p3/z, [x17, x16]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4d	{ z0.d, z1.d, z2.d, z3.d }, p0/z, [x0, x0, lsl #3]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4d	{ z0.d, z1.d, z2.d, z3.d }, p0/z, [x0]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4d	{ z21.d, z22.d, z23.d, z24.d }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4d	{ z23.d, z24.d, z25.d, z26.d }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4d	{ z5.d, z6.d, z7.d, z8.d }, p3/z, [x17, x16, lsl #3]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4h	{ z0.h, z1.h, z2.h, z3.h }, p0/z, [x0, x0, lsl #1]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4h	{ z0.h, z1.h, z2.h, z3.h }, p0/z, [x0]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4h	{ z21.h, z22.h, z23.h, z24.h }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4h	{ z23.h, z24.h, z25.h, z26.h }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4h	{ z5.h, z6.h, z7.h, z8.h }, p3/z, [x17, x16, lsl #1]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4w	{ z0.s, z1.s, z2.s, z3.s }, p0/z, [x0, x0, lsl #2]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4w	{ z0.s, z1.s, z2.s, z3.s }, p0/z, [x0]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4w	{ z21.s, z22.s, z23.s, z24.s }, p5/z, [x10, #20, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4w	{ z23.s, z24.s, z25.s, z26.s }, p3/z, [x13, #-32, mul vl]
-# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4w	{ z5.s, z6.s, z7.s, z8.s }, p3/z, [x17, x16, lsl #2]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3b	{ z0.b - z2.b }, p0/z, [x0, x0]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3b	{ z0.b - z2.b }, p0/z, [x0]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3b	{ z21.b - z23.b }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3b	{ z23.b - z25.b }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3b	{ z5.b - z7.b }, p3/z, [x17, x16]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3d	{ z0.d - z2.d }, p0/z, [x0, x0, lsl #3]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3d	{ z0.d - z2.d }, p0/z, [x0]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3d	{ z21.d - z23.d }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3d	{ z23.d - z25.d }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3d	{ z5.d - z7.d }, p3/z, [x17, x16, lsl #3]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3h	{ z0.h - z2.h }, p0/z, [x0, x0, lsl #1]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3h	{ z0.h - z2.h }, p0/z, [x0]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3h	{ z21.h - z23.h }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3h	{ z23.h - z25.h }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3h	{ z5.h - z7.h }, p3/z, [x17, x16, lsl #1]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3w	{ z0.s - z2.s }, p0/z, [x0, x0, lsl #2]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3w	{ z0.s - z2.s }, p0/z, [x0]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3w	{ z21.s - z23.s }, p5/z, [x10, #15, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ld3w	{ z23.s - z25.s }, p3/z, [x13, #-24, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     0.50   0.50   ld3w	{ z5.s - z7.s }, p3/z, [x17, x16, lsl #2]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4b	{ z0.b - z3.b }, p0/z, [x0, x0]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4b	{ z0.b - z3.b }, p0/z, [x0]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4b	{ z21.b - z24.b }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4b	{ z23.b - z26.b }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4b	{ z5.b - z8.b }, p3/z, [x17, x16]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4d	{ z0.d - z3.d }, p0/z, [x0, x0, lsl #3]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4d	{ z0.d - z3.d }, p0/z, [x0]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4d	{ z21.d - z24.d }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4d	{ z23.d - z26.d }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4d	{ z5.d - z8.d }, p3/z, [x17, x16, lsl #3]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4h	{ z0.h - z3.h }, p0/z, [x0, x0, lsl #1]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4h	{ z0.h - z3.h }, p0/z, [x0]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4h	{ z21.h - z24.h }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4h	{ z23.h - z26.h }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4h	{ z5.h - z8.h }, p3/z, [x17, x16, lsl #1]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4w	{ z0.s - z3.s }, p0/z, [x0, x0, lsl #2]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4w	{ z0.s - z3.s }, p0/z, [x0]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4w	{ z21.s - z24.s }, p5/z, [x10, #20, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ld4w	{ z23.s - z26.s }, p3/z, [x13, #-32, mul vl]
+# CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -     1.00   1.00   1.00   1.00   ld4w	{ z5.s - z8.s }, p3/z, [x17, x16, lsl #2]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -     0.50   0.50    -      -     ldff1b	{ z0.d }, p0/z, [x0, x0]
 # CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ldff1b	{ z0.d }, p0/z, [z0.d]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -     0.50   0.50    -      -     ldff1b	{ z0.h }, p0/z, [x0, x0]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -     0.50   0.50    -      -     ldff1b	{ z0.s }, p0/z, [x0, x0]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ldff1b	{ z0.s }, p0/z, [x0, z0.s, sxtw]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ldff1b	{ z0.s }, p0/z, [x0, z0.s, uxtw]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -      -      -     0.50   0.50   ldff1b	{ z0.s }, p0/z, [z0.s]
 # CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ldff1b	{ z21.d }, p5/z, [x10, z21.d, sxtw]
 # CHECK-NEXT:  -      -      -      -     0.67   0.67   0.67    -      -      -      -     1.00   1.00   ldff1b	{ z21.d }, p5/z, [x10, z21.d, uxtw]
 # CHECK-NEXT:  -      -      -      -     0.33   0.33   0.33    -      -     0.50   0.50    -      -     ldff1b	{ z31.b }, p7/z, [sp]
@@ -9548,60 +9548,60 @@ zip2	z31.s, z31.s, z31.s
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -     0.50   0.50   0.50   0.50   st2h	{ z0.h, z1.h }, p0, [x0, x0, lsl #1]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   st2h	{ z0.h, z1.h }, p0, [x0]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   st2h	{ z21.h, z22.h }, p5, [x10, #10, mul vl]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   st2h	{ z23.h, z24.h }, p3, [x13, #-16, mul vl]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -     0.50   0.50   0.50   0.50   st2h	{ z5.h, z6.h }, p3, [x17, x16, lsl #1]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   st2w	{ z0.s, z1.s }, p0, [x0, x0, lsl #2]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   st2w	{ z0.s, z1.s }, p0, [x0]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   st2w	{ z21.s, z22.s }, p5, [x10, #10, mul vl]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   st2w	{ z23.s, z24.s }, p3, [x13, #-16, mul vl]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   st2w	{ z5.s, z6.s }, p3, [x17, x16, lsl #2]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3b	{ z0.b, z1.b, z2.b }, p0, [x0, x0]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3b	{ z0.b, z1.b, z2.b }, p0, [x0]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3b	{ z21.b, z22.b, z23.b }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3b	{ z23.b, z24.b, z25.b }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3b	{ z5.b, z6.b, z7.b }, p3, [x17, x16]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3d	{ z0.d, z1.d, z2.d }, p0, [x0, x0, lsl #3]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3d	{ z0.d, z1.d, z2.d }, p0, [x0]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3d	{ z21.d, z22.d, z23.d }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3d	{ z23.d, z24.d, z25.d }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3d	{ z5.d, z6.d, z7.d }, p3, [x17, x16, lsl #3]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3h	{ z0.h, z1.h, z2.h }, p0, [x0, x0, lsl #1]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3h	{ z0.h, z1.h, z2.h }, p0, [x0]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3h	{ z21.h, z22.h, z23.h }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3h	{ z23.h, z24.h, z25.h }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3h	{ z5.h, z6.h, z7.h }, p3, [x17, x16, lsl #1]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3w	{ z0.s, z1.s, z2.s }, p0, [x0, x0, lsl #2]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3w	{ z0.s, z1.s, z2.s }, p0, [x0]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3w	{ z21.s, z22.s, z23.s }, p5, [x10, #15, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3w	{ z23.s, z24.s, z25.s }, p3, [x13, #-24, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3w	{ z5.s, z6.s, z7.s }, p3, [x17, x16, lsl #2]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4b	{ z0.b, z1.b, z2.b, z3.b }, p0, [x0, x0]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4b	{ z0.b, z1.b, z2.b, z3.b }, p0, [x0]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4b	{ z21.b, z22.b, z23.b, z24.b }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4b	{ z23.b, z24.b, z25.b, z26.b }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4b	{ z5.b, z6.b, z7.b, z8.b }, p3, [x17, x16]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4d	{ z0.d, z1.d, z2.d, z3.d }, p0, [x0, x0, lsl #3]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4d	{ z0.d, z1.d, z2.d, z3.d }, p0, [x0]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4d	{ z21.d, z22.d, z23.d, z24.d }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4d	{ z23.d, z24.d, z25.d, z26.d }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4d	{ z5.d, z6.d, z7.d, z8.d }, p3, [x17, x16, lsl #3]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4h	{ z0.h, z1.h, z2.h, z3.h }, p0, [x0, x0, lsl #1]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4h	{ z0.h, z1.h, z2.h, z3.h }, p0, [x0]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4h	{ z21.h, z22.h, z23.h, z24.h }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4h	{ z23.h, z24.h, z25.h, z26.h }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4h	{ z5.h, z6.h, z7.h, z8.h }, p3, [x17, x16, lsl #1]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4w	{ z0.s, z1.s, z2.s, z3.s }, p0, [x0, x0, lsl #2]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4w	{ z0.s, z1.s, z2.s, z3.s }, p0, [x0]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4w	{ z21.s, z22.s, z23.s, z24.s }, p5, [x10, #20, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4w	{ z23.s, z24.s, z25.s, z26.s }, p3, [x13, #-32, mul vl]
-# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4w	{ z5.s, z6.s, z7.s, z8.s }, p3, [x17, x16, lsl #2]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3b	{ z0.b - z2.b }, p0, [x0, x0]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3b	{ z0.b - z2.b }, p0, [x0]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3b	{ z21.b - z23.b }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3b	{ z23.b - z25.b }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3b	{ z5.b - z7.b }, p3, [x17, x16]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3d	{ z0.d - z2.d }, p0, [x0, x0, lsl #3]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3d	{ z0.d - z2.d }, p0, [x0]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3d	{ z21.d - z23.d }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3d	{ z23.d - z25.d }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3d	{ z5.d - z7.d }, p3, [x17, x16, lsl #3]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3h	{ z0.h - z2.h }, p0, [x0, x0, lsl #1]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3h	{ z0.h - z2.h }, p0, [x0]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3h	{ z21.h - z23.h }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3h	{ z23.h - z25.h }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3h	{ z5.h - z7.h }, p3, [x17, x16, lsl #1]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3w	{ z0.s - z2.s }, p0, [x0, x0, lsl #2]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3w	{ z0.s - z2.s }, p0, [x0]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3w	{ z21.s - z23.s }, p5, [x10, #15, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -      -      -     2.50   2.50   st3w	{ z23.s - z25.s }, p3, [x13, #-24, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     2.50   2.50    -      -     2.50   2.50   2.50   2.50   st3w	{ z5.s - z7.s }, p3, [x17, x16, lsl #2]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4b	{ z0.b - z3.b }, p0, [x0, x0]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4b	{ z0.b - z3.b }, p0, [x0]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4b	{ z21.b - z24.b }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4b	{ z23.b - z26.b }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4b	{ z5.b - z8.b }, p3, [x17, x16]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4d	{ z0.d - z3.d }, p0, [x0, x0, lsl #3]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4d	{ z0.d - z3.d }, p0, [x0]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4d	{ z21.d - z24.d }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4d	{ z23.d - z26.d }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4d	{ z5.d - z8.d }, p3, [x17, x16, lsl #3]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4h	{ z0.h - z3.h }, p0, [x0, x0, lsl #1]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4h	{ z0.h - z3.h }, p0, [x0]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4h	{ z21.h - z24.h }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4h	{ z23.h - z26.h }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4h	{ z5.h - z8.h }, p3, [x17, x16, lsl #1]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4w	{ z0.s - z3.s }, p0, [x0, x0, lsl #2]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4w	{ z0.s - z3.s }, p0, [x0]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4w	{ z21.s - z24.s }, p5, [x10, #20, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -      -      -     4.50   4.50   st4w	{ z23.s - z26.s }, p3, [x13, #-32, mul vl]
+# CHECK-NEXT:  -      -      -      -      -     4.50   4.50    -      -     4.50   4.50   4.50   4.50   st4w	{ z5.s - z8.s }, p3, [x17, x16, lsl #2]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   stnt1b	{ z0.b }, p0, [x0, x0]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   stnt1b	{ z0.b }, p0, [x0]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   stnt1b	{ z0.d }, p0, [z1.d]
 # CHECK-NEXT:  -      -      -      -      -     1.00   1.00    -      -      -      -     1.00   1.00   stnt1b	{ z0.s }, p0, [z1.s]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   stnt1b	{ z21.b }, p5, [x10, #7, mul vl]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   stnt1b	{ z23.b }, p3, [x13, #-8, mul vl]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   stnt1b	{ z31.d }, p7, [z31.d, x0]
 # CHECK-NEXT:  -      -      -      -      -     0.50   0.50    -      -      -      -     0.50   0.50   stnt1b	{ z31.d }, p7, [z31.d]
 # CHECK-NEXT:  -      -      -      -      -     1.00   1.00    -      -      -      -     1.00   1.00   stnt1b	{ z31.s }, p7, [z31.s, x0]
 # CHECK-NEXT:  -      -      -      -      -     1.00   1.00    -      -      -      -     1.00   1.00   stnt1b	{ z31.s }, p7, [z31.s]
diff --git a/llvm/test/tools/llvm-mca/X86/Znver1/resources-avx1.s b/llvm/test/tools/llvm-mca/X86/Znver1/resources-avx1.s
index 27d18c2a7c47..47f86d072125 100644
--- a/llvm/test/tools/llvm-mca/X86/Znver1/resources-avx1.s
+++ b/llvm/test/tools/llvm-mca/X86/Znver1/resources-avx1.s
@@ -1558,37 +1558,37 @@ vzeroupper
 # CHECK-NEXT:  1      8     0.50    *                   vpshuflw	$1, (%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsignb	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   vpsignb	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsignd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   vpsignd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsignw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   vpsignw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpslld	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpslld	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpslld	(%rax), %xmm1, %xmm2
-# CHECK-NEXT:  1      1     1.00                        vpslldq	$1, %xmm1, %xmm2
+# CHECK-NEXT:  1      1     0.25                        vpslldq	$1, %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsllq	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsllq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsllq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsllw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsllw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsllw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrad	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrad	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrad	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsraw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsraw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsraw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrld	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrld	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrld	(%rax), %xmm1, %xmm2
-# CHECK-NEXT:  1      1     1.00                        vpsrldq	$1, %xmm1, %xmm2
+# CHECK-NEXT:  1      1     0.25                        vpsrldq	$1, %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlq	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrlq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrlw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsubb	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   vpsubb	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsubd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   vpsubd	(%rax), %xmm1, %xmm2
@@ -1731,21 +1731,21 @@ vzeroupper
 # CHECK-NEXT: [5]   - ZnALU3
 # CHECK-NEXT: [6]   - ZnDivider
 # CHECK-NEXT: [7]   - ZnFPU0
 # CHECK-NEXT: [8]   - ZnFPU1
 # CHECK-NEXT: [9]   - ZnFPU2
 # CHECK-NEXT: [10]  - ZnFPU3
 # CHECK-NEXT: [11]  - ZnMultiplier
 
 # CHECK:      Resource pressure per iteration:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]
-# CHECK-NEXT: 175.00 175.00  -      -      -      -      -     153.58 191.58 218.75 321.08  -
+# CHECK-NEXT: 175.00 175.00  -      -      -      -      -     154.08 192.08 217.25 321.58  -
 
 # CHECK:      Resource pressure by instruction:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   Instructions:
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     0.50   0.50    -     vaddpd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     0.50   0.50    -     vaddpd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00   1.00    -     vaddpd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00   1.00    -     vaddpd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     0.50   0.50    -     vaddps	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     0.50   0.50    -     vaddps	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00   1.00    -     vaddps	%ymm0, %ymm1, %ymm2
@@ -2270,37 +2270,37 @@ vzeroupper
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpshuflw	$1, (%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignb	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignb	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpslld	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpslld	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     vpslld	(%rax), %xmm1, %xmm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpslldq	$1, %xmm1, %xmm2
+# CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpslldq	$1, %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllq	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     vpsllq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     vpsllw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrad	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrad	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     vpsrad	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsraw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsraw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     vpsraw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrld	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrld	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     vpsrld	(%rax), %xmm1, %xmm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrldq	$1, %xmm1, %xmm2
+# CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsrldq	$1, %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlq	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     vpsrlq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     vpsrlw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsubb	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsubb	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsubd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsubd	(%rax), %xmm1, %xmm2
diff --git a/llvm/test/tools/llvm-mca/X86/Znver1/resources-avx2.s b/llvm/test/tools/llvm-mca/X86/Znver1/resources-avx2.s
index c77fe3cbad66..ffd0102beda8 100644
--- a/llvm/test/tools/llvm-mca/X86/Znver1/resources-avx2.s
+++ b/llvm/test/tools/llvm-mca/X86/Znver1/resources-avx2.s
@@ -677,21 +677,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      8     0.50    *                   vpshuflw	$1, (%rax), %ymm2
 # CHECK-NEXT:  2      1     0.50                        vpsignb	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      8     0.50    *                   vpsignb	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  2      1     0.50                        vpsignd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      8     0.50    *                   vpsignd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  2      1     0.50                        vpsignw	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      8     0.50    *                   vpsignw	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpslld	$1, %ymm0, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpslld	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      8     2.00    *                   vpslld	(%rax), %ymm1, %ymm2
-# CHECK-NEXT:  1      2     1.00                        vpslldq	$1, %ymm1, %ymm2
+# CHECK-NEXT:  1      1     0.25                        vpslldq	$1, %ymm1, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpsllq	$1, %ymm0, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpsllq	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      8     2.00    *                   vpsllq	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsllvd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsllvd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  2      3     4.00                        vpsllvd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      10    4.00    *                   vpsllvd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsllvq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsllvq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  2      3     4.00                        vpsllvq	%ymm0, %ymm1, %ymm2
@@ -705,21 +705,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsravd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsravd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  2      3     4.00                        vpsravd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      10    4.00    *                   vpsravd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpsraw	$1, %ymm0, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpsraw	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      8     2.00    *                   vpsraw	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpsrld	$1, %ymm0, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpsrld	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      8     2.00    *                   vpsrld	(%rax), %ymm1, %ymm2
-# CHECK-NEXT:  1      2     1.00                        vpsrldq	$1, %ymm1, %ymm2
+# CHECK-NEXT:  1      1     0.25                        vpsrldq	$1, %ymm1, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpsrlq	$1, %ymm0, %ymm2
 # CHECK-NEXT:  2      1     2.00                        vpsrlq	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      8     2.00    *                   vpsrlq	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsrlvd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsrlvd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  2      3     4.00                        vpsrlvd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  2      10    4.00    *                   vpsrlvd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsrlvq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsrlvq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  2      3     4.00                        vpsrlvq	%ymm0, %ymm1, %ymm2
@@ -771,21 +771,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT: [5]   - ZnALU3
 # CHECK-NEXT: [6]   - ZnDivider
 # CHECK-NEXT: [7]   - ZnFPU0
 # CHECK-NEXT: [8]   - ZnFPU1
 # CHECK-NEXT: [9]   - ZnFPU2
 # CHECK-NEXT: [10]  - ZnFPU3
 # CHECK-NEXT: [11]  - ZnMultiplier
 
 # CHECK:      Resource pressure per iteration:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]
-# CHECK-NEXT: 67.00  67.00   -      -      -      -      -     116.67 183.17 164.50 64.67   -
+# CHECK-NEXT: 67.00  67.00   -      -      -      -      -     117.17 183.67 163.00 65.17   -
 
 # CHECK:      Resource pressure by instruction:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   Instructions:
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vbroadcasti128	(%rax), %ymm0
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vbroadcastsd	%xmm0, %ymm0
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vbroadcastss	%xmm0, %ymm0
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vextracti128	$1, %ymm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -      -      -      -     vextracti128	$1, %ymm0, (%rax)
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -      -      -     vgatherdpd	%xmm0, (%rax,%xmm1,2), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -      -      -     vgatherdpd	%ymm0, (%rax,%xmm1,2), %ymm2
@@ -999,21 +999,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpshuflw	$1, (%rax), %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.50   0.50   0.50   0.50    -     vpsignb	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.50   0.50   0.50   0.50    -     vpsignb	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.50   0.50   0.50   0.50    -     vpsignd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.50   0.50   0.50   0.50    -     vpsignd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.50   0.50   0.50   0.50    -     vpsignw	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.50   0.50   0.50   0.50    -     vpsignw	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpslld	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpslld	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     2.00    -      -     vpslld	(%rax), %ymm1, %ymm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpslldq	$1, %ymm1, %ymm2
+# CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpslldq	$1, %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpsllq	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpsllq	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     2.00    -      -     vpsllq	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     2.00    -      -      -     vpsllvd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -     2.00    -      -      -     vpsllvd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     4.00    -      -      -     vpsllvd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -     4.00    -      -      -     vpsllvd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     2.00    -      -      -     vpsllvq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -     2.00    -      -      -     vpsllvq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     4.00    -      -      -     vpsllvq	%ymm0, %ymm1, %ymm2
@@ -1027,21 +1027,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     2.00    -      -      -     vpsravd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -     2.00    -      -      -     vpsravd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     4.00    -      -      -     vpsravd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -     4.00    -      -      -     vpsravd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpsraw	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpsraw	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     2.00    -      -     vpsraw	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpsrld	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpsrld	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     2.00    -      -     vpsrld	(%rax), %ymm1, %ymm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrldq	$1, %ymm1, %ymm2
+# CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsrldq	$1, %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpsrlq	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -     vpsrlq	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     2.00    -      -     vpsrlq	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     2.00    -      -      -     vpsrlvd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -     2.00    -      -      -     vpsrlvd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     4.00    -      -      -     vpsrlvd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -     4.00    -      -      -     vpsrlvd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     2.00    -      -      -     vpsrlvq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -     2.00    -      -      -     vpsrlvq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     4.00    -      -      -     vpsrlvq	%ymm0, %ymm1, %ymm2
diff --git a/llvm/test/tools/llvm-mca/X86/Znver1/resources-sse2.s b/llvm/test/tools/llvm-mca/X86/Znver1/resources-sse2.s
index 188f74653a9e..7b2c3e12da74 100644
--- a/llvm/test/tools/llvm-mca/X86/Znver1/resources-sse2.s
+++ b/llvm/test/tools/llvm-mca/X86/Znver1/resources-sse2.s
@@ -590,37 +590,37 @@ xorpd       (%rax), %xmm2
 # CHECK-NEXT:  1      10    1.00    *                   psadbw	(%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        pshufd	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   pshufd	$1, (%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        pshufhw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   pshufhw	$1, (%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        pshuflw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   pshuflw	$1, (%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        pslld	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        pslld	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   pslld	(%rax), %xmm2
-# CHECK-NEXT:  1      1     1.00                        pslldq	$1, %xmm2
+# CHECK-NEXT:  1      1     0.25                        pslldq	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psllq	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psllq	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psllq	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psllw	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psllw	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psllw	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrad	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrad	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psrad	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psraw	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psraw	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psraw	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrld	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrld	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psrld	(%rax), %xmm2
-# CHECK-NEXT:  1      1     1.00                        psrldq	$1, %xmm2
+# CHECK-NEXT:  1      1     0.25                        psrldq	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrlq	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrlq	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psrlq	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrlw	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrlw	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psrlw	(%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        psubb	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   psubb	(%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        psubd	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.50    *                   psubd	(%rax), %xmm2
@@ -684,21 +684,21 @@ xorpd       (%rax), %xmm2
 # CHECK-NEXT: [5]   - ZnALU3
 # CHECK-NEXT: [6]   - ZnDivider
 # CHECK-NEXT: [7]   - ZnFPU0
 # CHECK-NEXT: [8]   - ZnFPU1
 # CHECK-NEXT: [9]   - ZnFPU2
 # CHECK-NEXT: [10]  - ZnFPU3
 # CHECK-NEXT: [11]  - ZnMultiplier
 
 # CHECK:      Resource pressure per iteration:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]
-# CHECK-NEXT: 66.50  66.50   -      -      -      -      -     54.92  46.42  85.75  123.92  -
+# CHECK-NEXT: 66.50  66.50   -      -      -      -      -     55.42  46.92  84.25  124.42  -
 
 # CHECK:      Resource pressure by instruction:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   Instructions:
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     0.50   0.50    -     addpd	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     0.50   0.50    -     addpd	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     0.50   0.50    -     addsd	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     0.50   0.50    -     addsd	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     andnpd	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     andnpd	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     andpd	%xmm0, %xmm2
@@ -878,37 +878,37 @@ xorpd       (%rax), %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     1.00    -      -      -      -     psadbw	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshufd	$1, %xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshufd	$1, (%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshufhw	$1, %xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshufhw	$1, (%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshuflw	$1, %xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshuflw	$1, (%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     pslld	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     pslld	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     pslld	(%rax), %xmm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     pslldq	$1, %xmm2
+# CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     pslldq	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psllq	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psllq	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     psllq	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psllw	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psllw	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     psllw	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrad	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrad	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     psrad	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psraw	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psraw	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     psraw	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrld	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrld	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     psrld	(%rax), %xmm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrldq	$1, %xmm2
+# CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     psrldq	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrlq	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrlq	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     psrlq	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrlw	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     1.00    -      -     psrlw	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -      -      -     1.00    -      -     psrlw	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     psubb	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     psubb	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     psubd	%xmm0, %xmm2
 # CHECK-NEXT: 0.50   0.50    -      -      -      -      -     0.25   0.25   0.25   0.25    -     psubd	(%rax), %xmm2
diff --git a/llvm/test/tools/llvm-mca/X86/Znver2/resources-avx1.s b/llvm/test/tools/llvm-mca/X86/Znver2/resources-avx1.s
index 03401ab2f1f9..b171030c318f 100644
--- a/llvm/test/tools/llvm-mca/X86/Znver2/resources-avx1.s
+++ b/llvm/test/tools/llvm-mca/X86/Znver2/resources-avx1.s
@@ -1558,37 +1558,37 @@ vzeroupper
 # CHECK-NEXT:  1      8     0.33    *                   vpshuflw	$1, (%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsignb	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   vpsignb	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsignd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   vpsignd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsignw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   vpsignw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpslld	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpslld	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpslld	(%rax), %xmm1, %xmm2
-# CHECK-NEXT:  1      3     1.00                        vpslldq	$1, %xmm1, %xmm2
+# CHECK-NEXT:  1      1     0.25                        vpslldq	$1, %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsllq	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsllq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsllq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsllw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsllw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsllw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrad	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrad	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrad	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsraw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsraw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsraw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrld	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrld	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrld	(%rax), %xmm1, %xmm2
-# CHECK-NEXT:  1      3     1.00                        vpsrldq	$1, %xmm1, %xmm2
+# CHECK-NEXT:  1      1     0.25                        vpsrldq	$1, %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlq	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrlq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrlw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsubb	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   vpsubb	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      1     0.25                        vpsubd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   vpsubd	(%rax), %xmm1, %xmm2
@@ -1732,21 +1732,21 @@ vzeroupper
 # CHECK-NEXT: [6]   - Zn2ALU3
 # CHECK-NEXT: [7]   - Zn2Divider
 # CHECK-NEXT: [8]   - Zn2FPU0
 # CHECK-NEXT: [9]   - Zn2FPU1
 # CHECK-NEXT: [10]  - Zn2FPU2
 # CHECK-NEXT: [11]  - Zn2FPU3
 # CHECK-NEXT: [12]  - Zn2Multiplier
 
 # CHECK:      Resource pressure per iteration:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12]
-# CHECK-NEXT: 117.00 117.00 117.00 0.25   0.25   0.25   0.25    -     134.92 169.92 204.75 311.42  -
+# CHECK-NEXT: 117.00 117.00 117.00 0.25   0.25   0.25   0.25    -     135.42 170.42 203.25 311.92  -
 
 # CHECK:      Resource pressure by instruction:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12]   Instructions:
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     vaddpd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     0.50   0.50    -     vaddpd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     vaddpd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     0.50   0.50    -     vaddpd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     vaddps	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     0.50   0.50    -     vaddps	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     vaddps	%ymm0, %ymm1, %ymm2
@@ -2271,37 +2271,37 @@ vzeroupper
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpshuflw	$1, (%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignb	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignb	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpslld	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpslld	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpslld	(%rax), %xmm1, %xmm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpslldq	$1, %xmm1, %xmm2
+# CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpslldq	$1, %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllq	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsllq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsllw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrad	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrad	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsrad	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsraw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsraw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsraw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrld	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrld	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsrld	(%rax), %xmm1, %xmm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrldq	$1, %xmm1, %xmm2
+# CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsrldq	$1, %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlq	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsrlq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlw	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsrlw	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsubb	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsubb	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsubd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsubd	(%rax), %xmm1, %xmm2
diff --git a/llvm/test/tools/llvm-mca/X86/Znver2/resources-avx2.s b/llvm/test/tools/llvm-mca/X86/Znver2/resources-avx2.s
index 0ac2239faf0b..93eb00e7e9b0 100644
--- a/llvm/test/tools/llvm-mca/X86/Znver2/resources-avx2.s
+++ b/llvm/test/tools/llvm-mca/X86/Znver2/resources-avx2.s
@@ -677,21 +677,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      8     0.33    *                   vpshuflw	$1, (%rax), %ymm2
 # CHECK-NEXT:  1      1     0.25                        vpsignb	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      8     0.33    *                   vpsignb	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      1     0.25                        vpsignd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      8     0.33    *                   vpsignd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      1     0.25                        vpsignw	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      8     0.33    *                   vpsignw	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpslld	$1, %ymm0, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpslld	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      8     1.00    *                   vpslld	(%rax), %ymm1, %ymm2
-# CHECK-NEXT:  1      3     1.00                        vpslldq	$1, %ymm1, %ymm2
+# CHECK-NEXT:  1      1     0.25                        vpslldq	$1, %ymm1, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpsllq	$1, %ymm0, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpsllq	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsllq	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsllvd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsllvd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      3     2.00                        vpsllvd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsllvd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsllvq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsllvq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      3     2.00                        vpsllvq	%ymm0, %ymm1, %ymm2
@@ -705,21 +705,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsravd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsravd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      3     2.00                        vpsravd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsravd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpsraw	$1, %ymm0, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpsraw	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsraw	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpsrld	$1, %ymm0, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpsrld	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrld	(%rax), %ymm1, %ymm2
-# CHECK-NEXT:  1      3     1.00                        vpsrldq	$1, %ymm1, %ymm2
+# CHECK-NEXT:  1      1     0.25                        vpsrldq	$1, %ymm1, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlq	$1, %ymm0, %ymm2
 # CHECK-NEXT:  1      1     1.00                        vpsrlq	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      8     1.00    *                   vpsrlq	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsrlvd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsrlvd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      3     2.00                        vpsrlvd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsrlvd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  1      3     2.00                        vpsrlvq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT:  1      10    2.00    *                   vpsrlvq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  1      3     2.00                        vpsrlvq	%ymm0, %ymm1, %ymm2
@@ -772,21 +772,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT: [6]   - Zn2ALU3
 # CHECK-NEXT: [7]   - Zn2Divider
 # CHECK-NEXT: [8]   - Zn2FPU0
 # CHECK-NEXT: [9]   - Zn2FPU1
 # CHECK-NEXT: [10]  - Zn2FPU2
 # CHECK-NEXT: [11]  - Zn2FPU3
 # CHECK-NEXT: [12]  - Zn2Multiplier
 
 # CHECK:      Resource pressure per iteration:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12]
-# CHECK-NEXT: 44.67  44.67  44.67   -      -      -      -      -     70.17  103.17 81.00  40.67   -
+# CHECK-NEXT: 44.67  44.67  44.67   -      -      -      -      -     70.67  103.67 79.50  41.17   -
 
 # CHECK:      Resource pressure by instruction:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12]   Instructions:
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vbroadcasti128	(%rax), %ymm0
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vbroadcastsd	%xmm0, %ymm0
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vbroadcastss	%xmm0, %ymm0
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vextracti128	$1, %ymm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -      -      -      -     vextracti128	$1, %ymm0, (%rax)
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -      -      -      -     vgatherdpd	%xmm0, (%rax,%xmm1,2), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -      -      -      -     vgatherdpd	%ymm0, (%rax,%xmm1,2), %ymm2
@@ -1000,21 +1000,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpshuflw	$1, (%rax), %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignb	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignb	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignw	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsignw	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpslld	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpslld	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpslld	(%rax), %ymm1, %ymm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpslldq	$1, %ymm1, %ymm2
+# CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpslldq	$1, %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllq	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsllq	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsllq	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsllvd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -     2.00    -      -      -     vpsllvd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsllvd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -     2.00    -      -      -     vpsllvd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsllvq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -     2.00    -      -      -     vpsllvq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsllvq	%ymm0, %ymm1, %ymm2
@@ -1028,21 +1028,21 @@ vpxor           (%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsravd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -     2.00    -      -      -     vpsravd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsravd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -     2.00    -      -      -     vpsravd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsraw	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsraw	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsraw	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrld	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrld	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsrld	(%rax), %ymm1, %ymm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrldq	$1, %ymm1, %ymm2
+# CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     vpsrldq	$1, %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlq	$1, %ymm0, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     vpsrlq	%xmm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     vpsrlq	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsrlvd	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -     2.00    -      -      -     vpsrlvd	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsrlvd	%ymm0, %ymm1, %ymm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -     2.00    -      -      -     vpsrlvd	(%rax), %ymm1, %ymm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsrlvq	%xmm0, %xmm1, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -     2.00    -      -      -     vpsrlvq	(%rax), %xmm1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -     2.00    -      -      -     vpsrlvq	%ymm0, %ymm1, %ymm2
diff --git a/llvm/test/tools/llvm-mca/X86/Znver2/resources-sse2.s b/llvm/test/tools/llvm-mca/X86/Znver2/resources-sse2.s
index c72bad933202..78f32625b8cd 100644
--- a/llvm/test/tools/llvm-mca/X86/Znver2/resources-sse2.s
+++ b/llvm/test/tools/llvm-mca/X86/Znver2/resources-sse2.s
@@ -590,37 +590,37 @@ xorpd       (%rax), %xmm2
 # CHECK-NEXT:  1      10    1.00    *                   psadbw	(%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        pshufd	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   pshufd	$1, (%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        pshufhw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   pshufhw	$1, (%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        pshuflw	$1, %xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   pshuflw	$1, (%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        pslld	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        pslld	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   pslld	(%rax), %xmm2
-# CHECK-NEXT:  1      3     1.00                        pslldq	$1, %xmm2
+# CHECK-NEXT:  1      1     0.25                        pslldq	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psllq	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psllq	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psllq	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psllw	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psllw	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psllw	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrad	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrad	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psrad	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psraw	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psraw	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psraw	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrld	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrld	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psrld	(%rax), %xmm2
-# CHECK-NEXT:  1      3     1.00                        psrldq	$1, %xmm2
+# CHECK-NEXT:  1      1     0.25                        psrldq	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrlq	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrlq	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psrlq	(%rax), %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrlw	$1, %xmm2
 # CHECK-NEXT:  1      1     1.00                        psrlw	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     1.00    *                   psrlw	(%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        psubb	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   psubb	(%rax), %xmm2
 # CHECK-NEXT:  1      1     0.25                        psubd	%xmm0, %xmm2
 # CHECK-NEXT:  1      8     0.33    *                   psubd	(%rax), %xmm2
@@ -685,21 +685,21 @@ xorpd       (%rax), %xmm2
 # CHECK-NEXT: [6]   - Zn2ALU3
 # CHECK-NEXT: [7]   - Zn2Divider
 # CHECK-NEXT: [8]   - Zn2FPU0
 # CHECK-NEXT: [9]   - Zn2FPU1
 # CHECK-NEXT: [10]  - Zn2FPU2
 # CHECK-NEXT: [11]  - Zn2FPU3
 # CHECK-NEXT: [12]  - Zn2Multiplier
 
 # CHECK:      Resource pressure per iteration:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12]
-# CHECK-NEXT: 44.33  44.33  44.33   -      -      -      -      -     53.92  47.92  87.25  134.92  -
+# CHECK-NEXT: 44.33  44.33  44.33   -      -      -      -      -     54.42  48.42  85.75  135.42  -
 
 # CHECK:      Resource pressure by instruction:
 # CHECK-NEXT: [0]    [1]    [2]    [3]    [4]    [5]    [6]    [7]    [8]    [9]    [10]   [11]   [12]   Instructions:
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     addpd	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     0.50   0.50    -     addpd	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     0.50   0.50    -     addsd	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     0.50   0.50    -     addsd	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     andnpd	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     andnpd	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     andpd	%xmm0, %xmm2
@@ -879,37 +879,37 @@ xorpd       (%rax), %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     1.00    -      -      -      -     psadbw	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshufd	$1, %xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshufd	$1, (%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshufhw	$1, %xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshufhw	$1, (%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshuflw	$1, %xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     pshuflw	$1, (%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     pslld	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     pslld	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     pslld	(%rax), %xmm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     pslldq	$1, %xmm2
+# CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     pslldq	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psllq	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psllq	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     psllq	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psllw	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psllw	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     psllw	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrad	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrad	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     psrad	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psraw	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psraw	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     psraw	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrld	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrld	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     psrld	(%rax), %xmm2
-# CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrldq	$1, %xmm2
+# CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     psrldq	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrlq	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrlq	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     psrlq	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrlw	$1, %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -      -      -     1.00    -      -     psrlw	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -      -      -     1.00    -      -     psrlw	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     psubb	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     psubb	(%rax), %xmm2
 # CHECK-NEXT:  -      -      -      -      -      -      -      -     0.25   0.25   0.25   0.25    -     psubd	%xmm0, %xmm2
 # CHECK-NEXT: 0.33   0.33   0.33    -      -      -      -      -     0.25   0.25   0.25   0.25    -     psubd	(%rax), %xmm2
diff --git a/llvm/test/tools/llvm-objcopy/MachO/Inputs/strip-all-with-codesignature.yaml b/llvm/test/tools/llvm-objcopy/MachO/Inputs/strip-all-with-codesignature.yaml
new file mode 100644
index 000000000000..298ce4502b64
--- /dev/null
+++ b/llvm/test/tools/llvm-objcopy/MachO/Inputs/strip-all-with-codesignature.yaml
@@ -0,0 +1,361 @@
+--- !mach-o
+FileHeader:
+  magic:           0xFEEDFACF
+  cputype:         0x1000007
+  cpusubtype:      0x80000003
+  filetype:        0x2
+  ncmds:           17
+  sizeofcmds:      1312
+  flags:           0x200085
+  reserved:        0x0
+LoadCommands:
+  - cmd:             LC_SEGMENT_64
+    cmdsize:         72
+    segname:         __PAGEZERO
+    vmaddr:          0
+    vmsize:          4294967296
+    fileoff:         0
+    filesize:        0
+    maxprot:         0
+    initprot:        0
+    nsects:          0
+    flags:           0
+  - cmd:             LC_SEGMENT_64
+    cmdsize:         552
+    segname:         __TEXT
+    vmaddr:          4294967296
+    vmsize:          4096
+    fileoff:         0
+    filesize:        4096
+    maxprot:         7
+    initprot:        5
+    nsects:          6
+    flags:           0
+    Sections:
+      - sectname:        __text
+        segname:         __TEXT
+        addr:            0x100000F30
+        size:            59
+        offset:          0xF30
+        align:           4
+        reloff:          0x0
+        nreloc:          0
+        flags:           0x80000400
+        reserved1:       0x0
+        reserved2:       0x0
+        reserved3:       0x0
+        content:         554889E54883EC20488D054F000000C745FC00000000897DF8488975F0488955E84889C7B000E811000000B9000000008945E489C84883C4205DC3
+      - sectname:        __stubs
+        segname:         __TEXT
+        addr:            0x100000F6C
+        size:            6
+        offset:          0xF6C
+        align:           1
+        reloff:          0x0
+        nreloc:          0
+        flags:           0x80000408
+        reserved1:       0x0
+        reserved2:       0x6
+        reserved3:       0x0
+        content:         FF259E000000
+      - sectname:        __stub_helper
+        segname:         __TEXT
+        addr:            0x100000F74
+        size:            26
+        offset:          0xF74
+        align:           2
+        reloff:          0x0
+        nreloc:          0
+        flags:           0x80000400
+        reserved1:       0x0
+        reserved2:       0x0
+        reserved3:       0x0
+        content:         4C8D1D8D0000004153FF257D000000906800000000E9E6FFFFFF
+      - sectname:        __cstring
+        segname:         __TEXT
+        addr:            0x100000F8E
+        size:            13
+        offset:          0xF8E
+        align:           0
+        reloff:          0x0
+        nreloc:          0
+        flags:           0x2
+        reserved1:       0x0
+        reserved2:       0x0
+        reserved3:       0x0
+        content:         48656C6C6F20776F726C640A00
+      - sectname:        __unwind_info
+        segname:         __TEXT
+        addr:            0x100000F9B
+        size:            72
+        offset:          0xF9B
+        align:           0
+        reloff:          0x0
+        nreloc:          0
+        flags:           0x0
+        reserved1:       0x0
+        reserved2:       0x0
+        reserved3:       0x0
+        content:         010000001C000000000000001C000000000000001C00000002000000300F000034000000340000006C0F00000000000034000000030000000C000100100001000000000000000001
+      - sectname:        __eh_frame
+        segname:         __TEXT
+        addr:            0x100000FE8
+        size:            24
+        offset:          0xFE8
+        align:           3
+        reloff:          0x0
+        nreloc:          0
+        flags:           0x0
+        reserved1:       0x0
+        reserved2:       0x0
+        reserved3:       0x0
+        content:         1400000000000000017A520001781001100C070890010000
+  - cmd:             LC_SEGMENT_64
+    cmdsize:         232
+    segname:         __DATA
+    vmaddr:          4294971392
+    vmsize:          4096
+    fileoff:         4096
+    filesize:        4096
+    maxprot:         7
+    initprot:        3
+    nsects:          2
+    flags:           0
+    Sections:
+      - sectname:        __nl_symbol_ptr
+        segname:         __DATA
+        addr:            0x100001000
+        size:            16
+        offset:          0x1000
+        align:           3
+        reloff:          0x0
+        nreloc:          0
+        flags:           0x6
+        reserved1:       0x1
+        reserved2:       0x0
+        reserved3:       0x0
+        content:         '00000000000000000000000000000000'
+      - sectname:        __la_symbol_ptr
+        segname:         __DATA
+        addr:            0x100001010
+        size:            8
+        offset:          0x1010
+        align:           3
+        reloff:          0x0
+        nreloc:          0
+        flags:           0x7
+        reserved1:       0x3
+        reserved2:       0x0
+        reserved3:       0x0
+        content:         840F000001000000
+  - cmd:             LC_SEGMENT_64
+    cmdsize:         72
+    segname:         __LINKEDIT
+    vmaddr:          4294975488
+    vmsize:          32768
+    fileoff:         8192
+    filesize:        18960
+    maxprot:         7
+    initprot:        1
+    nsects:          0
+    flags:           0
+  - cmd:             LC_DYLD_INFO_ONLY
+    cmdsize:         48
+    rebase_off:      8192
+    rebase_size:     8
+    bind_off:        8200
+    bind_size:       24
+    weak_bind_off:   0
+    weak_bind_size:  0
+    lazy_bind_off:   8224
+    lazy_bind_size:  16
+    export_off:      8240
+    export_size:     48
+  - cmd:             LC_SYMTAB
+    cmdsize:         24
+    symoff:          8360
+    nsyms:           4
+    stroff:          8440
+    strsize:         56
+  - cmd:             LC_DYSYMTAB
+    cmdsize:         80
+    ilocalsym:       0
+    nlocalsym:       0
+    iextdefsym:      0
+    nextdefsym:      2
+    iundefsym:       2
+    nundefsym:       2
+    tocoff:          0
+    ntoc:            0
+    modtaboff:       0
+    nmodtab:         0
+    extrefsymoff:    0
+    nextrefsyms:     0
+    indirectsymoff:  8424
+    nindirectsyms:   4
+    extreloff:       0
+    nextrel:         0
+    locreloff:       0
+    nlocrel:         0
+  - cmd:             LC_LOAD_DYLINKER
+    cmdsize:         32
+    name:            12
+    Content:         '/usr/lib/dyld'
+    ZeroPadBytes:    7
+  - cmd:             LC_UUID
+    cmdsize:         24
+    uuid:            65C2DD41-79B0-3B34-871B-8CB3446AB762
+  - cmd:             LC_VERSION_MIN_MACOSX
+    cmdsize:         16
+    version:         657664
+    sdk:             657664
+  - cmd:             LC_SOURCE_VERSION
+    cmdsize:         16
+    version:         0
+  - cmd:             LC_MAIN
+    cmdsize:         24
+    entryoff:        3888
+    stacksize:       0
+  - cmd:             LC_LOAD_DYLIB
+    cmdsize:         56
+    dylib:
+      name:            24
+      timestamp:       2
+      current_version: 78446849
+      compatibility_version: 65536
+    Content:         '/usr/lib/libSystem.B.dylib'
+    ZeroPadBytes:    6
+  - cmd:             LC_FUNCTION_STARTS
+    cmdsize:         16
+    dataoff:         8288
+    datasize:        8
+  - cmd:             LC_DATA_IN_CODE
+    cmdsize:         16
+    dataoff:         8296
+    datasize:        0
+  - cmd:             LC_DYLIB_CODE_SIGN_DRS
+    cmdsize:         16
+    dataoff:         8296
+    datasize:        64
+  - cmd:             LC_CODE_SIGNATURE
+    cmdsize:         16
+    dataoff:         8496
+    datasize:        18656
+LinkEditData:
+  RebaseOpcodes:
+    - Opcode:          REBASE_OPCODE_SET_TYPE_IMM
+      Imm:             1
+    - Opcode:          REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
+      Imm:             2
+      ExtraData:       [ 0x10 ]
+    - Opcode:          REBASE_OPCODE_DO_REBASE_IMM_TIMES
+      Imm:             1
+    - Opcode:          REBASE_OPCODE_DONE
+      Imm:             0
+  BindOpcodes:
+    - Opcode:          BIND_OPCODE_SET_DYLIB_ORDINAL_IMM
+      Imm:             1
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM
+      Imm:             0
+      Symbol:          dyld_stub_binder
+    - Opcode:          BIND_OPCODE_SET_TYPE_IMM
+      Imm:             1
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
+      Imm:             2
+      ULEBExtraData:   [ 0x0 ]
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_DO_BIND
+      Imm:             0
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_DONE
+      Imm:             0
+      Symbol:          ''
+  LazyBindOpcodes:
+    - Opcode:          BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB
+      Imm:             2
+      ULEBExtraData:   [ 0x10 ]
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_SET_DYLIB_ORDINAL_IMM
+      Imm:             1
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM
+      Imm:             0
+      Symbol:          _printf
+    - Opcode:          BIND_OPCODE_DO_BIND
+      Imm:             0
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_DONE
+      Imm:             0
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_DONE
+      Imm:             0
+      Symbol:          ''
+    - Opcode:          BIND_OPCODE_DONE
+      Imm:             0
+      Symbol:          ''
+  ExportTrie:
+    TerminalSize:    0
+    NodeOffset:      0
+    Name:            ''
+    Flags:           0x0
+    Address:         0x0
+    Other:           0x0
+    ImportName:      ''
+    Children:
+      - TerminalSize:    0
+        NodeOffset:      5
+        Name:            _
+        Flags:           0x0
+        Address:         0x0
+        Other:           0x0
+        ImportName:      ''
+        Children:
+          - TerminalSize:    2
+            NodeOffset:      33
+            Name:            _mh_execute_header
+            Flags:           0x0
+            Address:         0x0
+            Other:           0x0
+            ImportName:      ''
+          - TerminalSize:    3
+            NodeOffset:      37
+            Name:            main
+            Flags:           0x0
+            Address:         0xF30
+            Other:           0x0
+            ImportName:      ''
+  NameList:
+    - n_strx:          2
+      n_type:          0xF
+      n_sect:          1
+      n_desc:          16
+      n_value:         4294967296
+    - n_strx:          22
+      n_type:          0xF
+      n_sect:          1
+      n_desc:          0
+      n_value:         4294971184
+    - n_strx:          28
+      n_type:          0x1
+      n_sect:          0
+      n_desc:          256
+      n_value:         0
+    - n_strx:          36
+      n_type:          0x1
+      n_sect:          0
+      n_desc:          256
+      n_value:         0
+  StringTable:
+    - ' '
+    - __mh_execute_header
+    - _main
+    - _printf
+    - dyld_stub_binder
+    - ''
+    - ''
+    - ''
+  IndirectSymbols: [ 0x2, 0x3, 0x40000000, 0x2 ]
+  FunctionStarts:  [ 0xF30 ]
+...
diff --git a/llvm/test/tools/llvm-objcopy/MachO/strip-all.test b/llvm/test/tools/llvm-objcopy/MachO/strip-all.test
index 5cea836b3ba2..103957462247 100644
--- a/llvm/test/tools/llvm-objcopy/MachO/strip-all.test
+++ b/llvm/test/tools/llvm-objcopy/MachO/strip-all.test
@@ -1,15 +1,16 @@
 ## Show that llvm-objcopy/llvm-strip removes all symbols and debug sections.
 
 # RUN: yaml2obj %p/Inputs/strip-all.yaml -o %t.exec
 # RUN: yaml2obj %p/Inputs/strip-all-with-dwarf.yaml -o %t.dwarf
 # RUN: yaml2obj %p/Inputs/strip-chained-fixups.yaml -o %t.fixups
+# RUN: yaml2obj %p/Inputs/strip-all-with-codesignature.yaml -o %t.codesignature
 
 ## Check that the symbol list satisfies the order: local / defined external /
 ## undefined external, otherwise llvm-objcopy will fail.
 # RUN: llvm-objcopy %t.exec /dev/null
 
 # RUN: llvm-objcopy --strip-all %t.exec %t.exec.stripped
 # RUN: llvm-readobj --sections --relocations --symbols %t.exec.stripped \
 # RUN:   | FileCheck --check-prefix=COMMON %s
 
 # RUN: llvm-objcopy --strip-all %t.dwarf %t.dwarf.stripped
@@ -35,20 +36,39 @@
 # RUN: llvm-lipo %t.dwarf -create -output %t.dwarf.universal
 # RUN: llvm-strip %t.dwarf.universal -o %t.dwarf.universal.stripped
 # RUN: llvm-lipo %t.dwarf.universal.stripped -thin x86_64 -output %t6
 # RUN: cmp %t6 %t.dwarf.stripped
 
 # RUN: llvm-strip %t.fixups -o %t7
 # RUN: llvm-strip --strip-all %t.fixups -o %t8
 # RUN: cmp %t7 %t.fixups.stripped
 # RUN: cmp %t8 %t.fixups.stripped
 
+# RUN: llvm-objcopy --strip-all %t.codesignature %t9
+# RUN: llvm-otool -l %t9 | FileCheck --check-prefix=CODESIGNATURE %s
+# RUN: llvm-strip %t.codesignature -o %t10
+# RUN: llvm-otool -l %t10 | FileCheck --check-prefix=CODESIGNATURE %s
+# RUN: llvm-strip --strip-all %t.codesignature -o %t11
+# RUN: llvm-otool -l %t11 | FileCheck --check-prefix=CODESIGNATURE %s
+
+## Make sure that code signatures are preserved
+
+# CODESIGNATURE:      cmd LC_DYLIB_CODE_SIGN_DRS
+# CODESIGNATURE-NEXT: cmdsize 16
+# CODESIGNATURE-NEXT: dataoff 8408
+# CODESIGNATURE-NEXT: datasize 64
+# CODESIGNATURE-NEXT: Load command
+# CODESIGNATURE-NEXT: cmd LC_CODE_SIGNATURE
+# CODESIGNATURE-NEXT: cmdsize 16
+# CODESIGNATURE-NEXT: dataoff 8480
+# CODESIGNATURE-NEXT: datasize 240
+
 ## Make sure that debug sections are removed.
 # DWARF:       Sections [
 # DWARF-NOT:     Name: __debug_str
 # DWARF-NOT:     Name: __debug_abbrev
 # DWARF-NOT:     Name: __debug_info
 # DWARF-NOT:     Name: __debug_macinfo
 # DWARF-NOT:     Name: __apple_names
 # DWARF-NOT:     Name: __apple_objc
 # DWARF-NOT:     Name: __apple_namespac
 # DWARF-NOT:     Name: __apple_types
diff --git a/llvm/test/tools/llvm-objdump/MachO/function-starts.test b/llvm/test/tools/llvm-objdump/MachO/function-starts.test
index a9cab10d3497..8c013174c4ec 100644
--- a/llvm/test/tools/llvm-objdump/MachO/function-starts.test
+++ b/llvm/test/tools/llvm-objdump/MachO/function-starts.test
@@ -1,7 +1,30 @@
 ## This test verifies that llvm-objdump correctly prints function starts data.
 
-RUN: llvm-objdump --macho --function-starts %p/Inputs/hello.exe.macho-i386 | FileCheck %s --check-prefix=32-BIT
+RUN: llvm-objdump --macho --function-starts %p/Inputs/hello.exe.macho-i386 | FileCheck %s --check-prefix=32-BIT --implicit-check-not=_main
+RUN: llvm-objdump --macho --function-starts=addrs %p/Inputs/hello.exe.macho-i386 | FileCheck %s --check-prefix=32-BIT --implicit-check-not=_main
 32-BIT: 00001f40
 
-RUN: llvm-objdump --macho --function-starts %p/Inputs/hello.exe.macho-x86_64 | FileCheck %s --check-prefix=64-BIT
+RUN: llvm-objdump --macho --function-starts=names %p/Inputs/hello.exe.macho-i386 | FileCheck %s --check-prefix=32-BIT-NAMES
+32-BIT-NAMES: {{^}}_main
+
+RUN: llvm-objdump --macho --function-starts=both %p/Inputs/hello.exe.macho-i386 | FileCheck %s --check-prefix=32-BIT-BOTH
+32-BIT-BOTH: 00001f40 _main
+
+RUN: llvm-objdump --macho --function-starts %p/Inputs/hello.exe.macho-x86_64 | FileCheck %s --check-prefix=64-BIT --implicit-check-not=_main
+RUN: llvm-objdump --macho --function-starts=addrs %p/Inputs/hello.exe.macho-x86_64 | FileCheck %s --check-prefix=64-BIT --implicit-check-not=_main
 64-BIT: 0000000100000f30
+
+RUN: llvm-objdump --macho --function-starts=names %p/Inputs/hello.exe.macho-x86_64 | FileCheck %s --check-prefix=64-BIT-NAMES
+64-BIT-NAMES: {{^}}_main
+
+RUN: llvm-objdump --macho --function-starts=both %p/Inputs/hello.exe.macho-x86_64 | FileCheck %s --check-prefix=64-BIT-BOTH
+64-BIT-BOTH: 0000000100000f30 _main
+
+RUN: llvm-strip %p/Inputs/hello.exe.macho-x86_64 -o %t.stripped
+RUN: llvm-objdump --macho --function-starts=both %t.stripped | FileCheck %s --check-prefix=BOTH-STRIPPED
+BOTH-STRIPPED: 0000000100000f30 ?
+
+RUN: llvm-strip %p/Inputs/hello.exe.macho-x86_64 -o %t.stripped
+RUN: llvm-objdump --macho --function-starts=names %t.stripped | FileCheck %s --check-prefix=NAMES-STRIPPED
+NAMES-STRIPPED: function-starts.test.tmp.stripped:
+NAMES-STRIPPED-EMPTY:
diff --git a/llvm/test/tools/llvm-profgen/Inputs/noinline-cs-pseudoprobe.perfscript b/llvm/test/tools/llvm-profgen/Inputs/noinline-cs-pseudoprobe.perfscript
index 01c34a5a1635..6eaf5663b79a 100644
--- a/llvm/test/tools/llvm-profgen/Inputs/noinline-cs-pseudoprobe.perfscript
+++ b/llvm/test/tools/llvm-profgen/Inputs/noinline-cs-pseudoprobe.perfscript
@@ -1,19 +1,19 @@
-PERF_RECORD_MMAP2 1243676/1243676: [0x201000(0x1000) @ 0 00:1d 224517108 1044165]: r-xp /home/noinline-cs-pseudoprobe.perfbin
+PERF_RECORD_MMAP2 1243676/1243676: [0x301000(0x1000) @ 0 00:1d 224517108 1044165]: r-xp /home/noinline-cs-pseudoprobe.perfbin
 
-	          20179e
-	          2017f9
+	          30179e
+	          3017f9
 	    7f83e84e7793
 	5541f689495641d7
- 0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0
+ 0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0
 
-	          2017c4
-	          2017f9
+	          3017c4
+	          3017f9
 	    7f83e84e7793
 	5541f689495641d7
- 0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0
+ 0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0
 
-	          2017c4
-	          2017f9
+	          3017c4
+	          3017f9
 	    7f83e84e7793
 	5541f689495641d7
- 0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0  0x2017bf/0x201760/P/-/-/0  0x2017cf/0x20179e/P/-/-/0  0x20177f/0x2017c4/P/-/-/0
+ 0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0  0x3017bf/0x301760/P/-/-/0  0x3017cf/0x30179e/P/-/-/0  0x30177f/0x3017c4/P/-/-/0
diff --git a/llvm/test/tools/llvm-profgen/inline-noprobe2.test b/llvm/test/tools/llvm-profgen/inline-noprobe2.test
index 97c96f033660..e19d991f0f1c 100644
--- a/llvm/test/tools/llvm-profgen/inline-noprobe2.test
+++ b/llvm/test/tools/llvm-profgen/inline-noprobe2.test
@@ -5,23 +5,24 @@
 ; RUN: llvm-profgen --format=text --unsymbolized-profile=%t --binary=%S/Inputs/inline-noprobe2.perfbin --output=%t1 --use-offset=0
 ; RUN: FileCheck %s --input-file %t1 --check-prefix=CHECK
 
 ; RUN: llvm-profgen --format=extbinary --perfscript=%S/Inputs/inline-noprobe2.perfscript --binary=%S/Inputs/inline-noprobe2.perfbin --output=%t --populate-profile-symbol-list=1
 ; RUN: llvm-profdata show -show-prof-sym-list -sample %t | FileCheck %s --check-prefix=CHECK-SYM-LIST
 
 ; CHECK-EXT-ADDR:      2
 ; CHECK-EXT-ADDR-NEXT: 400870-400870:2
 ; CHECK-EXT-ADDR-NEXT: 400875-4008bf:1
 ; CHECK-EXT-ADDR-NEXT: 2
-; CHECK-EXT-ADDR-NEXT: 4008bf->400870:2
 ; Value 1 is external address
 ; CHECK-EXT-ADDR-NEXT: 1->400875:1
+; CHECK-EXT-ADDR-NEXT: 4008bf->400870:2
+
 
 ; CHECK-SYM-LIST: Dump profile symbol list
 ; CHECK-SYM-LIST: main
 ; CHECK-SYM-LIST: partition_pivot_first
 ; CHECK-SYM-LIST: partition_pivot_last
 ; CHECK-SYM-LIST: quick_sort
 ; CHECK-SYM-LIST: swap
 
 
 ;CHECK-RAW-PROFILE-NOT: 7f7448e889e4
diff --git a/llvm/test/tools/llvm-profgen/invalid-range.test b/llvm/test/tools/llvm-profgen/invalid-range.test
index 6d6f2cb63776..4ca43bc1b24b 100644
--- a/llvm/test/tools/llvm-profgen/invalid-range.test
+++ b/llvm/test/tools/llvm-profgen/invalid-range.test
@@ -24,27 +24,27 @@
 ; CS-NEXT:   4
 ; CS-NEXT:   201760-20177f:6
 ; CS-NEXT:   20179e-2017bf:5
 ; CS-NEXT:   2017c4-2017cf:5
 ; CS-NEXT:   2017c4-2017d8:1
 ; CS-NEXT:   4
 ; CS-NEXT:   20177f->2017c4:6
 ; CS-NEXT:   2017bf->201760:6
 ; CS-NEXT:   2017cf->20179e:6
 ; CS-NEXT:   2017d8->2017e3:1
-; CS-NEXT: [0x7f4]
+; CS-NEXT: [0x2017f4]
 ; CS-NEXT:   1
 ; CS-NEXT:   2017c4-2017cf:1
 ; CS-NEXT:   2
 ; CS-NEXT:   2017bf->201760:1
 ; CS-NEXT:   2017cf->20179e:2
-; CS-NEXT: [0x7f4 @ 0x7bf]
+; CS-NEXT: [0x2017f4 @ 0x2017bf]
 ; CS-NEXT:   1
 ; CS-NEXT:   201760-20177f:1
 ; CS-NEXT:   1
 ; CS-NEXT:   20177f->2017c4:1
 
 ; clang -O3 -fuse-ld=lld -fpseudo-probe-for-profiling
 ; -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -Xclang -mdisable-tail-calls
 ; -g test.c  -o a.out
 
 #include <stdio.h>
diff --git a/llvm/test/tools/llvm-profgen/pseudoprobe-decoding.test b/llvm/test/tools/llvm-profgen/pseudoprobe-decoding.test
index 8212a7e5bc83..c05ef0afc730 100644
--- a/llvm/test/tools/llvm-profgen/pseudoprobe-decoding.test
+++ b/llvm/test/tools/llvm-profgen/pseudoprobe-decoding.test
@@ -10,82 +10,82 @@ PERF_RECORD_MMAP2 2854748/2854748: [0x400000(0x1000) @ 0 00:1d 123291722 526021]
 ; CHECK: Hash: 281479271677951
 ; CHECK: GUID: 16434608426314478903 Name: bar
 ; CHECK: Hash: 72617220756
 
 
 
 ; CHECK:      <bar>:
 
 ; CHECK:       [Probe]: FUNC: bar Index: 1  Type: Block
 ; CHECK-NEXT:  [Probe]: FUNC: bar Index: 4  Type: Block
-; CHECK-NEXT:      754: imull $2863311531, %edi, %eax
+; CHECK-NEXT:   201754: imull $2863311531, %edi, %eax
 
 ; CHECK:      <foo>:
 ; CHECK:       [Probe]: FUNC: foo Index: 1  Type: Block
 ; CHECK-NEXT:  [Probe]: FUNC: foo Index: 2  Type: Block
-; CHECK-NEXT:      770: movl  $1, %ecx
+; CHECK-NEXT:   201770: movl  $1, %ecx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 5  Type: Block
-; CHECK-NEXT:      780: addl  $30, %esi
+; CHECK-NEXT:    201780: addl  $30, %esi
 ; CHECK:       [Probe]: FUNC: foo Index: 6  Type: Block
 ; CHECK-NEXT:  [Probe]: FUNC: foo Index: 2  Type: Block
-; CHECK-NEXT:      783: addl  $1, %ecx
+; CHECK-NEXT:   201783: addl  $1, %ecx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 3  Type: Block
-; CHECK-NEXT:      78e:	movl	%ecx, %edx
+; CHECK-NEXT:   20178e:	movl	%ecx, %edx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 4  Type: Block
 ; CHECK-NEXT:  [Probe]: FUNC: bar Index: 1  Type: Block  Inlined: @ foo:8
 ; CHECK-NEXT:  [Probe]:	FUNC: bar Index: 4  Type: Block  Inlined: @ foo:8
-; CHECK-NEXT:      7bf: addl  %ecx, %edx
+; CHECK-NEXT:   2017bf: addl  %ecx, %edx
 
 
 ; CHECK:       [Probe]: FUNC: foo Index: 6  Type: Block
 ; CHECK-NEXT:  [Probe]: FUNC: foo Index: 2  Type: Block
-; CHECK-NEXT:      7cf:	addl	$1, %ecx
+; CHECK-NEXT:   2017cf:	addl	$1, %ecx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 7  Type: Block
-; CHECK-NEXT:      7de: movl  $2098432, %edi
+; CHECK-NEXT:   2017de: movl  $2098432, %edi
 
 ; CHECK:       [Probe]: FUNC: foo Index: 9  Type: DirectCall
-; CHECK-NEXT:      7e5: callq 0x930
+; CHECK-NEXT:   2017e5: callq 0x201930
 
 
 ; CHECK:      <main>:
 ; CHECK:       [Probe]: FUNC: main Index: 1  Type: Block
 ; CHECK-NEXT:  [Probe]: FUNC: foo Index: 1  Type: Block  Inlined: @ main:2
 ; CHECK-NEXT:  [Probe]: FUNC: foo Index: 2  Type: Block  Inlined: @ main:2
-; CHECK-NEXT:      7f0: movl  $1, %ecx
+; CHECK-NEXT:   2017f0: movl  $1, %ecx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 5  Type: Block  Inlined: @ main:2
-; CHECK-NEXT:      800: addl  $30, %esi
+; CHECK-NEXT:   201800: addl  $30, %esi
 ; CHECK:       [Probe]: FUNC: foo Index: 6  Type: Block  Inlined: @ main:2
 ; CHECK-NEXT:  [Probe]: FUNC: foo Index: 2  Type: Block  Inlined: @ main:2
-; CHECK-NEXT:      803: addl  $1, %ecx
+; CHECK-NEXT:   201803: addl  $1, %ecx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 3  Type: Block  Inlined: @ main:2
-; CHECK-NEXT:      80e:	movl	%ecx, %edx
+; CHECK-NEXT:   20180e:	movl	%ecx, %edx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 4  Type: Block  Inlined: @ main:2
 ; CHECK-NEXT:  [Probe]: FUNC: bar Index: 1  Type: Block  Inlined: @ main:2 @ foo:8
 ; CHECK-NEXT:  [Probe]:	FUNC: bar Index: 4  Type: Block  Inlined: @ main:2 @ foo:8
-; CHECK-NEXT:      83f: addl  %ecx, %edx
+; CHECK-NEXT:   20183f: addl  %ecx, %edx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 6  Type: Block  Inlined: @ main:2
 ; CHECK-NEXT:  [Probe]: FUNC: foo Index: 2  Type: Block  Inlined: @ main:2
-; CHECK-NEXT:      84f: addl  $1, %ecx
+; CHECK-NEXT:   20184f: addl  $1, %ecx
 
 ; CHECK:       [Probe]: FUNC: foo Index: 7  Type: Block  Inlined: @ main:2
-; CHECK-NEXT:      85e: movl  $2098432, %edi
+; CHECK-NEXT:   20185e: movl  $2098432, %edi
 
 ; CHECK:       [Probe]: FUNC: foo Index: 9  Type: DirectCall  Inlined: @ main:2
-; CHECK-NEXT:      865: callq 0x930
+; CHECK-NEXT:   201865: callq 0x201930
 
 ; SYM-NOT: <bar>:
 ; SYM: <foo>:
 ; SYM: <main>:
 
 
 
 ; clang -O3 -fuse-ld=lld -fpseudo-probe-for-profiling
 ; -fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -Xclang -mdisable-tail-calls
 ; -g test.c  -o a.out
diff --git a/llvm/test/tools/llvm-readobj/ELF/file-summary-json.test b/llvm/test/tools/llvm-readobj/ELF/file-summary-json.test
index 7af0a0131413..458b94e0b94f 100644
--- a/llvm/test/tools/llvm-readobj/ELF/file-summary-json.test
+++ b/llvm/test/tools/llvm-readobj/ELF/file-summary-json.test
@@ -4,111 +4,99 @@
 # RUN: mkdir -p %t.dir
 # RUN: yaml2obj %s -o %t.dir/obj
 
 ## Test outputting file summary for a single file.
 # RUN: llvm-readobj --elf-output-style=JSON --pretty-print %t.dir/obj | \
 # RUN:   FileCheck %s --check-prefix=SINGLE \
 # RUN:     --match-full-lines --strict-whitespace --implicit-check-not={{.}}
 
 #      SINGLE:[
 # SINGLE-NEXT:  {
-# SINGLE-NEXT:    "{{.*}}/obj": {
-# SINGLE-NEXT:      "FileSummary": {
-# SINGLE-NEXT:        "File": "{{.*}}/obj",
-# SINGLE-NEXT:        "Format": "elf64-x86-64",
-# SINGLE-NEXT:        "Arch": "x86_64",
-# SINGLE-NEXT:        "AddressSize": "64bit",
-# SINGLE-NEXT:        "LoadName": "<Not found>"
-# SINGLE-NEXT:      }
+# SINGLE-NEXT:    "FileSummary": {
+# SINGLE-NEXT:      "File": "{{.*}}/obj",
+# SINGLE-NEXT:      "Format": "elf64-x86-64",
+# SINGLE-NEXT:      "Arch": "x86_64",
+# SINGLE-NEXT:      "AddressSize": "64bit",
+# SINGLE-NEXT:      "LoadName": "<Not found>"
 # SINGLE-NEXT:    }
 # SINGLE-NEXT:  }
 # SINGLE-NEXT:]
 
 ## Test outputting file summary for multiple files.
 # RUN: llvm-readobj --elf-output-style=JSON --pretty-print %t.dir/obj %t.dir/obj | \
 # RUN:   FileCheck %s --check-prefix=MULTI \
 # RUN:     --match-full-lines --strict-whitespace --implicit-check-not={{.}}
 
 #      MULTI:[
 # MULTI-NEXT:  {
-# MULTI-NEXT:    "{{.*}}/obj": {
-# MULTI-NEXT:      "FileSummary": {
-# MULTI-NEXT:        "File": "{{.*}}/obj",
-# MULTI-NEXT:        "Format": "elf64-x86-64",
-# MULTI-NEXT:        "Arch": "x86_64",
-# MULTI-NEXT:        "AddressSize": "64bit",
-# MULTI-NEXT:        "LoadName": "<Not found>"
-# MULTI-NEXT:      }
+# MULTI-NEXT:    "FileSummary": {
+# MULTI-NEXT:      "File": "{{.*}}/obj",
+# MULTI-NEXT:      "Format": "elf64-x86-64",
+# MULTI-NEXT:      "Arch": "x86_64",
+# MULTI-NEXT:      "AddressSize": "64bit",
+# MULTI-NEXT:      "LoadName": "<Not found>"
 # MULTI-NEXT:    }
 # MULTI-NEXT:  },
 # MULTI-NEXT:  {
-# MULTI-NEXT:    "{{.*}}/obj": {
-# MULTI-NEXT:      "FileSummary": {
-# MULTI-NEXT:        "File": "{{.*}}/obj",
-# MULTI-NEXT:        "Format": "elf64-x86-64",
-# MULTI-NEXT:        "Arch": "x86_64",
-# MULTI-NEXT:        "AddressSize": "64bit",
-# MULTI-NEXT:        "LoadName": "<Not found>"
-# MULTI-NEXT:      }
+# MULTI-NEXT:    "FileSummary": {
+# MULTI-NEXT:      "File": "{{.*}}/obj",
+# MULTI-NEXT:      "Format": "elf64-x86-64",
+# MULTI-NEXT:      "Arch": "x86_64",
+# MULTI-NEXT:      "AddressSize": "64bit",
+# MULTI-NEXT:      "LoadName": "<Not found>"
 # MULTI-NEXT:    }
 # MULTI-NEXT:  }
 # MULTI-NEXT:]
 
 ## Test outputting file summary for an archive with a single file.
 # RUN: rm -f %t.archive-single
 # RUN: llvm-ar rc %t.archive-single %t.dir/obj
 # RUN: llvm-readobj --elf-output-style=JSON --pretty-print %t.archive-single | \
 # RUN:   FileCheck %s --check-prefix=ARCH-SINGLE \
 # RUN:     --match-full-lines --strict-whitespace --implicit-check-not={{.}}
 
 #      ARCH-SINGLE:[
 # ARCH-SINGLE-NEXT:  {
-# ARCH-SINGLE-NEXT:    "{{.*}}.archive-single(obj)": {
-# ARCH-SINGLE-NEXT:      "FileSummary": {
-# ARCH-SINGLE-NEXT:        "File": "{{.*}}.archive-single(obj)",
-# ARCH-SINGLE-NEXT:        "Format": "elf64-x86-64",
-# ARCH-SINGLE-NEXT:        "Arch": "x86_64",
-# ARCH-SINGLE-NEXT:        "AddressSize": "64bit",
-# ARCH-SINGLE-NEXT:        "LoadName": "<Not found>"
-# ARCH-SINGLE-NEXT:      }
+# ARCH-SINGLE-NEXT:    "FileSummary": {
+# ARCH-SINGLE-NEXT:      "File": "{{.*}}.archive-single(obj)",
+# ARCH-SINGLE-NEXT:      "Format": "elf64-x86-64",
+# ARCH-SINGLE-NEXT:      "Arch": "x86_64",
+# ARCH-SINGLE-NEXT:      "AddressSize": "64bit",
+# ARCH-SINGLE-NEXT:      "LoadName": "<Not found>"
 # ARCH-SINGLE-NEXT:    }
 # ARCH-SINGLE-NEXT:  }
 # ARCH-SINGLE-NEXT:]
 
 ## Test outputting file summary for an archive with multiple files.
 # RUN: rm -f %t.archive-multiple
 # RUN: llvm-ar rc %t.archive-multiple %t.dir/obj %t.dir/obj
 # RUN: llvm-readobj --elf-output-style=JSON --pretty-print %t.archive-multiple | \
 # RUN:   FileCheck %s --check-prefix=ARCH-MULTI \
 # RUN:     --match-full-lines --strict-whitespace --implicit-check-not={{.}}
 
 #      ARCH-MULTI:[
 # ARCH-MULTI-NEXT:  {
-# ARCH-MULTI-NEXT:    "{{.*}}.archive-multiple(obj)": {
-# ARCH-MULTI-NEXT:      "FileSummary": {
-# ARCH-MULTI-NEXT:        "File": "{{.*}}.archive-multiple(obj)",
-# ARCH-MULTI-NEXT:        "Format": "elf64-x86-64",
-# ARCH-MULTI-NEXT:        "Arch": "x86_64",
-# ARCH-MULTI-NEXT:        "AddressSize": "64bit",
-# ARCH-MULTI-NEXT:        "LoadName": "<Not found>"
-# ARCH-MULTI-NEXT:      }
+# ARCH-MULTI-NEXT:    "FileSummary": {
+# ARCH-MULTI-NEXT:      "File": "{{.*}}.archive-multiple(obj)",
+# ARCH-MULTI-NEXT:      "Format": "elf64-x86-64",
+# ARCH-MULTI-NEXT:      "Arch": "x86_64",
+# ARCH-MULTI-NEXT:      "AddressSize": "64bit",
+# ARCH-MULTI-NEXT:      "LoadName": "<Not found>"
 # ARCH-MULTI-NEXT:    }
 # ARCH-MULTI-NEXT:  },
 # ARCH-MULTI-NEXT:  {
-# ARCH-MULTI-NEXT:    "{{.*}}.archive-multiple(obj)": {
-# ARCH-MULTI-NEXT:      "FileSummary": {
-# ARCH-MULTI-NEXT:        "File": "{{.*}}.archive-multiple(obj)",
-# ARCH-MULTI-NEXT:        "Format": "elf64-x86-64",
-# ARCH-MULTI-NEXT:        "Arch": "x86_64",
-# ARCH-MULTI-NEXT:        "AddressSize": "64bit",
-# ARCH-MULTI-NEXT:        "LoadName": "<Not found>"
-# ARCH-MULTI-NEXT:      }
+# ARCH-MULTI-NEXT:    "FileSummary": {
+# ARCH-MULTI-NEXT:      "File": "{{.*}}.archive-multiple(obj)",
+# ARCH-MULTI-NEXT:      "Format": "elf64-x86-64",
+# ARCH-MULTI-NEXT:      "Arch": "x86_64",
+# ARCH-MULTI-NEXT:      "AddressSize": "64bit",
+# ARCH-MULTI-NEXT:      "LoadName": "<Not found>"
 # ARCH-MULTI-NEXT:    }
 # ARCH-MULTI-NEXT:  }
 # ARCH-MULTI-NEXT:]
 
 --- !ELF
 FileHeader:
   Class:   ELFCLASS64
   Data:    ELFDATA2LSB
   Type:    ET_REL
   Machine: EM_X86_64
diff --git a/llvm/test/tools/llvm-readobj/ELF/pretty-print.test b/llvm/test/tools/llvm-readobj/ELF/pretty-print.test
index 0f27db3992df..f729bfd519af 100644
--- a/llvm/test/tools/llvm-readobj/ELF/pretty-print.test
+++ b/llvm/test/tools/llvm-readobj/ELF/pretty-print.test
@@ -2,47 +2,43 @@
 #
 # RUN: yaml2obj %s -o %t.pretty
 
 ## Test JSON with pretty-print off.
 # RUN: llvm-readobj --elf-output-style=JSON %t.pretty | \
 # RUN:   FileCheck %s --check-prefix=NO-PRETTY \
 # RUN:     --strict-whitespace --implicit-check-not={{.}}
 
 #      NO-PRETTY:[
 # NO-PRETTY-SAME:{
-# NO-PRETTY-SAME:"{{.*}}.pretty":{
 # NO-PRETTY-SAME:"FileSummary":{
 # NO-PRETTY-SAME:"File":"{{.*}}.pretty",
 # NO-PRETTY-SAME:"Format":"elf64-x86-64",
 # NO-PRETTY-SAME:"Arch":"x86_64",
 # NO-PRETTY-SAME:"AddressSize":"64bit",
 # NO-PRETTY-SAME:"LoadName":"<Not found>"
 # NO-PRETTY-SAME:}
 # NO-PRETTY-SAME:}
-# NO-PRETTY-SAME:}
 # NO-PRETTY-SAME:]
 
 ## Test JSON with pretty-print on.
 # RUN: llvm-readobj --elf-output-style=JSON --pretty-print %t.pretty | \
 # RUN:   FileCheck %s --check-prefix=PRETTY \
 # RUN:     --match-full-lines --strict-whitespace --implicit-check-not={{.}}
 
 #      PRETTY:[
 # PRETTY-NEXT:  {
-# PRETTY-NEXT:    "{{.*}}.pretty": {
-# PRETTY-NEXT:      "FileSummary": {
-# PRETTY-NEXT:        "File": "{{.*}}.pretty",
-# PRETTY-NEXT:        "Format": "elf64-x86-64",
-# PRETTY-NEXT:        "Arch": "x86_64",
-# PRETTY-NEXT:        "AddressSize": "64bit",
-# PRETTY-NEXT:        "LoadName": "<Not found>"
-# PRETTY-NEXT:      }
+# PRETTY-NEXT:    "FileSummary": {
+# PRETTY-NEXT:      "File": "{{.*}}.pretty",
+# PRETTY-NEXT:      "Format": "elf64-x86-64",
+# PRETTY-NEXT:      "Arch": "x86_64",
+# PRETTY-NEXT:      "AddressSize": "64bit",
+# PRETTY-NEXT:      "LoadName": "<Not found>"
 # PRETTY-NEXT:    }
 # PRETTY-NEXT:  }
 # PRETTY-NEXT:]
 
 --- !ELF
 FileHeader:
   Class:   ELFCLASS64
   Data:    ELFDATA2LSB
   Type:    ET_REL
   Machine: EM_X86_64
diff --git a/llvm/test/tools/llvm-readobj/XCOFF/loader-section-header.test b/llvm/test/tools/llvm-readobj/XCOFF/loader-section-header.test
new file mode 100644
index 000000000000..5aa456537a11
--- /dev/null
+++ b/llvm/test/tools/llvm-readobj/XCOFF/loader-section-header.test
@@ -0,0 +1,71 @@
+## Test the --loader-section-header option.
+
+# RUN: yaml2obj --docnum=1 %s -o %t_xcoff32.o
+# RUN: yaml2obj --docnum=2  %s -o %t_xcoff64.o
+# RUN: llvm-readobj --loader-section-header %t_xcoff32.o |\
+# RUN:   FileCheck %s --check-prefixes=CHECK32
+# RUN: llvm-readobj --loader-section-header %t_xcoff64.o |\
+# RUN:   FileCheck %s --check-prefixes=CHECK64
+
+--- !XCOFF
+FileHeader:
+  MagicNumber:       0x1DF
+Sections:
+  - Name:            .loader
+    Flags:           [ STYP_LOADER ]
+    SectionData:     "0000000100000003000000050000016D00000001000000A40000001800000211"
+##                    ^-------                                                           -Version=1
+##                            ^-------                                                   -NumberOfSymbolEntries=3
+##                                    ^-------                                           -NumberOfRelocationEntries=5
+##                                            ^-------                                   -LengthOfImportFileIDStringTable=365
+##                                                    ^-------                           -NumberOfImportFileIDs=1
+##                                                            ^-------                   -OffsetToImportFileIDs=0xA4
+##                                                                    ^-------           -LengthOfStringTable=24
+##                                                                            ^-------   -OffsetToStringTable=0x211
+
+
+--- !XCOFF
+FileHeader:
+  MagicNumber:       0x1F7
+Sections:
+  - Name:            .loader
+    Flags:           [ STYP_LOADER ]
+    SectionData:     "0000000200000003000000050000016D000000010000002300000000000000D0000000000000023D00000000000000380000000000000080"
+##                    ^-------                                                           -Version=2
+##                            ^-------                                                   -NumberOfSymbolEntries=3
+##                                    ^-------                                           -NumberOfRelocationEntries=5
+##                                            ^-------                                   -LengthOfImportFileIDStringTable=365
+##                                                    ^-------                           -NumberOfImportFileIDs=1
+##                                                            ^-------                   --LengthOfStringTable=0x23
+##                                                                    ^---------------   -OffsetToImportFileIDs=0xD0
+##                                                                                    ^---------------                                        -OffsetToStringTable=0x23D
+##                                                                                                    ^--------------                         -OffsetToSymbolTable=0x38
+##                                                                                                                    ^---------------        -OffsetToRelocationEntries=0x80
+
+# CHECK32:      Loader Section {
+# CHECK32-NEXT:     Loader Section Header {
+# CHECK32-NEXT:       Version: 1
+# CHECK32-NEXT:       NumberOfSymbolEntries: 3
+# CHECK32-NEXT:       NumberOfRelocationEntries: 5
+# CHECK32-NEXT:       LengthOfImportFileIDStringTable: 365
+# CHECK32-NEXT:       NumberOfImportFileIDs: 1
+# CHECK32-NEXT:       OffsetToImportFileIDs: 0xA4
+# CHECK32-NEXT:       LengthOfStringTable: 24
+# CHECK32-NEXT:       OffsetToStringTable: 0x211
+# CHECK32-NEXT:   }
+# CHECK32-NEXT: }
+
+# CHECK64:      Loader Section {
+# CHECK64-NEXT:     Loader Section Header {
+# CHECK64-NEXT:       Version: 2
+# CHECK64-NEXT:       NumberOfSymbolEntries: 3
+# CHECK64-NEXT:       NumberOfRelocationEntries: 5
+# CHECK64-NEXT:       LengthOfImportFileIDStringTable: 365
+# CHECK64-NEXT:       NumberOfImportFileIDs: 1
+# CHECK64-NEXT:       OffsetToImportFileIDs: 0xD0
+# CHECK64-NEXT:       LengthOfStringTable: 35
+# CHECK64-NEXT:       OffsetToStringTable: 0x23D
+# CHECK64-NEXT:       OffsetToSymbolTable: 0x38
+# CHECK64-NEXT:       OffsetToRelocationEntries: 0x80
+# CHECK64-NEXT:   }
+# CHECK64-NEXT: }
diff --git a/llvm/test/tools/llvm-reduce/oracle-count.ll b/llvm/test/tools/llvm-reduce/oracle-count.ll
new file mode 100644
index 000000000000..948c6da262e2
--- /dev/null
+++ b/llvm/test/tools/llvm-reduce/oracle-count.ll
@@ -0,0 +1,23 @@
+; RUN: llvm-reduce --test FileCheck --test-arg --check-prefixes=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t 2>&1 | FileCheck %s --check-prefix=CHECK-LOG
+; RUN: FileCheck --check-prefixes=CHECK-FINAL --input-file=%t %s
+
+; CHECK-INTERESTINGNESS: ret i32
+; CHECK-FINAL: ret i32 0
+
+; Test that we don't invoke the oracle more than necessary (e.g. check the
+; oracle then perform some failable/redundant reduction, as opposed to check if
+; a reduction will fail/be redundant before invoking the oracle). This prevents
+; overestimation of the number of possible reductions and the number of times we
+; attempt to reduce.
+
+; IR passes
+; CHECK-LOG: Saved new best reduction
+; Module data
+; CHECK-LOG: Saved new best reduction
+; SimplifyCFG
+; CHECK-LOG: Saved new best reduction
+; CHECK-LOG-NOT: Saved new best reduction
+
+define i32 @f() {
+  ret i32 0
+}
\ No newline at end of file
diff --git a/llvm/test/tools/llvm-reduce/reduce-atomic-ordering.ll b/llvm/test/tools/llvm-reduce/reduce-atomic-ordering.ll
new file mode 100644
index 000000000000..dd12c7869246
--- /dev/null
+++ b/llvm/test/tools/llvm-reduce/reduce-atomic-ordering.ll
@@ -0,0 +1,82 @@
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=atomic-ordering --test FileCheck --test-arg --check-prefixes=INTERESTING,CHECK --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck -check-prefixes=RESULT,CHECK %s < %t
+
+; CHECK-LABEL: @load_atomic_keep(
+; INTERESTING: seq_cst
+; RESULT: %op = load atomic i32, ptr %ptr syncscope("agent") seq_cst, align 4
+define i32 @load_atomic_keep(ptr %ptr) {
+  %op = load atomic i32, ptr %ptr syncscope("agent") seq_cst, align 4
+  ret i32 %op
+}
+
+; CHECK-LABEL: @load_atomic_drop(
+; INTERESTING: load
+; RESULT: %op = load i32, ptr %ptr, align 4
+define i32 @load_atomic_drop(ptr %ptr) {
+  %op = load atomic i32, ptr %ptr syncscope("agent") seq_cst, align 4
+  ret i32 %op
+}
+
+; CHECK-LABEL: @store_atomic_keep(
+; INTERESTING: syncscope("agent")
+; RESULT: store atomic i32 0, ptr %ptr syncscope("agent") seq_cst, align 4
+define void @store_atomic_keep(ptr %ptr) {
+  store atomic i32 0, ptr %ptr syncscope("agent") seq_cst, align 4
+  ret void
+}
+
+; CHECK-LABEL: @store_atomic_drop(
+; INTERESTING: store
+; RESULT: store i32 0, ptr %ptr, align 4
+define void @store_atomic_drop(ptr %ptr) {
+  store atomic i32 0, ptr %ptr syncscope("agent") seq_cst, align 4
+  ret void
+}
+
+; CHECK-LABEL: @atomicrmw_atomic_seq_cst_keep(
+; INTERESTING: seq_cst
+; RESULT: %val = atomicrmw add ptr %ptr, i32 3 syncscope("agent") seq_cst, align 4
+define i32 @atomicrmw_atomic_seq_cst_keep(ptr %ptr) {
+  %val = atomicrmw add ptr %ptr, i32 3 syncscope("agent") seq_cst, align 4
+  ret i32 %val
+}
+
+; CHECK-LABEL: @atomicrmw_atomic_seq_cst_drop(
+; INTERESTING: atomicrmw
+; RESULT: %val = atomicrmw add ptr %ptr, i32 3 monotonic, align 4
+define i32 @atomicrmw_atomic_seq_cst_drop(ptr %ptr) {
+  %val = atomicrmw add ptr %ptr, i32 3 seq_cst
+  ret i32 %val
+}
+
+; CHECK-LABEL: @cmpxchg_atomic_seq_cst_seq_cst_keep(
+; INTERESTING: seq_cst seq_cst
+; RESULT: %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst seq_cst, align 4
+define { i32, i1 } @cmpxchg_atomic_seq_cst_seq_cst_keep(ptr %ptr, i32 %old, i32 %in) {
+  %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst seq_cst
+  ret { i32, i1 } %val
+}
+
+; CHECK-LABEL: @cmpxchg_seq_cst_seq_cst_keep_left(
+; INTERESTING: syncscope("agent") seq_cst
+; RESULT: %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst monotonic, align 4
+define { i32, i1 } @cmpxchg_seq_cst_seq_cst_keep_left(ptr %ptr, i32 %old, i32 %in) {
+  %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst seq_cst
+  ret { i32, i1 } %val
+}
+
+; CHECK-LABEL: @cmpxchg_seq_cst_seq_cst_keep_right(
+; INTERESTING: seq_cst, align 4
+; RESULT: %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") monotonic seq_cst, align 4
+define { i32, i1 } @cmpxchg_seq_cst_seq_cst_keep_right(ptr %ptr, i32 %old, i32 %in) {
+  %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst seq_cst, align 4
+  ret { i32, i1 } %val
+}
+
+; CHECK-LABEL: @cmpxchg_seq_cst_seq_cst_drop(
+; INTERESTING: = cmpxchg ptr
+; RESULT: %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") monotonic monotonic, align 4
+define { i32, i1 } @cmpxchg_seq_cst_seq_cst_drop(ptr %ptr, i32 %old, i32 %in) {
+  %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst seq_cst
+  ret { i32, i1 } %val
+}
diff --git a/llvm/test/tools/llvm-reduce/reduce-atomic-syncscope.ll b/llvm/test/tools/llvm-reduce/reduce-atomic-syncscope.ll
new file mode 100644
index 000000000000..3a8051a9ef51
--- /dev/null
+++ b/llvm/test/tools/llvm-reduce/reduce-atomic-syncscope.ll
@@ -0,0 +1,82 @@
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=syncscopes --test FileCheck --test-arg --check-prefixes=INTERESTING,CHECK --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck -check-prefixes=RESULT,CHECK %s < %t
+
+; CHECK-LABEL: @load_syncscope_keep(
+; INTERESTING: syncscope("agent")
+; RESULT: %op = load atomic i32, ptr %ptr syncscope("agent") seq_cst, align 4
+define i32 @load_syncscope_keep(ptr %ptr) {
+  %op = load atomic i32, ptr %ptr syncscope("agent") seq_cst, align 4
+  ret i32 %op
+}
+
+; CHECK-LABEL: @load_syncscope_drop(
+; INTERESTING: load atomic
+; RESULT: %op = load atomic i32, ptr %ptr seq_cst, align 4
+define i32 @load_syncscope_drop(ptr %ptr) {
+  %op = load atomic i32, ptr %ptr syncscope("agent") seq_cst, align 4
+  ret i32 %op
+}
+
+; CHECK-LABEL: @store_syncscope_keep(
+; INTERESTING: syncscope("agent")
+; RESULT: store atomic i32 0, ptr %ptr syncscope("agent") seq_cst, align 4
+define void @store_syncscope_keep(ptr %ptr) {
+  store atomic i32 0, ptr %ptr syncscope("agent") seq_cst, align 4
+  ret void
+}
+
+; CHECK-LABEL: @store_syncscope_drop(
+; INTERESTING: store
+; RESULT: store atomic i32 0, ptr %ptr seq_cst, align 4
+define void @store_syncscope_drop(ptr %ptr) {
+  store atomic i32 0, ptr %ptr syncscope("agent") seq_cst, align 4
+  ret void
+}
+
+; CHECK-LABEL: @atomicrmw_syncscope_keep(
+; INTERESTING: syncscope("agent")
+; RESULT: %val = atomicrmw add ptr %ptr, i32 3 syncscope("agent") seq_cst, align 4
+define i32 @atomicrmw_syncscope_keep(ptr %ptr) {
+  %val = atomicrmw add ptr %ptr, i32 3 syncscope("agent") seq_cst, align 4
+  ret i32 %val
+}
+
+; CHECK-LABEL: @atomicrmw_syncscope_drop(
+; INTERESTING: atomicrmw
+; RESULT: %val = atomicrmw add ptr %ptr, i32 3 seq_cst, align 4
+define i32 @atomicrmw_syncscope_drop(ptr %ptr) {
+  %val = atomicrmw add ptr %ptr, i32 3 seq_cst
+  ret i32 %val
+}
+
+; CHECK-LABEL: @cmpxchg_syncscope_keep(
+; INTERESTING: syncscope("agent")
+; RESULT: %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst seq_cst, align 4
+define { i32, i1 } @cmpxchg_syncscope_keep(ptr %ptr, i32 %old, i32 %in) {
+  %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst seq_cst
+  ret { i32, i1 } %val
+}
+
+; CHECK-LABEL: @cmpxchg_syncscope_drop(
+; INTERESTING: = cmpxchg ptr
+; RESULT: %val = cmpxchg ptr %ptr, i32 %old, i32 %in seq_cst seq_cst, align 4
+define { i32, i1 } @cmpxchg_syncscope_drop(ptr %ptr, i32 %old, i32 %in) {
+  %val = cmpxchg ptr %ptr, i32 %old, i32 %in syncscope("agent") seq_cst seq_cst
+  ret { i32, i1 } %val
+}
+
+; CHECK-LABEL: @fence_syncscope_keep(
+; INTERESTING: syncscope("agent")
+; RESULT: fence syncscope("agent") acquire
+define void @fence_syncscope_keep() {
+  fence syncscope("agent") acquire
+  ret void
+}
+
+; CHECK-LABEL: @fence_syncscope_drop(
+; INTERESTING: fence
+; RESULT: fence acquire
+define void @fence_syncscope_drop() {
+  fence syncscope("agent") acquire
+  ret void
+}
diff --git a/llvm/test/tools/llvm-reduce/reduce-conditionals.ll b/llvm/test/tools/llvm-reduce/reduce-conditionals.ll
new file mode 100644
index 000000000000..a832673d7350
--- /dev/null
+++ b/llvm/test/tools/llvm-reduce/reduce-conditionals.ll
@@ -0,0 +1,39 @@
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=simplify-conditionals-true --test FileCheck --test-arg --check-prefixes=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck --check-prefixes=RESULT-TRUE %s < %t
+
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=simplify-conditionals-false --test FileCheck --test-arg --check-prefixes=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck --check-prefixes=RESULT-FALSE %s < %t
+
+; CHECK-INTERESTINGNESS-LABEL: @func(
+; CHECK-INTERESTINGNESS: store i32 1,
+
+; RESULT-TRUE: bb0:
+; RESULT-TRUE: store i32 0, ptr null, align 4
+; RESULT-TRUE-NEXT: store i32 1, ptr null, align 4
+; RESULT-TRUE-NEXT: br label %bb2
+; RESULT-TRUE-NOT: bb1
+
+
+; RESULT-FALSE: bb0:
+; RESULT-FALSE: store i32 0, ptr null, align 4
+; RESULT-FALSE-NEXT: br label %bb2
+
+; RESULT-FALSE: bb1: ; No predecessors!
+; RESULT-FALSE-NEXT: store i32 1, ptr null, align 4
+; RESULT-FALSE-NEXT: br label %bb3
+define void @func(i1 %cond0, i1 %cond1) {
+bb0:
+  store i32 0, ptr null
+  br i1 %cond0, label %bb1, label %bb2
+
+bb1:
+  store i32 1, ptr null
+  br i1 %cond1, label %bb2, label %bb3
+
+bb2:
+  store i32 2, ptr null
+  br label %bb3
+
+bb3:
+  ret void
+}
diff --git a/llvm/test/tools/llvm-reduce/reduce-flags.ll b/llvm/test/tools/llvm-reduce/reduce-flags.ll
new file mode 100644
index 000000000000..4745f98db46b
--- /dev/null
+++ b/llvm/test/tools/llvm-reduce/reduce-flags.ll
@@ -0,0 +1,202 @@
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=instruction-flags --test FileCheck --test-arg --check-prefixes=INTERESTING,CHECK --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck -check-prefixes=RESULT,CHECK %s < %t
+
+; CHECK-LABEL: @add_nuw_nsw_none(
+; INTERESTING: = add
+; RESULT: add i32
+define i32 @add_nuw_nsw_none(i32 %a, i32 %b) {
+  %op = add nuw nsw i32 %a, %b
+  ret i32 %op
+}
+
+; CHECK-LABEL: @add_nuw_nsw_keep_nuw(
+; INTERESTING: nuw
+; RESULT: add nuw i32
+define i32 @add_nuw_nsw_keep_nuw(i32 %a, i32 %b) {
+  %op = add nuw nsw i32 %a, %b
+  ret i32 %op
+}
+
+; CHECK-LABEL: @add_nuw_nsw_keep_nsw(
+; INTERESTING: nuw
+; RESULT: add nuw i32
+define i32 @add_nuw_nsw_keep_nsw(i32 %a, i32 %b) {
+  %op = add nuw nsw i32 %a, %b
+  ret i32 %op
+}
+
+; CHECK-LABEL: @add_nuw_keep_nuw(
+; INTERESTING: nuw
+; RESULT: add nuw i32
+define i32 @add_nuw_keep_nuw(i32 %a, i32 %b) {
+  %op = add nuw i32 %a, %b
+  ret i32 %op
+}
+
+; CHECK-LABEL: @add_nsw_keep_nsw(
+; INTERESTING: nsw
+; RESULT: add nsw i32
+define i32 @add_nsw_keep_nsw(i32 %a, i32 %b) {
+  %op = add nsw i32 %a, %b
+  ret i32 %op
+}
+
+; CHECK-LABEL: @ashr_exact_drop(
+; INTERESTING: = ashr
+; RESULT: ashr i32
+define i32 @ashr_exact_drop(i32 %a, i32 %b) {
+  %op = ashr exact i32 %a, %b
+  ret i32 %op
+}
+
+; CHECK-LABEL: @ashr_exact_keep(
+; INTERESTING: exact
+; RESULT: ashr exact i32
+define i32 @ashr_exact_keep(i32 %a, i32 %b) {
+  %op = ashr exact i32 %a, %b
+  ret i32 %op
+}
+
+; CHECK-LABEL: @getelementptr_inbounds_drop(
+; INTERESTING: getelementptr
+; RESULT: getelementptr i32, ptr %a, i64 %b
+define ptr @getelementptr_inbounds_drop(ptr %a, i64 %b) {
+  %op = getelementptr inbounds i32, ptr %a, i64 %b
+  ret ptr %op
+}
+
+; CHECK-LABEL: @getelementptr_inbounds_keep(
+; INTERESTING: inbounds
+; RESULT: getelementptr inbounds i32, ptr %a, i64 %b
+define ptr @getelementptr_inbounds_keep(ptr %a, i64 %b) {
+  %op = getelementptr inbounds i32, ptr %a, i64 %b
+  ret ptr %op
+}
+
+; CHECK-LABEL: @fadd_reassoc_none(
+; INTERESTING: = fadd
+; RESULT: fadd float
+define float @fadd_reassoc_none(float %a, float %b) {
+  %op = fadd reassoc float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_reassoc_keep(
+; INTERESTING: fadd reassoc
+; RESULT: fadd reassoc float
+define float @fadd_reassoc_keep(float %a, float %b) {
+  %op = fadd reassoc float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_nnan_none(
+; INTERESTING: = fadd
+; RESULT: fadd float
+define float @fadd_nnan_none(float %a, float %b) {
+  %op = fadd nnan float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_nnan_keep(
+; INTERESTING: fadd nnan
+; RESULT: fadd nnan float
+define float @fadd_nnan_keep(float %a, float %b) {
+  %op = fadd nnan float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_ninf_none(
+; INTERESTING: = fadd
+; RESULT: fadd float
+define float @fadd_ninf_none(float %a, float %b) {
+  %op = fadd ninf float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_ninf_keep(
+; INTERESTING: fadd ninf
+; RESULT: fadd ninf float
+define float @fadd_ninf_keep(float %a, float %b) {
+  %op = fadd ninf float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_nsz_none(
+; INTERESTING: = fadd
+; RESULT: fadd float
+define float @fadd_nsz_none(float %a, float %b) {
+  %op = fadd nsz float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_nsz_keep(
+; INTERESTING: fadd nsz
+; RESULT: fadd nsz float
+define float @fadd_nsz_keep(float %a, float %b) {
+  %op = fadd nsz float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_arcp_none(
+; INTERESTING: = fadd
+; RESULT: fadd float
+define float @fadd_arcp_none(float %a, float %b) {
+  %op = fadd arcp float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_arcp_keep(
+; INTERESTING: fadd arcp
+; RESULT: fadd arcp float
+define float @fadd_arcp_keep(float %a, float %b) {
+  %op = fadd arcp float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_contract_none(
+; INTERESTING: = fadd
+; RESULT: fadd float
+define float @fadd_contract_none(float %a, float %b) {
+  %op = fadd contract float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_contract_keep(
+; INTERESTING: fadd contract
+; RESULT: fadd contract float
+define float @fadd_contract_keep(float %a, float %b) {
+  %op = fadd contract float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_afn_none(
+; INTERESTING: = fadd
+; RESULT: fadd float
+define float @fadd_afn_none(float %a, float %b) {
+  %op = fadd afn float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_afn_keep(
+; INTERESTING: fadd afn
+; RESULT: fadd afn float
+define float @fadd_afn_keep(float %a, float %b) {
+  %op = fadd afn float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_fast_none(
+; INTERESTING: = fadd
+; RESULT: fadd float
+define float @fadd_fast_none(float %a, float %b) {
+  %op = fadd fast float %a, %b
+  ret float %op
+}
+
+; CHECK-LABEL: @fadd_nnan_ninf_keep_nnan(
+; INTERESTING: nnan
+; RESULT: fadd nnan float
+define float @fadd_nnan_ninf_keep_nnan(float %a, float %b) {
+  %op = fadd nnan ninf float %a, %b
+  ret float %op
+}
diff --git a/llvm/test/tools/llvm-reduce/reduce-opcodes.ll b/llvm/test/tools/llvm-reduce/reduce-opcodes.ll
index 285283e013ad..3156d53f70f1 100644
--- a/llvm/test/tools/llvm-reduce/reduce-opcodes.ll
+++ b/llvm/test/tools/llvm-reduce/reduce-opcodes.ll
@@ -1,191 +1,217 @@
-; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=opcodes --test FileCheck --test-arg --check-prefixes=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
-; RUN: FileCheck -check-prefix=RESULT %s < %t
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=opcodes --test FileCheck --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck -check-prefixes=CHECK,RESULT %s < %t
 
-; CHECK-INTERESTINGNESS: @fdiv_fast(
-; RESULT: %op = fmul fast float %a, %b, !dbg !7, !fpmath !13
+; CHECK-LABEL: @fdiv_fast(
+; RESULT-NEXT: %op = fmul fast float %a, %b, !dbg !7, !fpmath !13
+; RESULT-NEXT: ret float %op
 define float @fdiv_fast(float %a, float %b) {
   %op = fdiv fast float %a, %b, !dbg !7, !fpmath !13
   ret float %op
 }
 
-; CHECK-INTERESTINGNESS: @frem_nnan(
-; RESULT: %op = fmul nnan float %a, %b, !dbg !7, !fpmath !13
+; CHECK-LABEL: @frem_nnan(
+; RESULT-NEXT: %op = fmul nnan float %a, %b, !dbg !7, !fpmath !13
+; RESULT-NEXT: ret float %op
 define float @frem_nnan(float %a, float %b) {
   %op = frem nnan float %a, %b, !dbg !7, !fpmath !13
   ret float %op
 }
 
-; CHECK-INTERESTINGNESS: @udiv(
-; RESULT: %op = mul i32 %a, %b, !dbg !7
+; CHECK-LABEL: @udiv(
+; RESULT-NEXT: %op = mul i32 %a, %b, !dbg !7
+; RESULT-NEXT: ret i32 %op
 define i32 @udiv(i32 %a, i32 %b) {
   %op = udiv i32 %a, %b, !dbg !7
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @udiv_vec(
-; RESULT: %op = mul <2 x i32> %a, %b, !dbg !7
+; CHECK-LABEL: @udiv_vec(
+; RESULT-NEXT: %op = mul <2 x i32> %a, %b, !dbg !7
+; RESULT-NEXT: ret <2 x i32> %op
 define <2 x i32> @udiv_vec(<2 x i32> %a, <2 x i32> %b) {
   %op = udiv <2 x i32> %a, %b, !dbg !7
   ret <2 x i32> %op
 }
 
-; CHECK-INTERESTINGNESS: @sdiv(
-; RESULT: %op = mul i32 %a, %b{{$}}
+; CHECK-LABEL: @sdiv(
+; RESULT-NEXT: %op = mul i32 %a, %b{{$}}
+; RESULT-NEXT: ret i32 %op
 define i32 @sdiv(i32 %a, i32 %b) {
   %op = sdiv i32 %a, %b
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @sdiv_exact(
-; RESULT: %op = mul i32 %a, %b, !dbg !7
+; CHECK-LABEL: @sdiv_exact(
+; RESULT-NEXT: %op = mul i32 %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define i32 @sdiv_exact(i32 %a, i32 %b) {
   %op = sdiv exact i32 %a, %b, !dbg !7
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @urem(
-; RESULT: %op = mul i32 %a, %b, !dbg !7
+; CHECK-LABEL: @urem(
+; RESULT-NEXT: %op = mul i32 %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define i32 @urem(i32 %a, i32 %b) {
   %op = urem i32 %a, %b, !dbg !7
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @srem(
-; RESULT: %op = mul i32 %a, %b, !dbg !7
+; CHECK-LABEL: @srem(
+; RESULT-NEXT: %op = mul i32 %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define i32 @srem(i32 %a, i32 %b) {
   %op = srem i32 %a, %b, !dbg !7
   ret i32 %op
 }
 
 ; Make sure there's no crash if the IRBuilder decided to constant fold something
-; CHECK-INTERESTINGNESS: @add_constant_fold(
-; RESULT: %op = add i32 0, 0, !dbg !7
+; CHECK-LABEL: @add_constant_fold(
+; RESULT-NEXT: %op = add i32 0, 0, !dbg !7
+; RESULT-NEXT: ret
 define i32 @add_constant_fold() {
   %op = add i32 0, 0, !dbg !7
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @add(
-; RESULT: %op = or i32 %a, %b, !dbg !7
+; CHECK-LABEL: @add(
+; RESULT-NEXT: %op = or i32 %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define i32 @add(i32 %a, i32 %b) {
   %op = add i32 %a, %b, !dbg !7
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @add_nuw(
-; RESULT: %op = or i32 %a, %b, !dbg !7
+; CHECK-LABEL: @add_nuw(
+; RESULT-NEXT: %op = or i32 %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define i32 @add_nuw(i32 %a, i32 %b) {
   %op = add nuw i32 %a, %b, !dbg !7
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @add_nsw(
-; RESULT: %op = or i32 %a, %b, !dbg !7
+; CHECK-LABEL: @add_nsw(
+; RESULT-NEXT: %op = or i32 %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define i32 @add_nsw(i32 %a, i32 %b) {
   %op = add nsw i32 %a, %b, !dbg !7
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @sub_nuw_nsw(
-; RESULT: %op = or i32 %a, %b, !dbg !7
+; CHECK-LABEL: @sub_nuw_nsw(
+; RESULT-NEXT: %op = or i32 %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define i32 @sub_nuw_nsw(i32 %a, i32 %b) {
   %op = sub nuw nsw i32 %a, %b, !dbg !7
   ret i32 %op
 }
 
-; CHECK-INTERESTINGNESS: @workitem_id_y(
-; RESULT: %id = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !7
+; CHECK-LABEL: @workitem_id_y(
+; RESULT-NEXT: %id = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !7
+; RESULT-NEXT: ret
 define i32 @workitem_id_y() {
   %id = call i32 @llvm.amdgcn.workitem.id.y(), !dbg !7
   ret i32 %id
 }
 
-; CHECK-INTERESTINGNESS: @workitem_id_z(
-; RESULT: %id = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !7
+; CHECK-LABEL: @workitem_id_z(
+; RESULT-NEXT: %id = call i32 @llvm.amdgcn.workitem.id.x(), !dbg !7
+; RESULT-NEXT: ret
 define i32 @workitem_id_z() {
   %id = call i32 @llvm.amdgcn.workitem.id.z(), !dbg !7
   ret i32 %id
 }
 
-; CHECK-INTERESTINGNESS: @workgroup_id_y(
-; RESULT: %id = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
+; CHECK-LABEL: @workgroup_id_y(
+; RESULT-NEXT: %id = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
+; RESULT-NEXT: ret
 define i32 @workgroup_id_y() {
   %id = call i32 @llvm.amdgcn.workgroup.id.y(), !dbg !7
   ret i32 %id
 }
 
-; CHECK-INTERESTINGNESS: @workgroup_id_z(
-; RESULT: %id = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
+; CHECK-LABEL: @workgroup_id_z(
+; RESULT-NEXT: %id = call i32 @llvm.amdgcn.workgroup.id.x(), !dbg !7
+; RESULT-NEXT: ret
 define i32 @workgroup_id_z() {
   %id = call i32 @llvm.amdgcn.workgroup.id.z(), !dbg !7
   ret i32 %id
 }
 
 ; CHECK-LABEL: @minnum_nsz(
-; RESULT: %op = fmul nsz float %a, %b, !dbg !7
+; RESULT-NEXT: %op = fmul nsz float %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define float @minnum_nsz(float %a, float %b) {
   %op = call nsz float @llvm.minnum.f32(float %a, float %b), !dbg !7
   ret float %op
 }
 
 ; CHECK-LABEL: @maxnum_nsz(
-; RESULT: %op = fmul nsz float %a, %b, !dbg !7
+; RESULT-NEXT: %op = fmul nsz float %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define float @maxnum_nsz(float %a, float %b) {
   %op = call nsz float @llvm.maxnum.f32(float %a, float %b), !dbg !7
   ret float %op
 }
 
-; CHECK-LABEL: @minimum(
-; RESULT: %op = fmul nsz float %a, %b, !dbg !7
+; CHECK-LABEL: @minimum_nsz(
+; RESULT-NEXT: %op = fmul nsz float %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define float @minimum_nsz(float %a, float %b) {
   %op = call nsz float @llvm.minimum.f32(float %a, float %b), !dbg !7
   ret float %op
 }
 
-; CHECK-LABEL: @maximum(
-; RESULT: %op = fmul nsz float %a, %b, !dbg !7
+; CHECK-LABEL: @maximum_nsz(
+; RESULT-NEXT: %op = fmul nsz float %a, %b, !dbg !7
+; RESULT-NEXT: ret
 define float @maximum_nsz(float %a, float %b) {
   %op = call nsz float @llvm.maximum.f32(float %a, float %b), !dbg !7
   ret float %op
 }
 
 ; CHECK-LABEL: @sqrt_ninf(
-; RESULT: %op = fmul ninf float %a, 2.000000e+00, !dbg !7
+; RESULT-NEXT: %op = fmul ninf float %a, 2.000000e+00, !dbg !7
+; RESULT-NEXT: ret
 define float @sqrt_ninf(float %a, float %b) {
   %op = call ninf float @llvm.sqrt.f32(float %a), !dbg !7
   ret float %op
 }
 
 ; CHECK-LABEL: @sqrt_vec(
-; RESULT: %op = fmul <2 x float> %a, <float 2.000000e+00, float 2.000000e+00>, !dbg !7
+; RESULT-NEXT: %op = fmul <2 x float> %a, <float 2.000000e+00, float 2.000000e+00>, !dbg !7
+; RESULT-NEXT: ret
 define <2 x float> @sqrt_vec(<2 x float> %a, <2 x float> %b) {
   %op = call <2 x float> @llvm.sqrt.v2f32(<2 x float> %a), !dbg !7
   ret <2 x float> %op
 }
 
 ; CHECK-LABEL: @div_fixup(
-; RESULT: %op = call float @llvm.fma.f32(float %a, float %b, float %c)
+; RESULT-NEXT: %op = call float @llvm.fma.f32(float %a, float %b, float %c)
+; RESULT-NEXT: ret
 define float @div_fixup(float %a, float %b, float %c) {
   %op = call float @llvm.amdgcn.div.fixup.f32(float %a, float %b, float %c)
   ret float %op
 }
 
 ; CHECK-LABEL: @fma_legacy(
-; RESULT: %op = call float @llvm.fma.f32(float %a, float %b, float %c)
+; RESULT-NEXT: %op = call float @llvm.fma.f32(float %a, float %b, float %c)
+; RESULT-NEXT: ret
 define float @fma_legacy(float %a, float %b, float %c) {
   %op = call float @llvm.amdgcn.fma.legacy(float %a, float %b, float %c)
   ret float %op
 }
 
 ; CHECK-LABEL: @fmul_legacy(
-; RESULT: %op = fmul float %a, %b
+; RESULT-NEXT: %op = fmul float %a, %b
+; RESULT-NEXT: ret
 define float @fmul_legacy(float %a, float %b) {
   %op = call float @llvm.amdgcn.fmul.legacy(float %a, float %b)
   ret float %op
 }
 
 declare i32 @llvm.amdgcn.workitem.id.y()
 declare i32 @llvm.amdgcn.workitem.id.z()
 declare i32 @llvm.amdgcn.workgroup.id.y()
 declare i32 @llvm.amdgcn.workgroup.id.z()
 declare float @llvm.amdgcn.div.fixup.f32(float, float, float)
diff --git a/llvm/test/tools/llvm-reduce/reduce-volatile.ll b/llvm/test/tools/llvm-reduce/reduce-volatile.ll
new file mode 100644
index 000000000000..2f09cbc38ccd
--- /dev/null
+++ b/llvm/test/tools/llvm-reduce/reduce-volatile.ll
@@ -0,0 +1,135 @@
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=volatile --test FileCheck --test-arg --check-prefixes=INTERESTING,CHECK --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck -check-prefixes=RESULT,CHECK %s < %t
+
+; CHECK-LABEL: @load_volatile_keep(
+; INTERESTING: load volatile
+; RESULT: %op = load volatile i32,
+define i32 @load_volatile_keep(ptr %ptr) {
+  %op = load volatile i32, ptr %ptr
+  ret i32 %op
+}
+
+; CHECK-LABEL: @load_volatile_drop(
+; INTERESTING: load
+; RESULT: %op = load i32,
+define i32 @load_volatile_drop(ptr %ptr) {
+  %op = load volatile i32, ptr %ptr
+  ret i32 %op
+}
+
+; CHECK-LABEL: @store_volatile_keep(
+; INTERESTING: store volatile
+; RESULT: store volatile i32 0,
+define void @store_volatile_keep(ptr %ptr) {
+  store volatile i32 0, ptr %ptr
+  ret void
+}
+
+; CHECK-LABEL: @store_volatile_drop(
+; INTERESTING: store
+; RESULT: store i32 0,
+define void @store_volatile_drop(ptr %ptr) {
+  store volatile i32 0, ptr %ptr
+  ret void
+}
+
+; CHECK-LABEL: @atomicrmw_volatile_keep(
+; INTERESTING: atomicrmw volatile
+; RESULT: atomicrmw volatile add ptr %ptr
+define i32 @atomicrmw_volatile_keep(ptr %ptr) {
+  %val = atomicrmw volatile add ptr %ptr, i32 3 seq_cst
+  ret i32 %val
+}
+
+; CHECK-LABEL: @atomicrmw_volatile_drop(
+; INTERESTING: atomicrmw
+; RESULT: atomicrmw add ptr %ptr
+define i32 @atomicrmw_volatile_drop(ptr %ptr) {
+  %val = atomicrmw volatile add ptr %ptr, i32 3 seq_cst
+  ret i32 %val
+}
+
+; CHECK-LABEL: @cmpxchg_volatile_keep(
+; INTERESTING: cmpxchg volatile
+; RESULT: cmpxchg volatile ptr %ptr, i32 %old, i32 %in seq_cst seq_cst
+define { i32, i1 } @cmpxchg_volatile_keep(ptr %ptr, i32 %old, i32 %in) {
+  %val = cmpxchg volatile ptr %ptr, i32 %old, i32 %in seq_cst seq_cst
+  ret { i32, i1 } %val
+}
+
+; CHECK-LABEL: @cmpxchg_volatile_drop(
+; INTERESTING: cmpxchg
+; RESULT: cmpxchg ptr %ptr, i32 %old, i32 %in seq_cst seq_cst
+define { i32, i1 } @cmpxchg_volatile_drop(ptr %ptr, i32 %old, i32 %in) {
+  %val = cmpxchg volatile ptr %ptr, i32 %old, i32 %in seq_cst seq_cst
+  ret { i32, i1 } %val
+}
+
+; CHECK-LABEL: @memcpy_volatile_keep(
+; INTERESTING: i1 true
+; RESULT: call void @llvm.memcpy.p0.p0.i64(ptr %dst, ptr %src, i64 %size, i1 true)
+define void @memcpy_volatile_keep(ptr %dst, ptr %src, i64 %size) {
+  call void @llvm.memcpy.p0.p0.i64(ptr %dst, ptr %src, i64 %size, i1 true)
+  ret void
+}
+
+; CHECK-LABEL: @memcpy_volatile_drop(
+; INTERESTING: llvm.memcpy
+; RESULT: call void @llvm.memcpy.p0.p0.i64(ptr %dst, ptr %src, i64 %size, i1 false)
+define void @memcpy_volatile_drop(ptr %dst, ptr %src, i64 %size) {
+  call void @llvm.memcpy.p0.p0.i64(ptr %dst, ptr %src, i64 %size, i1 true)
+  ret void
+}
+
+; CHECK-LABEL: @memcpy_inline_volatile_keep(
+; INTERESTING: i1 true
+; RESULT: call void @llvm.memcpy.inline.p0.p0.i64(ptr %dst, ptr %src, i64 256, i1 true)
+define void @memcpy_inline_volatile_keep(ptr %dst, ptr %src) {
+  call void @llvm.memcpy.inline.p0.p0.i64(ptr %dst, ptr %src, i64 256, i1 true)
+  ret void
+}
+
+; CHECK-LABEL: @memcpy_inline_volatile_drop(
+; INTERESTING: llvm.memcpy
+; RESULT: call void @llvm.memcpy.inline.p0.p0.i64(ptr %dst, ptr %src, i64 256, i1 false)
+define void @memcpy_inline_volatile_drop(ptr %dst, ptr %src) {
+  call void @llvm.memcpy.inline.p0.p0.i64(ptr %dst, ptr %src, i64 256, i1 true)
+  ret void
+}
+
+; CHECK-LABEL: @memmove_volatile_keep(
+; INTERESTING: i1 true
+; RESULT: call void @llvm.memmove.p0.p0.i64(ptr %dst, ptr %src, i64 256, i1 true)
+define void @memmove_volatile_keep(ptr %dst, ptr %src) {
+  call void @llvm.memmove.p0.p0.i64(ptr %dst, ptr %src, i64 256, i1 true)
+  ret void
+}
+
+; CHECK-LABEL: @memmove_volatile_drop(
+; INTERESTING: llvm.memmove
+; RESULT: call void @llvm.memmove.p0.p0.i64(ptr %dst, ptr %src, i64 %size, i1 false)
+define void @memmove_volatile_drop(ptr %dst, ptr %src, i64 %size) {
+  call void @llvm.memmove.p0.p0.i64(ptr %dst, ptr %src, i64 %size, i1 true)
+  ret void
+}
+
+; CHECK-LABEL: @memset_volatile_keep(
+; INTERESTING: i1 true
+; RESULT: call void @llvm.memset.p0.i64(ptr %ptr, i8 %val, i64 %size, i1 true)
+define void @memset_volatile_keep(ptr %ptr, i8 %val, i64 %size) {
+  call void @llvm.memset.p0.i64(ptr %ptr, i8 %val, i64 %size, i1 true)
+  ret void
+}
+
+; CHECK-LABEL: @memset_volatile_drop(
+; INTERESTING: llvm.memset
+; RESULT: call void @llvm.memset.p0.i64(ptr %ptr, i8 %val, i64 %size, i1 false)
+define void @memset_volatile_drop(ptr %ptr, i8 %val, i64 %size) {
+  call void @llvm.memset.p0.i64(ptr %ptr, i8 %val, i64 %size, i1 true)
+  ret void
+}
+
+declare void @llvm.memcpy.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg)
+declare void @llvm.memmove.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64, i1 immarg)
+declare void @llvm.memcpy.inline.p0.p0.i64(ptr noalias nocapture writeonly, ptr noalias nocapture readonly, i64 immarg, i1 immarg)
+declare void @llvm.memset.p0.i64(ptr noalias nocapture readonly, i8, i64, i1 immarg)
diff --git a/llvm/test/tools/llvm-reduce/remove-bbs-unreachable.ll b/llvm/test/tools/llvm-reduce/remove-bbs-unreachable.ll
index 4b9555e4a00e..0b373666fafe 100644
--- a/llvm/test/tools/llvm-reduce/remove-bbs-unreachable.ll
+++ b/llvm/test/tools/llvm-reduce/remove-bbs-unreachable.ll
@@ -1,20 +1,20 @@
 ; Check that verification doesn't fail when reducing a function with
 ; unreachable blocks.
 ;
 ; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=basic-blocks --test FileCheck --test-arg --check-prefixes=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
 ; RUN: FileCheck %s < %t
 
 ; CHECK-INTERESTINGNESS: test
 
 ; CHECK: define void @test() {
-; CHECK-NEXT:   unreachable:
+; CHECK-NEXT:   entry:
 ; CHECK-NEXT:     ret void
 
 define void @test() {
 entry:
   br label %exit
 
 unreachable:                                        ; No predecessors!
   br label %exit
 
 exit:
diff --git a/llvm/test/tools/llvm-reduce/remove-bbs.ll b/llvm/test/tools/llvm-reduce/remove-bbs.ll
index fa912503a7d0..a1fe9a3468d1 100644
--- a/llvm/test/tools/llvm-reduce/remove-bbs.ll
+++ b/llvm/test/tools/llvm-reduce/remove-bbs.ll
@@ -1,29 +1,36 @@
 ; Test that llvm-reduce can remove uninteresting Basic Blocks, and remove them from instructions (i.e. SwitchInst, BranchInst and IndirectBrInst)
 ; Note: if an uninteresting BB is the default case for a switch, the instruction is removed altogether (since the default case cannot be replaced)
 ;
-; RUN: llvm-reduce -abort-on-invalid-reduction --delta-passes=basic-blocks --test %python --test-arg %p/Inputs/remove-bbs.py %s -o %t
+; RUN: llvm-reduce -abort-on-invalid-reduction --delta-passes=basic-blocks --test FileCheck --test-arg --check-prefix=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
 ; RUN: FileCheck -implicit-check-not=uninteresting %s < %t
 
+; CHECK-INTERESTINGNESS: store i32 0
+; CHECK-INTERESTINGNESS: store i32 1
+; CHECK-INTERESTINGNESS: store i32 2
+
 define void @main() {
 interesting:
+  store i32 0, ptr null
   ; CHECK-NOT: switch i32 0, label %uninteresting
   switch i32 0, label %uninteresting [
-    i32 0, label %uninteresting
+    i32 1, label %interesting2
   ]
 
 uninteresting:
   ret void
 
 interesting2:
+  store i32 1, ptr null
   ; CHECK: switch i32 1, label %interesting3
   switch i32 1, label %interesting3 [
     ; CHECK-NOT: i32 0, label %uninteresting
     i32 0, label %uninteresting
     ; CHECK: i32 1, label %interesting3
     i32 1, label %interesting3
   ]
 
 interesting3:
+  store i32 2, ptr null
   ; CHECK: br label %interesting2
   br i1 true, label %interesting2, label %uninteresting
 }
diff --git a/llvm/test/tools/llvm-reduce/remove-comdat.ll b/llvm/test/tools/llvm-reduce/remove-comdat.ll
new file mode 100644
index 000000000000..d6453841016a
--- /dev/null
+++ b/llvm/test/tools/llvm-reduce/remove-comdat.ll
@@ -0,0 +1,29 @@
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=global-objects --test FileCheck --test-arg --check-prefixes=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck --check-prefix=CHECK-FINAL %s --input-file=%t
+
+; CHECK-INTERESTINGNESS: define void @f
+; CHECK-INTERESTINGNESS: define void @g
+; CHECK-INTERESTINGNESS: define void @i{{.*}} comdat
+
+; CHECK-FINAL-NOT: $f
+; CHECK-FINAL-NOT: $h
+; CHECK-FINAL: $i = comdat
+; CHECK-FINAL: define void @f() {
+; CHECK-FINAL: define void @g() {
+; CHECK-FINAL: define void @i() comdat {
+
+$f = comdat any
+$h = comdat any
+$i = comdat any
+
+define void @f() comdat {
+  ret void
+}
+
+define void @g() comdat($h) {
+  ret void
+}
+
+define void @i() comdat {
+  ret void
+}
diff --git a/llvm/test/tools/llvm-reduce/simplify-instructions.ll b/llvm/test/tools/llvm-reduce/simplify-instructions.ll
index a9cd54f809bd..7611d5fb7768 100644
--- a/llvm/test/tools/llvm-reduce/simplify-instructions.ll
+++ b/llvm/test/tools/llvm-reduce/simplify-instructions.ll
@@ -1,11 +1,11 @@
-; RUN: llvm-reduce -abort-on-invalid-reduction -simplify-mir --delta-passes=simplify-instructions -mtriple=amdgcn-amd-amdhsa -mcpu=gfx900 --test FileCheck --test-arg --check-prefix=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
+; RUN: llvm-reduce -abort-on-invalid-reduction --delta-passes=simplify-instructions --test FileCheck --test-arg --check-prefix=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
 ; RUN: FileCheck --check-prefix=RESULT %s < %t
 
 ; CHECK-INTERESTINGNESS: ret
 
 ; RESULT: %add4 = add i32 %arg0, %arg1
 ; RESULT: ret i32 %add4
 
 define i32 @func(i32 %arg0, i32 %arg1) {
 entry:
   %add0 = add i32 %arg0, 0
diff --git a/llvm/test/tools/llvm-reduce/strip-debug-info.ll b/llvm/test/tools/llvm-reduce/strip-debug-info.ll
new file mode 100644
index 000000000000..df34f686b33a
--- /dev/null
+++ b/llvm/test/tools/llvm-reduce/strip-debug-info.ll
@@ -0,0 +1,39 @@
+; RUN: llvm-reduce --abort-on-invalid-reduction --delta-passes=strip-debug-info --test FileCheck --test-arg --check-prefixes=CHECK-INTERESTINGNESS --test-arg %s --test-arg --input-file %s -o %t
+; RUN: FileCheck --check-prefix=CHECK-FINAL %s --input-file=%t
+
+; CHECK-INTERESTINGNESS: define i32 @main
+; CHECK-FINAL: define i32 @main
+; CHECK-FINAL-NOT: !dbg
+; CHECK-FINAL-NOT: call {{.*}}llvm.dbg
+; CHECK-FINAL-NOT: !llvm.dbg
+; CHECK-FINAL-NOT: = !DI
+
+define i32 @main() !dbg !4 {
+entry:
+  %retval = alloca i32, align 4
+  %a = alloca i8, align 1
+  store i32 0, ptr %retval, align 4
+  call void @llvm.dbg.declare(metadata ptr %a, metadata !10, metadata !DIExpression()), !dbg !12
+  store i8 0, ptr %a, align 1, !dbg !12
+  ret i32 0, !dbg !13
+}
+
+declare void @llvm.dbg.declare(metadata, metadata, metadata)
+
+!llvm.dbg.cu = !{!0}
+!llvm.module.flags = !{!2, !3}
+
+!0 = distinct !DICompileUnit(language: DW_LANG_C99, file: !1, producer: "clang version 16.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
+!1 = !DIFile(filename: "/tmp/a.c", directory: "/tmp", checksumkind: CSK_MD5, checksum: "2ed6e287521b82331926229153026511")
+!2 = !{i32 7, !"Dwarf Version", i32 5}
+!3 = !{i32 2, !"Debug Info Version", i32 3}
+!4 = distinct !DISubprogram(name: "main", scope: !5, file: !5, line: 4, type: !6, scopeLine: 4, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !9)
+!5 = !DIFile(filename: "/tmp/a.c", directory: "", checksumkind: CSK_MD5, checksum: "2ed6e287521b82331926229153026511")
+!6 = !DISubroutineType(types: !7)
+!7 = !{!8}
+!8 = !DIBasicType(name: "int", size: 32, encoding: DW_ATE_signed)
+!9 = !{}
+!10 = !DILocalVariable(name: "a", scope: !4, file: !5, line: 6, type: !11)
+!11 = !DIBasicType(name: "_Bool", size: 8, encoding: DW_ATE_boolean)
+!12 = !DILocation(line: 6, column: 8, scope: !4)
+!13 = !DILocation(line: 7, column: 2, scope: !4)
diff --git a/llvm/utils/update_test_checks.py b/llvm/utils/update_test_checks.py
index 626633aaa882..701e5e8bdf2f 100755
--- a/llvm/utils/update_test_checks.py
+++ b/llvm/utils/update_test_checks.py
@@ -1,20 +1,28 @@
 #!/usr/bin/env python3
 
 """A script to generate FileCheck statements for 'opt' regression tests.
 
 This script is a utility to update LLVM opt test cases with new
 FileCheck patterns. It can either update all of the tests in the file or
 a single test function.
 
 Example usage:
-$ update_test_checks.py --opt=../bin/opt test/foo.ll
+
+# Default to using `opt` as found in your PATH.
+$ update_test_checks.py test/foo.ll
+
+# Override the path lookup.
+$ update_test_checks.py --tool-binary=../bin/opt test/foo.ll
+
+# Use a custom tool instead of `opt`.
+$ update_test_checks.py --tool=yourtool test/foo.ll
 
 Workflow:
 1. Make a compiler patch that requires updating some number of FileCheck lines
    in regression test files.
 2. Save the patch and revert it from your local work area.
 3. Update the RUN-lines in the affected regression tests to look canonical.
    Example: "; RUN: opt < %s -instcombine -S | FileCheck %s"
 4. Refresh the FileCheck lines for either the entire file or select functions by
    running this script.
 5. Commit the fresh baseline of checks.
@@ -112,25 +120,25 @@ def main():
     builder = common.FunctionTestBuilder(
       run_list=prefix_list,
       flags=ti.args,
       scrubber_args=[],
       path=ti.path)
 
     tool_binary = ti.args.tool_binary
     if not tool_binary:
       tool_binary = tool_basename
 
-    for prefixes, opt_args, preprocess_cmd in prefix_list:
-      common.debug('Extracted opt cmd: ' + tool_basename + ' ' + opt_args)
+    for prefixes, tool_args, preprocess_cmd in prefix_list:
+      common.debug('Extracted tool cmd: ' + tool_basename + ' ' + tool_args)
       common.debug('Extracted FileCheck prefixes: ' + str(prefixes))
 
-      raw_tool_output = common.invoke_tool(tool_binary, opt_args,
+      raw_tool_output = common.invoke_tool(tool_binary, tool_args,
                                            ti.path, preprocess_cmd=preprocess_cmd,
                                            verbose=ti.args.verbose)
       builder.process_run_line(common.OPT_FUNCTION_RE, common.scrub_body,
               raw_tool_output, prefixes, False)
       builder.processed_prefixes(prefixes)
 
     func_dict = builder.finish_and_get_func_dict()
     is_in_function = False
     is_in_function_start = False
     has_checked_pre_function_globals = False

