 --- a/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll
 +++ b/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll
 @@ -1,8 +1,6 @@
 -; Use grep as an easily available "custom tool". Strip out comment lines to get
 -; identical output before and after update_test_checks has run.
 -; RUN: grep -v ';' %s | FileCheck --check-prefixes=CHECK %s
 +; RUN: llvm-extract -S --func=foo %s | FileCheck --check-prefixes=CHECK %s
  
  define i32 @foo(i32 %x) {
    %y = add i32 %x, 1
    ret i32 %y
  }
 --- a/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll.expected
 +++ b/llvm/test/tools/UpdateTestChecks/update_test_checks/Inputs/custom-tool.ll.expected
 @@ -1,13 +1,11 @@
 -; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool grep
 -; Use grep as an easily available "custom tool". Strip out comment lines to get
 -; identical output before and after update_test_checks has run.
 -; RUN: grep -v ';' %s | FileCheck --check-prefixes=CHECK %s
 +; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --tool llvm-extract
 +; RUN: llvm-extract -S --func=foo %s | FileCheck --check-prefixes=CHECK %s
  
  define i32 @foo(i32 %x) {
  ; CHECK-LABEL: @foo(
  ; CHECK-NEXT:    [[Y:%.*]] = add i32 [[X:%.*]], 1
  ; CHECK-NEXT:    ret i32 [[Y]]
  ;
    %y = add i32 %x, 1
    ret i32 %y
  }
 --- a/llvm/test/tools/UpdateTestChecks/update_test_checks/custom-tool.test
 +++ b/llvm/test/tools/UpdateTestChecks/update_test_checks/custom-tool.test
 @@ -1,9 +1,8 @@
 -# Don't rely on 'grep' being available on Windows.
 -# UNSUPPORTED: system-windows
 +# NOTE: Use a '\' in 'llvm\-extract' to prevent substitution.
  
 -# RUN: cp -f %S/Inputs/custom-tool.ll %t.ll && %update_test_checks %t.ll --tool=grep --tool-binary=grep
 +# RUN: cp -f %S/Inputs/custom-tool.ll %t.ll && %update_test_checks %t.ll --tool=llvm\-extract --tool-binary=llvm-extract
  # RUN: diff -u %t.ll %S/Inputs/custom-tool.ll.expected
  
 -## Check that running the script again does not change the result:
 -# RUN: %update_test_checks %t.ll --tool=grep --tool-binary=grep
 +## Check that running the script again does not change the result.
 +# RUN: %update_test_checks %t.ll --tool=llvm\-extract --tool-binary=llvm-extract
  # RUN: diff -u %t.ll %S/Inputs/custom-tool.ll.expected
 --- a/llvm/utils/update_test_checks.py
 +++ b/llvm/utils/update_test_checks.py
 @@ -1,20 +1,28 @@
  #!/usr/bin/env python3
  
  """A script to generate FileCheck statements for 'opt' regression tests.
  
  This script is a utility to update LLVM opt test cases with new
  FileCheck patterns. It can either update all of the tests in the file or
  a single test function.
  
  Example usage:
 -$ update_test_checks.py --opt=../bin/opt test/foo.ll
 +
 +# Default to using `opt` as found in your PATH.
 +$ update_test_checks.py test/foo.ll
 +
 +# Override the path lookup.
 +$ update_test_checks.py --tool-binary=../bin/opt test/foo.ll
 +
 +# Use a custom tool instead of `opt`.
 +$ update_test_checks.py --tool=yourtool test/foo.ll
  
  Workflow:
  1. Make a compiler patch that requires updating some number of FileCheck lines
     in regression test files.
  2. Save the patch and revert it from your local work area.
  3. Update the RUN-lines in the affected regression tests to look canonical.
     Example: "; RUN: opt < %s -instcombine -S | FileCheck %s"
  4. Refresh the FileCheck lines for either the entire file or select functions by
     running this script.
  5. Commit the fresh baseline of checks.
 @@ -112,25 +120,25 @@
      builder = common.FunctionTestBuilder(
        run_list=prefix_list,
        flags=ti.args,
        scrubber_args=[],
        path=ti.path)
  
      tool_binary = ti.args.tool_binary
      if not tool_binary:
        tool_binary = tool_basename
  
 -    for prefixes, opt_args, preprocess_cmd in prefix_list:
 -      common.debug('Extracted opt cmd: ' + tool_basename + ' ' + opt_args)
 +    for prefixes, tool_args, preprocess_cmd in prefix_list:
 +      common.debug('Extracted tool cmd: ' + tool_basename + ' ' + tool_args)
        common.debug('Extracted FileCheck prefixes: ' + str(prefixes))
  
 -      raw_tool_output = common.invoke_tool(tool_binary, opt_args,
 +      raw_tool_output = common.invoke_tool(tool_binary, tool_args,
                                             ti.path, preprocess_cmd=preprocess_cmd,
                                             verbose=ti.args.verbose)
        builder.process_run_line(common.OPT_FUNCTION_RE, common.scrub_body,
                raw_tool_output, prefixes, False)
        builder.processed_prefixes(prefixes)
  
      func_dict = builder.finish_and_get_func_dict()
      is_in_function = False
      is_in_function_start = False
      has_checked_pre_function_globals = False
